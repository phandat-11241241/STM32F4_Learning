
build/debug/test_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a90  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002ba0  08002ba0  00003ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002c88  08002c88  00003c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c90  08002c90  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00003c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002c98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000060  08002cf8  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000120c  08002cf8  0000420c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149bc  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e06  00000000  00000000  00018a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000aba4  00000000  00000000  0001b88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001048  00000000  00000000  00026438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cc3  00000000  00000000  00027480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113b5  00000000  00000000  00028143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005307  00000000  00000000  000394f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030d0  00000000  00000000  0003e800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000418d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08002b88 	.word	0x08002b88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08002b88 	.word	0x08002b88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000160:	2884      	cmp	r0, #132	@ 0x84
 8000162:	d001      	beq.n	8000168 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8000164:	3003      	adds	r0, #3
 8000166:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000168:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800016a:	4770      	bx	lr

0800016c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800016c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800016e:	f001 fe09 	bl	8001d84 <vTaskStartScheduler>
  
  return osOK;
}
 8000172:	2000      	movs	r0, #0
 8000174:	bd08      	pop	{r3, pc}

08000176 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800017a:	b087      	sub	sp, #28
 800017c:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800017e:	6944      	ldr	r4, [r0, #20]
 8000180:	b1c4      	cbz	r4, 80001b4 <osThreadCreate+0x3e>
 8000182:	6985      	ldr	r5, [r0, #24]
 8000184:	b1b5      	cbz	r5, 80001b4 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000186:	6847      	ldr	r7, [r0, #4]
 8000188:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800018c:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000190:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8000194:	f7ff ffe4 	bl	8000160 <makeFreeRtosPriority>
 8000198:	9502      	str	r5, [sp, #8]
 800019a:	9401      	str	r4, [sp, #4]
 800019c:	9000      	str	r0, [sp, #0]
 800019e:	4633      	mov	r3, r6
 80001a0:	464a      	mov	r2, r9
 80001a2:	4641      	mov	r1, r8
 80001a4:	4638      	mov	r0, r7
 80001a6:	f001 fd7f 	bl	8001ca8 <xTaskCreateStatic>
 80001aa:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80001ac:	9805      	ldr	r0, [sp, #20]
}
 80001ae:	b007      	add	sp, #28
 80001b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80001b4:	6844      	ldr	r4, [r0, #4]
 80001b6:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80001b8:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80001ba:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80001be:	f7ff ffcf 	bl	8000160 <makeFreeRtosPriority>
 80001c2:	ab05      	add	r3, sp, #20
 80001c4:	9301      	str	r3, [sp, #4]
 80001c6:	9000      	str	r0, [sp, #0]
 80001c8:	4633      	mov	r3, r6
 80001ca:	b2ba      	uxth	r2, r7
 80001cc:	4629      	mov	r1, r5
 80001ce:	4620      	mov	r0, r4
 80001d0:	f001 fda5 	bl	8001d1e <xTaskCreate>
 80001d4:	2801      	cmp	r0, #1
 80001d6:	d0e9      	beq.n	80001ac <osThreadCreate+0x36>
      return NULL;
 80001d8:	2000      	movs	r0, #0
 80001da:	e7e8      	b.n	80001ae <osThreadCreate+0x38>

080001dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80001dc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80001de:	b900      	cbnz	r0, 80001e2 <osDelay+0x6>
 80001e0:	2001      	movs	r0, #1
 80001e2:	f001 ff19 	bl	8002018 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80001e6:	2000      	movs	r0, #0
 80001e8:	bd08      	pop	{r3, pc}
	...

080001ec <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void const * argument)
{
 80001ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  while(1)
  {
    mPrint("Task1");
 80001ee:	4804      	ldr	r0, [pc, #16]	@ (8000200 <StartTask1+0x14>)
 80001f0:	f000 f9ec 	bl	80005cc <mPrint>
    osDelay(1000);
 80001f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001f8:	f7ff fff0 	bl	80001dc <osDelay>
  while(1)
 80001fc:	e7f7      	b.n	80001ee <StartTask1+0x2>
 80001fe:	bf00      	nop
 8000200:	08002bf4 	.word	0x08002bf4

08000204 <StartTask2>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartTask2(void const * argument)
{
 8000204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  while(1)
  {
    mPrint("Task2");
 8000206:	4804      	ldr	r0, [pc, #16]	@ (8000218 <StartTask2+0x14>)
 8000208:	f000 f9e0 	bl	80005cc <mPrint>
    osDelay(1000);
 800020c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000210:	f7ff ffe4 	bl	80001dc <osDelay>
  while(1)
 8000214:	e7f7      	b.n	8000206 <StartTask2+0x2>
 8000216:	bf00      	nop
 8000218:	08002bfc 	.word	0x08002bfc

0800021c <StartTask3>:
  }
  /* USER CODE END StartTask1 */
}
void StartTask3(void const * argument)
{
 800021c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  while(1)
  {
    mPrint("Task3 ");
 800021e:	4804      	ldr	r0, [pc, #16]	@ (8000230 <StartTask3+0x14>)
 8000220:	f000 f9d4 	bl	80005cc <mPrint>
    osDelay(1000);
 8000224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000228:	f7ff ffd8 	bl	80001dc <osDelay>
  while(1)
 800022c:	e7f7      	b.n	800021e <StartTask3+0x2>
 800022e:	bf00      	nop
 8000230:	08002c04 	.word	0x08002c04

08000234 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000234:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <vApplicationGetIdleTaskMemory+0x10>)
 8000236:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <vApplicationGetIdleTaskMemory+0x14>)
 800023a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800023c:	2380      	movs	r3, #128	@ 0x80
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	2000027c 	.word	0x2000027c
 8000248:	2000007c 	.word	0x2000007c

0800024c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	b097      	sub	sp, #92	@ 0x5c
  osThreadDef(Task1, StartTask1, osPriorityNormal, 0, 128);
 8000250:	4c1b      	ldr	r4, [pc, #108]	@ (80002c0 <MX_FREERTOS_Init+0x74>)
 8000252:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8000256:	46a6      	mov	lr, r4
 8000258:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800025c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000260:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000264:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000268:	2100      	movs	r1, #0
 800026a:	a80f      	add	r0, sp, #60	@ 0x3c
 800026c:	f7ff ff83 	bl	8000176 <osThreadCreate>
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <MX_FREERTOS_Init+0x78>)
 8000272:	6018      	str	r0, [r3, #0]
  osThreadDef(Task2, StartTask2, -1, 0, 128);
 8000274:	f10d 0c20 	add.w	ip, sp, #32
 8000278:	f104 0e1c 	add.w	lr, r4, #28
 800027c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000284:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000288:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 800028c:	2100      	movs	r1, #0
 800028e:	a808      	add	r0, sp, #32
 8000290:	f7ff ff71 	bl	8000176 <osThreadCreate>
 8000294:	4d0c      	ldr	r5, [pc, #48]	@ (80002c8 <MX_FREERTOS_Init+0x7c>)
 8000296:	6028      	str	r0, [r5, #0]
  osThreadDef(Task3, StartTask3, -2, 0, 128);
 8000298:	f10d 0e04 	add.w	lr, sp, #4
 800029c:	f104 0c38 	add.w	ip, r4, #56	@ 0x38
 80002a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80002a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80002a8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80002ac:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task3), NULL);
 80002b0:	2100      	movs	r1, #0
 80002b2:	a801      	add	r0, sp, #4
 80002b4:	f7ff ff5f 	bl	8000176 <osThreadCreate>
 80002b8:	6028      	str	r0, [r5, #0]
}
 80002ba:	b017      	add	sp, #92	@ 0x5c
 80002bc:	bd30      	pop	{r4, r5, pc}
 80002be:	bf00      	nop
 80002c0:	08002ba0 	.word	0x08002ba0
 80002c4:	200002d0 	.word	0x200002d0
 80002c8:	200002d4 	.word	0x200002d4

080002cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002cc:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ce:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_GPIO_Init+0x2c>)
 80002d0:	699a      	ldr	r2, [r3, #24]
 80002d2:	f042 0220 	orr.w	r2, r2, #32
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	699a      	ldr	r2, [r3, #24]
 80002da:	f002 0220 	and.w	r2, r2, #32
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e2:	699a      	ldr	r2, [r3, #24]
 80002e4:	f042 0204 	orr.w	r2, r2, #4
 80002e8:	619a      	str	r2, [r3, #24]
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	9b01      	ldr	r3, [sp, #4]

}
 80002f4:	b002      	add	sp, #8
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000

080002fc <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80002fc:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80002fe:	f012 0f07 	tst.w	r2, #7
 8000302:	d01e      	beq.n	8000342 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000304:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000306:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800030a:	f5c1 6340 	rsb	r3, r1, #3072	@ 0xc00
 800030e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000310:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000312:	480e      	ldr	r0, [pc, #56]	@ (800034c <prvHeapInit+0x50>)
 8000314:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000316:	2100      	movs	r1, #0
 8000318:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800031a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800031c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800031e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8000322:	480b      	ldr	r0, [pc, #44]	@ (8000350 <prvHeapInit+0x54>)
 8000324:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8000326:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000328:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800032a:	1a99      	subs	r1, r3, r2
 800032c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800032e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <prvHeapInit+0x58>)
 8000332:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <prvHeapInit+0x5c>)
 8000336:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <prvHeapInit+0x60>)
 800033a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000342:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000346:	e7e4      	b.n	8000312 <prvHeapInit+0x16>
 8000348:	200002f8 	.word	0x200002f8
 800034c:	200002f0 	.word	0x200002f0
 8000350:	200002ec 	.word	0x200002ec
 8000354:	200002e4 	.word	0x200002e4
 8000358:	200002e8 	.word	0x200002e8
 800035c:	200002d8 	.word	0x200002d8

08000360 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000360:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <prvInsertBlockIntoFreeList+0x58>)
 8000362:	461a      	mov	r2, r3
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4283      	cmp	r3, r0
 8000368:	d3fb      	bcc.n	8000362 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800036a:	6851      	ldr	r1, [r2, #4]
 800036c:	eb02 0c01 	add.w	ip, r2, r1
 8000370:	4584      	cmp	ip, r0
 8000372:	d009      	beq.n	8000388 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000374:	6841      	ldr	r1, [r0, #4]
 8000376:	eb00 0c01 	add.w	ip, r0, r1
 800037a:	4563      	cmp	r3, ip
 800037c:	d009      	beq.n	8000392 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800037e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000380:	4290      	cmp	r0, r2
 8000382:	d018      	beq.n	80003b6 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000384:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8000386:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000388:	6840      	ldr	r0, [r0, #4]
 800038a:	4401      	add	r1, r0
 800038c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800038e:	4610      	mov	r0, r2
 8000390:	e7f0      	b.n	8000374 <prvInsertBlockIntoFreeList+0x14>
{
 8000392:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000394:	4c09      	ldr	r4, [pc, #36]	@ (80003bc <prvInsertBlockIntoFreeList+0x5c>)
 8000396:	6824      	ldr	r4, [r4, #0]
 8000398:	42a3      	cmp	r3, r4
 800039a:	d00a      	beq.n	80003b2 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	4419      	add	r1, r3
 80003a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80003a2:	6813      	ldr	r3, [r2, #0]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d000      	beq.n	80003ae <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80003ac:	6010      	str	r0, [r2, #0]
	}
}
 80003ae:	bc10      	pop	{r4}
 80003b0:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80003b2:	6004      	str	r4, [r0, #0]
 80003b4:	e7f8      	b.n	80003a8 <prvInsertBlockIntoFreeList+0x48>
 80003b6:	4770      	bx	lr
 80003b8:	200002f0 	.word	0x200002f0
 80003bc:	200002ec 	.word	0x200002ec

080003c0 <pvPortMalloc>:
{
 80003c0:	b538      	push	{r3, r4, r5, lr}
 80003c2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80003c4:	f001 fd18 	bl	8001df8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80003c8:	4b38      	ldr	r3, [pc, #224]	@ (80004ac <pvPortMalloc+0xec>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	b1b3      	cbz	r3, 80003fc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80003ce:	4b38      	ldr	r3, [pc, #224]	@ (80004b0 <pvPortMalloc+0xf0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	421c      	tst	r4, r3
 80003d4:	d150      	bne.n	8000478 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 80003d6:	2c00      	cmp	r4, #0
 80003d8:	d050      	beq.n	800047c <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 80003da:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80003de:	f014 0f07 	tst.w	r4, #7
 80003e2:	d002      	beq.n	80003ea <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80003e4:	f022 0207 	bic.w	r2, r2, #7
 80003e8:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d055      	beq.n	800049a <pvPortMalloc+0xda>
 80003ee:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <pvPortMalloc+0xf4>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d353      	bcc.n	800049e <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 80003f6:	4930      	ldr	r1, [pc, #192]	@ (80004b8 <pvPortMalloc+0xf8>)
 80003f8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80003fa:	e004      	b.n	8000406 <pvPortMalloc+0x46>
			prvHeapInit();
 80003fc:	f7ff ff7e 	bl	80002fc <prvHeapInit>
 8000400:	e7e5      	b.n	80003ce <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8000402:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8000404:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000406:	6863      	ldr	r3, [r4, #4]
 8000408:	4293      	cmp	r3, r2
 800040a:	d202      	bcs.n	8000412 <pvPortMalloc+0x52>
 800040c:	6823      	ldr	r3, [r4, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f7      	bne.n	8000402 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <pvPortMalloc+0xec>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	42a3      	cmp	r3, r4
 8000418:	d043      	beq.n	80004a2 <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800041a:	680d      	ldr	r5, [r1, #0]
 800041c:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800041e:	6823      	ldr	r3, [r4, #0]
 8000420:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000422:	6863      	ldr	r3, [r4, #4]
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2b10      	cmp	r3, #16
 8000428:	d910      	bls.n	800044c <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800042a:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800042c:	f010 0f07 	tst.w	r0, #7
 8000430:	d008      	beq.n	8000444 <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000436:	f383 8811 	msr	BASEPRI, r3
 800043a:	f3bf 8f6f 	isb	sy
 800043e:	f3bf 8f4f 	dsb	sy
 8000442:	e7fe      	b.n	8000442 <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000444:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000446:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000448:	f7ff ff8a 	bl	8000360 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800044c:	6862      	ldr	r2, [r4, #4]
 800044e:	4919      	ldr	r1, [pc, #100]	@ (80004b4 <pvPortMalloc+0xf4>)
 8000450:	680b      	ldr	r3, [r1, #0]
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000456:	4919      	ldr	r1, [pc, #100]	@ (80004bc <pvPortMalloc+0xfc>)
 8000458:	6809      	ldr	r1, [r1, #0]
 800045a:	428b      	cmp	r3, r1
 800045c:	d201      	bcs.n	8000462 <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800045e:	4917      	ldr	r1, [pc, #92]	@ (80004bc <pvPortMalloc+0xfc>)
 8000460:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <pvPortMalloc+0xf0>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4313      	orrs	r3, r2
 8000468:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800046a:	2300      	movs	r3, #0
 800046c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800046e:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <pvPortMalloc+0x100>)
 8000470:	6813      	ldr	r3, [r2, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	e002      	b.n	800047e <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8000478:	2500      	movs	r5, #0
 800047a:	e000      	b.n	800047e <pvPortMalloc+0xbe>
 800047c:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800047e:	f001 fd4f 	bl	8001f20 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000482:	f015 0f07 	tst.w	r5, #7
 8000486:	d00e      	beq.n	80004a6 <pvPortMalloc+0xe6>
 8000488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800048c:	f383 8811 	msr	BASEPRI, r3
 8000490:	f3bf 8f6f 	isb	sy
 8000494:	f3bf 8f4f 	dsb	sy
 8000498:	e7fe      	b.n	8000498 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 800049a:	2500      	movs	r5, #0
 800049c:	e7ef      	b.n	800047e <pvPortMalloc+0xbe>
 800049e:	2500      	movs	r5, #0
 80004a0:	e7ed      	b.n	800047e <pvPortMalloc+0xbe>
 80004a2:	2500      	movs	r5, #0
 80004a4:	e7eb      	b.n	800047e <pvPortMalloc+0xbe>
}
 80004a6:	4628      	mov	r0, r5
 80004a8:	bd38      	pop	{r3, r4, r5, pc}
 80004aa:	bf00      	nop
 80004ac:	200002ec 	.word	0x200002ec
 80004b0:	200002d8 	.word	0x200002d8
 80004b4:	200002e8 	.word	0x200002e8
 80004b8:	200002f0 	.word	0x200002f0
 80004bc:	200002e4 	.word	0x200002e4
 80004c0:	200002e0 	.word	0x200002e0

080004c4 <vPortFree>:
	if( pv != NULL )
 80004c4:	2800      	cmp	r0, #0
 80004c6:	d034      	beq.n	8000532 <vPortFree+0x6e>
{
 80004c8:	b538      	push	{r3, r4, r5, lr}
 80004ca:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80004cc:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80004d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80004d4:	4a17      	ldr	r2, [pc, #92]	@ (8000534 <vPortFree+0x70>)
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	4213      	tst	r3, r2
 80004da:	d108      	bne.n	80004ee <vPortFree+0x2a>
 80004dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004e0:	f383 8811 	msr	BASEPRI, r3
 80004e4:	f3bf 8f6f 	isb	sy
 80004e8:	f3bf 8f4f 	dsb	sy
 80004ec:	e7fe      	b.n	80004ec <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80004ee:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80004f2:	b141      	cbz	r1, 8000506 <vPortFree+0x42>
 80004f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004f8:	f383 8811 	msr	BASEPRI, r3
 80004fc:	f3bf 8f6f 	isb	sy
 8000500:	f3bf 8f4f 	dsb	sy
 8000504:	e7fe      	b.n	8000504 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000506:	ea23 0302 	bic.w	r3, r3, r2
 800050a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800050e:	f001 fc73 	bl	8001df8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000512:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <vPortFree+0x74>)
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	440b      	add	r3, r1
 800051c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800051e:	4628      	mov	r0, r5
 8000520:	f7ff ff1e 	bl	8000360 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <vPortFree+0x78>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800052c:	f001 fcf8 	bl	8001f20 <xTaskResumeAll>
}
 8000530:	bd38      	pop	{r3, r4, r5, pc}
 8000532:	4770      	bx	lr
 8000534:	200002d8 	.word	0x200002d8
 8000538:	200002e8 	.word	0x200002e8
 800053c:	200002dc 	.word	0x200002dc

08000540 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000540:	f100 0308 	add.w	r3, r0, #8
 8000544:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000546:	f04f 32ff 	mov.w	r2, #4294967295
 800054a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800054c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800054e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000550:	2300      	movs	r3, #0
 8000552:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000554:	4770      	bx	lr

08000556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000556:	2300      	movs	r3, #0
 8000558:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800055a:	4770      	bx	lr

0800055c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800055c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800055e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000564:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000566:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000568:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800056a:	6803      	ldr	r3, [r0, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	6003      	str	r3, [r0, #0]
}
 8000570:	4770      	bx	lr

08000572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000572:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000574:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000576:	f1b5 3fff 	cmp.w	r5, #4294967295
 800057a:	d011      	beq.n	80005a0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800057c:	f100 0308 	add.w	r3, r0, #8
 8000580:	461c      	mov	r4, r3
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	42aa      	cmp	r2, r5
 8000588:	d9fa      	bls.n	8000580 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800058a:	6863      	ldr	r3, [r4, #4]
 800058c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800058e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000590:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000592:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000594:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8000596:	6803      	ldr	r3, [r0, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	6003      	str	r3, [r0, #0]
}
 800059c:	bc30      	pop	{r4, r5}
 800059e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80005a0:	6904      	ldr	r4, [r0, #16]
 80005a2:	e7f2      	b.n	800058a <vListInsert+0x18>

080005a4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80005a4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005a6:	6841      	ldr	r1, [r0, #4]
 80005a8:	6882      	ldr	r2, [r0, #8]
 80005aa:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005ac:	6841      	ldr	r1, [r0, #4]
 80005ae:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	4282      	cmp	r2, r0
 80005b4:	d006      	beq.n	80005c4 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80005b6:	2200      	movs	r2, #0
 80005b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	3a01      	subs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80005c0:	6818      	ldr	r0, [r3, #0]
}
 80005c2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005c4:	6882      	ldr	r2, [r0, #8]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	e7f5      	b.n	80005b6 <uxListRemove+0x12>
	...

080005cc <mPrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
  void mPrint(const char *format, ...) {
 80005cc:	b40f      	push	{r0, r1, r2, r3}
 80005ce:	b500      	push	{lr}
 80005d0:	b08d      	sub	sp, #52	@ 0x34
 80005d2:	ab0e      	add	r3, sp, #56	@ 0x38
 80005d4:	f853 2b04 	ldr.w	r2, [r3], #4
      char buffer[40]; 
      va_list args;    
      va_start(args, format);  
 80005d8:	9301      	str	r3, [sp, #4]
      vsnprintf(buffer, sizeof(buffer), format, args);
 80005da:	2128      	movs	r1, #40	@ 0x28
 80005dc:	a802      	add	r0, sp, #8
 80005de:	f001 fe37 	bl	8002250 <vsniprintf>
      va_end(args); 
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000); 
 80005e2:	a802      	add	r0, sp, #8
 80005e4:	f7ff fdb4 	bl	8000150 <strlen>
 80005e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ec:	b282      	uxth	r2, r0
 80005ee:	a902      	add	r1, sp, #8
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <mPrint+0x34>)
 80005f2:	f001 f930 	bl	8001856 <HAL_UART_Transmit>
  }
 80005f6:	b00d      	add	sp, #52	@ 0x34
 80005f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr
 8000600:	2000107c 	.word	0x2000107c

08000604 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000604:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000606:	6802      	ldr	r2, [r0, #0]
 8000608:	4b03      	ldr	r3, [pc, #12]	@ (8000618 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800060a:	429a      	cmp	r2, r3
 800060c:	d000      	beq.n	8000610 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800060e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000610:	f000 f99c 	bl	800094c <HAL_IncTick>
}
 8000614:	e7fb      	b.n	800060e <HAL_TIM_PeriodElapsedCallback+0xa>
 8000616:	bf00      	nop
 8000618:	40000800 	.word	0x40000800

0800061c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061e:	e7fe      	b.n	800061e <Error_Handler+0x2>

08000620 <SystemClock_Config>:
{
 8000620:	b500      	push	{lr}
 8000622:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000624:	2228      	movs	r2, #40	@ 0x28
 8000626:	2100      	movs	r1, #0
 8000628:	a806      	add	r0, sp, #24
 800062a:	f001 fe1f 	bl	800226c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062e:	2300      	movs	r3, #0
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	9303      	str	r3, [sp, #12]
 8000636:	9304      	str	r3, [sp, #16]
 8000638:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2201      	movs	r2, #1
 8000640:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2210      	movs	r2, #16
 8000644:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	a806      	add	r0, sp, #24
 800064a:	f000 fb43 	bl	8000cd4 <HAL_RCC_OscConfig>
 800064e:	b970      	cbnz	r0, 800066e <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2100      	movs	r1, #0
 800065a:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	a801      	add	r0, sp, #4
 8000662:	f000 fd69 	bl	8001138 <HAL_RCC_ClockConfig>
 8000666:	b920      	cbnz	r0, 8000672 <SystemClock_Config+0x52>
}
 8000668:	b011      	add	sp, #68	@ 0x44
 800066a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800066e:	f7ff ffd5 	bl	800061c <Error_Handler>
    Error_Handler();
 8000672:	f7ff ffd3 	bl	800061c <Error_Handler>
	...

08000678 <main>:
{
 8000678:	b508      	push	{r3, lr}
  HAL_Init();
 800067a:	f000 f955 	bl	8000928 <HAL_Init>
  SystemClock_Config();
 800067e:	f7ff ffcf 	bl	8000620 <SystemClock_Config>
  MX_GPIO_Init();
 8000682:	f7ff fe23 	bl	80002cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000686:	f001 fd39 	bl	80020fc <MX_USART1_UART_Init>
  MX_FREERTOS_Init();
 800068a:	f7ff fddf 	bl	800024c <MX_FREERTOS_Init>
  osKernelStart();
 800068e:	f7ff fd6d 	bl	800016c <osKernelStart>
     mPrint("Phan dat %d", 32);
 8000692:	2120      	movs	r1, #32
 8000694:	4801      	ldr	r0, [pc, #4]	@ (800069c <main+0x24>)
 8000696:	f7ff ff99 	bl	80005cc <mPrint>
  while (1)
 800069a:	e7fa      	b.n	8000692 <main+0x1a>
 800069c:	08002c14 	.word	0x08002c14

080006a0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80006a0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <prvTaskExitError+0x3c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ae:	d008      	beq.n	80006c2 <prvTaskExitError+0x22>
 80006b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006b4:	f383 8811 	msr	BASEPRI, r3
 80006b8:	f3bf 8f6f 	isb	sy
 80006bc:	f3bf 8f4f 	dsb	sy
 80006c0:	e7fe      	b.n	80006c0 <prvTaskExitError+0x20>
 80006c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80006d2:	9b01      	ldr	r3, [sp, #4]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0fc      	beq.n	80006d2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80006d8:	b002      	add	sp, #8
 80006da:	4770      	bx	lr
 80006dc:	20000000 	.word	0x20000000

080006e0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80006e0:	4806      	ldr	r0, [pc, #24]	@ (80006fc <prvPortStartFirstTask+0x1c>)
 80006e2:	6800      	ldr	r0, [r0, #0]
 80006e4:	6800      	ldr	r0, [r0, #0]
 80006e6:	f380 8808 	msr	MSP, r0
 80006ea:	b662      	cpsie	i
 80006ec:	b661      	cpsie	f
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	df00      	svc	0
 80006f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80006fa:	0000      	.short	0x0000
 80006fc:	e000ed08 	.word	0xe000ed08

08000700 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000700:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000704:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000708:	f021 0101 	bic.w	r1, r1, #1
 800070c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000710:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <pxPortInitialiseStack+0x20>)
 8000712:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000716:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800071a:	3840      	subs	r0, #64	@ 0x40
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	080006a1 	.word	0x080006a1
	...

08000730 <SVC_Handler>:
	__asm volatile (
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <pxCurrentTCBConst2>)
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	6808      	ldr	r0, [r1, #0]
 8000736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800073a:	f380 8809 	msr	PSP, r0
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	f380 8811 	msr	BASEPRI, r0
 800074a:	f04e 0e0d 	orr.w	lr, lr, #13
 800074e:	4770      	bx	lr

08000750 <pxCurrentTCBConst2>:
 8000750:	20001078 	.word	0x20001078

08000754 <vPortEnterCritical>:
 8000754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000764:	4a0b      	ldr	r2, [pc, #44]	@ (8000794 <vPortEnterCritical+0x40>)
 8000766:	6813      	ldr	r3, [r2, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800076c:	2b01      	cmp	r3, #1
 800076e:	d000      	beq.n	8000772 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000770:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000772:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000776:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800077a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800077e:	d0f7      	beq.n	8000770 <vPortEnterCritical+0x1c>
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	e7fe      	b.n	8000790 <vPortEnterCritical+0x3c>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <vPortExitCritical+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b943      	cbnz	r3, 80007b0 <vPortExitCritical+0x18>
 800079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	e7fe      	b.n	80007ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80007b0:	3b01      	subs	r3, #1
 80007b2:	4a03      	ldr	r2, [pc, #12]	@ (80007c0 <vPortExitCritical+0x28>)
 80007b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80007b6:	b90b      	cbnz	r3, 80007bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80007b8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
	...

080007d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80007d0:	f3ef 8009 	mrs	r0, PSP
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <pxCurrentTCBConst>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007e0:	6010      	str	r0, [r2, #0]
 80007e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80007e6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80007ea:	f380 8811 	msr	BASEPRI, r0
 80007ee:	f001 fc39 	bl	8002064 <vTaskSwitchContext>
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	f380 8811 	msr	BASEPRI, r0
 80007fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007fe:	6819      	ldr	r1, [r3, #0]
 8000800:	6808      	ldr	r0, [r1, #0]
 8000802:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000806:	f380 8809 	msr	PSP, r0
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	4770      	bx	lr

08000810 <pxCurrentTCBConst>:
 8000810:	20001078 	.word	0x20001078

08000814 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000814:	b508      	push	{r3, lr}
	__asm volatile
 8000816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800081a:	f383 8811 	msr	BASEPRI, r3
 800081e:	f3bf 8f6f 	isb	sy
 8000822:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000826:	f001 faef 	bl	8001e08 <xTaskIncrementTick>
 800082a:	b128      	cbz	r0, 8000838 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800082c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000834:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8000838:	2300      	movs	r3, #0
 800083a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800083e:	bd08      	pop	{r3, pc}

08000840 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000840:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8000844:	2300      	movs	r3, #0
 8000846:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000848:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <vPortSetupTimerInterrupt+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4905      	ldr	r1, [pc, #20]	@ (8000864 <vPortSetupTimerInterrupt+0x24>)
 8000850:	fba1 1303 	umull	r1, r3, r1, r3
 8000854:	099b      	lsrs	r3, r3, #6
 8000856:	3b01      	subs	r3, #1
 8000858:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800085a:	2307      	movs	r3, #7
 800085c:	6113      	str	r3, [r2, #16]
}
 800085e:	4770      	bx	lr
 8000860:	2000000c 	.word	0x2000000c
 8000864:	10624dd3 	.word	0x10624dd3

08000868 <xPortStartScheduler>:
{
 8000868:	b510      	push	{r4, lr}
 800086a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800086c:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <xPortStartScheduler+0xb0>)
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000874:	22ff      	movs	r2, #255	@ 0xff
 8000876:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000880:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000884:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000888:	4a24      	ldr	r2, [pc, #144]	@ (800091c <xPortStartScheduler+0xb4>)
 800088a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800088c:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <xPortStartScheduler+0xb8>)
 800088e:	2207      	movs	r2, #7
 8000890:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000892:	e009      	b.n	80008a8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8000894:	4a22      	ldr	r2, [pc, #136]	@ (8000920 <xPortStartScheduler+0xb8>)
 8000896:	6813      	ldr	r3, [r2, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800089c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80008a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80008ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80008b0:	d1f0      	bne.n	8000894 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <xPortStartScheduler+0xb8>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d008      	beq.n	80008cc <xPortStartScheduler+0x64>
	__asm volatile
 80008ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	e7fe      	b.n	80008ca <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <xPortStartScheduler+0xb8>)
 80008d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80008d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80008d6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80008d8:	9b01      	ldr	r3, [sp, #4]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <xPortStartScheduler+0xb0>)
 80008de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80008e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80008e4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80008e8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80008ec:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80008f0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80008f4:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 80008f8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80008fc:	f7ff ffa0 	bl	8000840 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8000900:	2400      	movs	r4, #0
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <xPortStartScheduler+0xbc>)
 8000904:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8000906:	f7ff feeb 	bl	80006e0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800090a:	f001 fbab 	bl	8002064 <vTaskSwitchContext>
	prvTaskExitError();
 800090e:	f7ff fec7 	bl	80006a0 <prvTaskExitError>
}
 8000912:	4620      	mov	r0, r4
 8000914:	b002      	add	sp, #8
 8000916:	bd10      	pop	{r4, pc}
 8000918:	e000e400 	.word	0xe000e400
 800091c:	20000efc 	.word	0x20000efc
 8000920:	20000ef8 	.word	0x20000ef8
 8000924:	20000000 	.word	0x20000000

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092a:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <HAL_Init+0x20>)
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f84f 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 fe50 	bl	80015e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f000 f988 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000944:	2000      	movs	r0, #0
 8000946:	bd08      	pop	{r3, pc}
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800094c:	4a03      	ldr	r2, [pc, #12]	@ (800095c <HAL_IncTick+0x10>)
 800094e:	6811      	ldr	r1, [r2, #0]
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <HAL_IncTick+0x14>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	440b      	add	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000f00 	.word	0x20000f00
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000964:	4b01      	ldr	r3, [pc, #4]	@ (800096c <HAL_GetTick+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000f00 	.word	0x20000f00

08000970 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000970:	2800      	cmp	r0, #0
 8000972:	db08      	blt.n	8000986 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000974:	0109      	lsls	r1, r1, #4
 8000976:	b2c9      	uxtb	r1, r1
 8000978:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800097c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000980:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000984:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	f000 000f 	and.w	r0, r0, #15
 800098a:	0109      	lsls	r1, r1, #4
 800098c:	b2c9      	uxtb	r1, r1
 800098e:	4b01      	ldr	r3, [pc, #4]	@ (8000994 <__NVIC_SetPriority+0x24>)
 8000990:	5419      	strb	r1, [r3, r0]
  }
}
 8000992:	4770      	bx	lr
 8000994:	e000ed14 	.word	0xe000ed14

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099e:	f1c0 0c07 	rsb	ip, r0, #7
 80009a2:	f1bc 0f04 	cmp.w	ip, #4
 80009a6:	bf28      	it	cs
 80009a8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ac:	1d03      	adds	r3, r0, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d90f      	bls.n	80009d2 <NVIC_EncodePriority+0x3a>
 80009b2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	f04f 3eff 	mov.w	lr, #4294967295
 80009b8:	fa0e f00c 	lsl.w	r0, lr, ip
 80009bc:	ea21 0100 	bic.w	r1, r1, r0
 80009c0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c2:	fa0e fe03 	lsl.w	lr, lr, r3
 80009c6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80009ca:	ea41 0002 	orr.w	r0, r1, r2
 80009ce:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	2300      	movs	r3, #0
 80009d4:	e7ee      	b.n	80009b4 <NVIC_EncodePriority+0x1c>
	...

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80009e0:	041b      	lsls	r3, r3, #16
 80009e2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e4:	0200      	lsls	r0, r0, #8
 80009e6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80009f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_NVIC_SetPriority+0x1c>)
 8000a02:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a04:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000a08:	f7ff ffc6 	bl	8000998 <NVIC_EncodePriority>
 8000a0c:	4601      	mov	r1, r0
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f7ff ffae 	bl	8000970 <__NVIC_SetPriority>
}
 8000a14:	bd10      	pop	{r4, pc}
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	db07      	blt.n	8000a30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a20:	f000 021f 	and.w	r2, r0, #31
 8000a24:	0940      	lsrs	r0, r0, #5
 8000a26:	2301      	movs	r3, #1
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	4a02      	ldr	r2, [pc, #8]	@ (8000a34 <HAL_NVIC_EnableIRQ+0x18>)
 8000a2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a3c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000a3e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a40:	e0a1      	b.n	8000b86 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a42:	4d7e      	ldr	r5, [pc, #504]	@ (8000c3c <HAL_GPIO_Init+0x204>)
 8000a44:	42ab      	cmp	r3, r5
 8000a46:	d014      	beq.n	8000a72 <HAL_GPIO_Init+0x3a>
 8000a48:	d80c      	bhi.n	8000a64 <HAL_GPIO_Init+0x2c>
 8000a4a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000a4e:	42ab      	cmp	r3, r5
 8000a50:	d00f      	beq.n	8000a72 <HAL_GPIO_Init+0x3a>
 8000a52:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8000a56:	42ab      	cmp	r3, r5
 8000a58:	d00b      	beq.n	8000a72 <HAL_GPIO_Init+0x3a>
 8000a5a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8000a5e:	42ab      	cmp	r3, r5
 8000a60:	d110      	bne.n	8000a84 <HAL_GPIO_Init+0x4c>
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x3a>
 8000a64:	4d76      	ldr	r5, [pc, #472]	@ (8000c40 <HAL_GPIO_Init+0x208>)
 8000a66:	42ab      	cmp	r3, r5
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x3a>
 8000a6a:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8000a6e:	42ab      	cmp	r3, r5
 8000a70:	d108      	bne.n	8000a84 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a72:	688b      	ldr	r3, [r1, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d050      	beq.n	8000b1a <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d049      	beq.n	8000b10 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000a7c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7e:	2408      	movs	r4, #8
 8000a80:	e000      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a82:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a84:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000a88:	d849      	bhi.n	8000b1e <HAL_GPIO_Init+0xe6>
 8000a8a:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a8c:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a90:	6833      	ldr	r3, [r6, #0]
 8000a92:	250f      	movs	r5, #15
 8000a94:	4095      	lsls	r5, r2
 8000a96:	ea23 0305 	bic.w	r3, r3, r5
 8000a9a:	fa04 f202 	lsl.w	r2, r4, r2
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa2:	684b      	ldr	r3, [r1, #4]
 8000aa4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000aa8:	d06b      	beq.n	8000b82 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aaa:	4b66      	ldr	r3, [pc, #408]	@ (8000c44 <HAL_GPIO_Init+0x20c>)
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f042 0201 	orr.w	r2, r2, #1
 8000ab2:	619a      	str	r2, [r3, #24]
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000abe:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000ac2:	1c95      	adds	r5, r2, #2
 8000ac4:	4b60      	ldr	r3, [pc, #384]	@ (8000c48 <HAL_GPIO_Init+0x210>)
 8000ac6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aca:	f00c 0503 	and.w	r5, ip, #3
 8000ace:	00ad      	lsls	r5, r5, #2
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	40ab      	lsls	r3, r5
 8000ad4:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8000c4c <HAL_GPIO_Init+0x214>)
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d026      	beq.n	8000b2c <HAL_GPIO_Init+0xf4>
 8000ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	f000 808c 	beq.w	8000c00 <HAL_GPIO_Init+0x1c8>
 8000ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000aec:	4298      	cmp	r0, r3
 8000aee:	f000 8089 	beq.w	8000c04 <HAL_GPIO_Init+0x1cc>
 8000af2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000af6:	4298      	cmp	r0, r3
 8000af8:	d016      	beq.n	8000b28 <HAL_GPIO_Init+0xf0>
 8000afa:	2304      	movs	r3, #4
 8000afc:	e017      	b.n	8000b2e <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000afe:	68cc      	ldr	r4, [r1, #12]
 8000b00:	3404      	adds	r4, #4
          break;
 8000b02:	e7bf      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b04:	68cc      	ldr	r4, [r1, #12]
 8000b06:	3408      	adds	r4, #8
          break;
 8000b08:	e7bc      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b0a:	68cc      	ldr	r4, [r1, #12]
 8000b0c:	340c      	adds	r4, #12
          break;
 8000b0e:	e7b9      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8000b10:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b12:	2408      	movs	r4, #8
 8000b14:	e7b6      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b16:	2400      	movs	r4, #0
 8000b18:	e7b4      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b1a:	2404      	movs	r4, #4
 8000b1c:	e7b2      	b.n	8000a84 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1e:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	f1ac 0208 	sub.w	r2, ip, #8
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	e7b3      	b.n	8000a90 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <HAL_GPIO_Init+0xf6>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	40ab      	lsls	r3, r5
 8000b30:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000b32:	3202      	adds	r2, #2
 8000b34:	4d44      	ldr	r5, [pc, #272]	@ (8000c48 <HAL_GPIO_Init+0x210>)
 8000b36:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	684b      	ldr	r3, [r1, #4]
 8000b3c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000b40:	d062      	beq.n	8000c08 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b42:	4a43      	ldr	r2, [pc, #268]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000b44:	6893      	ldr	r3, [r2, #8]
 8000b46:	ea43 030e 	orr.w	r3, r3, lr
 8000b4a:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4c:	684b      	ldr	r3, [r1, #4]
 8000b4e:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000b52:	d05f      	beq.n	8000c14 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b54:	4a3e      	ldr	r2, [pc, #248]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000b56:	68d3      	ldr	r3, [r2, #12]
 8000b58:	ea43 030e 	orr.w	r3, r3, lr
 8000b5c:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b5e:	684b      	ldr	r3, [r1, #4]
 8000b60:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b64:	d05c      	beq.n	8000c20 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b66:	4a3a      	ldr	r2, [pc, #232]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000b68:	6853      	ldr	r3, [r2, #4]
 8000b6a:	ea43 030e 	orr.w	r3, r3, lr
 8000b6e:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b70:	684b      	ldr	r3, [r1, #4]
 8000b72:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000b76:	d059      	beq.n	8000c2c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b78:	4a35      	ldr	r2, [pc, #212]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	ea43 030e 	orr.w	r3, r3, lr
 8000b80:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000b82:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	680b      	ldr	r3, [r1, #0]
 8000b88:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000b8c:	d054      	beq.n	8000c38 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b94:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000b98:	ea32 0303 	bics.w	r3, r2, r3
 8000b9c:	d1f1      	bne.n	8000b82 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 8000b9e:	684b      	ldr	r3, [r1, #4]
 8000ba0:	2b12      	cmp	r3, #18
 8000ba2:	f63f af4e 	bhi.w	8000a42 <HAL_GPIO_Init+0xa>
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	f63f af6c 	bhi.w	8000a84 <HAL_GPIO_Init+0x4c>
 8000bac:	a501      	add	r5, pc, #4	@ (adr r5, 8000bb4 <HAL_GPIO_Init+0x17c>)
 8000bae:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000bb2:	bf00      	nop
 8000bb4:	08000a73 	.word	0x08000a73
 8000bb8:	08000a83 	.word	0x08000a83
 8000bbc:	08000b05 	.word	0x08000b05
 8000bc0:	08000b17 	.word	0x08000b17
 8000bc4:	08000a85 	.word	0x08000a85
 8000bc8:	08000a85 	.word	0x08000a85
 8000bcc:	08000a85 	.word	0x08000a85
 8000bd0:	08000a85 	.word	0x08000a85
 8000bd4:	08000a85 	.word	0x08000a85
 8000bd8:	08000a85 	.word	0x08000a85
 8000bdc:	08000a85 	.word	0x08000a85
 8000be0:	08000a85 	.word	0x08000a85
 8000be4:	08000a85 	.word	0x08000a85
 8000be8:	08000a85 	.word	0x08000a85
 8000bec:	08000a85 	.word	0x08000a85
 8000bf0:	08000a85 	.word	0x08000a85
 8000bf4:	08000a85 	.word	0x08000a85
 8000bf8:	08000aff 	.word	0x08000aff
 8000bfc:	08000b0b 	.word	0x08000b0b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c00:	2301      	movs	r3, #1
 8000c02:	e794      	b.n	8000b2e <HAL_GPIO_Init+0xf6>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e792      	b.n	8000b2e <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c08:	4a11      	ldr	r2, [pc, #68]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000c0a:	6893      	ldr	r3, [r2, #8]
 8000c0c:	ea23 030e 	bic.w	r3, r3, lr
 8000c10:	6093      	str	r3, [r2, #8]
 8000c12:	e79b      	b.n	8000b4c <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000c16:	68d3      	ldr	r3, [r2, #12]
 8000c18:	ea23 030e 	bic.w	r3, r3, lr
 8000c1c:	60d3      	str	r3, [r2, #12]
 8000c1e:	e79e      	b.n	8000b5e <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000c22:	6853      	ldr	r3, [r2, #4]
 8000c24:	ea23 030e 	bic.w	r3, r3, lr
 8000c28:	6053      	str	r3, [r2, #4]
 8000c2a:	e7a1      	b.n	8000b70 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_GPIO_Init+0x218>)
 8000c2e:	6813      	ldr	r3, [r2, #0]
 8000c30:	ea23 030e 	bic.w	r3, r3, lr
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e7a4      	b.n	8000b82 <HAL_GPIO_Init+0x14a>
  }
}
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	10220000 	.word	0x10220000
 8000c40:	10310000 	.word	0x10310000
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b500      	push	{lr}
 8000c56:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_MspInit+0x4c>)
 8000c5a:	699a      	ldr	r2, [r3, #24]
 8000c5c:	f042 0201 	orr.w	r2, r2, #1
 8000c60:	619a      	str	r2, [r3, #24]
 8000c62:	699a      	ldr	r2, [r3, #24]
 8000c64:	f002 0201 	and.w	r2, r2, #1
 8000c68:	9200      	str	r2, [sp, #0]
 8000c6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	69da      	ldr	r2, [r3, #28]
 8000c6e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c72:	61da      	str	r2, [r3, #28]
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	f06f 0001 	mvn.w	r0, #1
 8000c86:	f7ff feb9 	bl	80009fc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x50>)
 8000c8c:	6853      	ldr	r3, [r2, #4]
 8000c8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c96:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c98:	b003      	add	sp, #12
 8000c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ca8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <RCC_Delay+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <RCC_Delay+0x28>)
 8000cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	fb00 f303 	mul.w	r3, r0, r3
 8000cba:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000cbc:	bf00      	nop
  }
  while (Delay --);
 8000cbe:	9b01      	ldr	r3, [sp, #4]
 8000cc0:	1e5a      	subs	r2, r3, #1
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f9      	bne.n	8000cbc <RCC_Delay+0x14>
}
 8000cc8:	b002      	add	sp, #8
 8000cca:	4770      	bx	lr
 8000ccc:	2000000c 	.word	0x2000000c
 8000cd0:	10624dd3 	.word	0x10624dd3

08000cd4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	f000 81f1 	beq.w	80010bc <HAL_RCC_OscConfig+0x3e8>
{
 8000cda:	b570      	push	{r4, r5, r6, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce0:	6803      	ldr	r3, [r0, #0]
 8000ce2:	f013 0f01 	tst.w	r3, #1
 8000ce6:	d02c      	beq.n	8000d42 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce8:	4b99      	ldr	r3, [pc, #612]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d01d      	beq.n	8000d30 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf4:	4b96      	ldr	r3, [pc, #600]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 030c 	and.w	r3, r3, #12
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d012      	beq.n	8000d26 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d06:	d041      	beq.n	8000d8c <HAL_RCC_OscConfig+0xb8>
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d155      	bne.n	8000db8 <HAL_RCC_OscConfig+0xe4>
 8000d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d10:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	e037      	b.n	8000d96 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d26:	4b8a      	ldr	r3, [pc, #552]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000d2e:	d0e7      	beq.n	8000d00 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	4b87      	ldr	r3, [pc, #540]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d38:	d003      	beq.n	8000d42 <HAL_RCC_OscConfig+0x6e>
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 81bf 	beq.w	80010c0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	f013 0f02 	tst.w	r3, #2
 8000d48:	d075      	beq.n	8000e36 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4a:	4b81      	ldr	r3, [pc, #516]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f013 0f0c 	tst.w	r3, #12
 8000d52:	d05f      	beq.n	8000e14 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d54:	4b7e      	ldr	r3, [pc, #504]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 030c 	and.w	r3, r3, #12
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d054      	beq.n	8000e0a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d60:	6923      	ldr	r3, [r4, #16]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 808a 	beq.w	8000e7c <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000d68:	4b7a      	ldr	r3, [pc, #488]	@ (8000f54 <HAL_RCC_OscConfig+0x280>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6e:	f7ff fdf9 	bl	8000964 <HAL_GetTick>
 8000d72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b76      	ldr	r3, [pc, #472]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f013 0f02 	tst.w	r3, #2
 8000d7c:	d175      	bne.n	8000e6a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fdf1 	bl	8000964 <HAL_GetTick>
 8000d82:	1b40      	subs	r0, r0, r5
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d9f5      	bls.n	8000d74 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000d88:	2003      	movs	r0, #3
 8000d8a:	e19e      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d8c:	4a70      	ldr	r2, [pc, #448]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d96:	6863      	ldr	r3, [r4, #4]
 8000d98:	b343      	cbz	r3, 8000dec <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fde3 	bl	8000964 <HAL_GetTick>
 8000d9e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000da8:	d1cb      	bne.n	8000d42 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fddb 	bl	8000964 <HAL_GetTick>
 8000dae:	1b40      	subs	r0, r0, r5
 8000db0:	2864      	cmp	r0, #100	@ 0x64
 8000db2:	d9f5      	bls.n	8000da0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000db4:	2003      	movs	r0, #3
 8000db6:	e188      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dbc:	d009      	beq.n	8000dd2 <HAL_RCC_OscConfig+0xfe>
 8000dbe:	4b64      	ldr	r3, [pc, #400]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e7e1      	b.n	8000d96 <HAL_RCC_OscConfig+0xc2>
 8000dd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000dd6:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e7d4      	b.n	8000d96 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000dec:	f7ff fdba 	bl	8000964 <HAL_GetTick>
 8000df0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000dfa:	d0a2      	beq.n	8000d42 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fdb2 	bl	8000964 <HAL_GetTick>
 8000e00:	1b40      	subs	r0, r0, r5
 8000e02:	2864      	cmp	r0, #100	@ 0x64
 8000e04:	d9f5      	bls.n	8000df2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000e06:	2003      	movs	r0, #3
 8000e08:	e15f      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e0a:	4b51      	ldr	r3, [pc, #324]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000e12:	d1a5      	bne.n	8000d60 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e14:	4b4e      	ldr	r3, [pc, #312]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f013 0f02 	tst.w	r3, #2
 8000e1c:	d003      	beq.n	8000e26 <HAL_RCC_OscConfig+0x152>
 8000e1e:	6923      	ldr	r3, [r4, #16]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 814f 	bne.w	80010c4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	4a4a      	ldr	r2, [pc, #296]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e2e:	6961      	ldr	r1, [r4, #20]
 8000e30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e34:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	f013 0f08 	tst.w	r3, #8
 8000e3c:	d033      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3e:	69a3      	ldr	r3, [r4, #24]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d05c      	beq.n	8000efe <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000e44:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <HAL_RCC_OscConfig+0x280>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fd8a 	bl	8000964 <HAL_GetTick>
 8000e50:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	4b3f      	ldr	r3, [pc, #252]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	f013 0f02 	tst.w	r3, #2
 8000e5a:	d121      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fd82 	bl	8000964 <HAL_GetTick>
 8000e60:	1b40      	subs	r0, r0, r5
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d9f5      	bls.n	8000e52 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e12f      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4a39      	ldr	r2, [pc, #228]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e72:	6961      	ldr	r1, [r4, #20]
 8000e74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e7dc      	b.n	8000e36 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000e7c:	4b35      	ldr	r3, [pc, #212]	@ (8000f54 <HAL_RCC_OscConfig+0x280>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e82:	f7ff fd6f 	bl	8000964 <HAL_GetTick>
 8000e86:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e88:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f013 0f02 	tst.w	r3, #2
 8000e90:	d0d1      	beq.n	8000e36 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e92:	f7ff fd67 	bl	8000964 <HAL_GetTick>
 8000e96:	1b40      	subs	r0, r0, r5
 8000e98:	2802      	cmp	r0, #2
 8000e9a:	d9f5      	bls.n	8000e88 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	e114      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff ff01 	bl	8000ca8 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f013 0f04 	tst.w	r3, #4
 8000eac:	f000 8096 	beq.w	8000fdc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000eb8:	d134      	bne.n	8000f24 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000ebc:	69da      	ldr	r2, [r3, #28]
 8000ebe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ec2:	61da      	str	r2, [r3, #28]
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ece:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <HAL_RCC_OscConfig+0x284>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000ed8:	d026      	beq.n	8000f28 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d03d      	beq.n	8000f5c <HAL_RCC_OscConfig+0x288>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d153      	bne.n	8000f8c <HAL_RCC_OscConfig+0x2b8>
 8000ee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ee8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	621a      	str	r2, [r3, #32]
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	f022 0204 	bic.w	r2, r2, #4
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	e033      	b.n	8000f66 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <HAL_RCC_OscConfig+0x280>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000f06:	f7ff fd2d 	bl	8000964 <HAL_GetTick>
 8000f0a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_RCC_OscConfig+0x27c>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	f013 0f02 	tst.w	r3, #2
 8000f14:	d0c7      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f16:	f7ff fd25 	bl	8000964 <HAL_GetTick>
 8000f1a:	1b40      	subs	r0, r0, r5
 8000f1c:	2802      	cmp	r0, #2
 8000f1e:	d9f5      	bls.n	8000f0c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8000f20:	2003      	movs	r0, #3
 8000f22:	e0d2      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000f24:	2500      	movs	r5, #0
 8000f26:	e7d3      	b.n	8000ed0 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <HAL_RCC_OscConfig+0x284>)
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f30:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000f32:	f7ff fd17 	bl	8000964 <HAL_GetTick>
 8000f36:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <HAL_RCC_OscConfig+0x284>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f40:	d1cb      	bne.n	8000eda <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f42:	f7ff fd0f 	bl	8000964 <HAL_GetTick>
 8000f46:	1b80      	subs	r0, r0, r6
 8000f48:	2864      	cmp	r0, #100	@ 0x64
 8000f4a:	d9f5      	bls.n	8000f38 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	e0bc      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	42420000 	.word	0x42420000
 8000f58:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000f5e:	6a13      	ldr	r3, [r2, #32]
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f66:	68e3      	ldr	r3, [r4, #12]
 8000f68:	b333      	cbz	r3, 8000fb8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fcfb 	bl	8000964 <HAL_GetTick>
 8000f6e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	4b5a      	ldr	r3, [pc, #360]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	f013 0f02 	tst.w	r3, #2
 8000f78:	d12f      	bne.n	8000fda <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fcf3 	bl	8000964 <HAL_GetTick>
 8000f7e:	1b80      	subs	r0, r0, r6
 8000f80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f84:	4298      	cmp	r0, r3
 8000f86:	d9f3      	bls.n	8000f70 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8000f88:	2003      	movs	r0, #3
 8000f8a:	e09e      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f8c:	2b05      	cmp	r3, #5
 8000f8e:	d009      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x2d0>
 8000f90:	4b52      	ldr	r3, [pc, #328]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	621a      	str	r2, [r3, #32]
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	f022 0204 	bic.w	r2, r2, #4
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	e7e0      	b.n	8000f66 <HAL_RCC_OscConfig+0x292>
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000fa6:	6a1a      	ldr	r2, [r3, #32]
 8000fa8:	f042 0204 	orr.w	r2, r2, #4
 8000fac:	621a      	str	r2, [r3, #32]
 8000fae:	6a1a      	ldr	r2, [r3, #32]
 8000fb0:	f042 0201 	orr.w	r2, r2, #1
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	e7d6      	b.n	8000f66 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fcd4 	bl	8000964 <HAL_GetTick>
 8000fbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbe:	4b47      	ldr	r3, [pc, #284]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	f013 0f02 	tst.w	r3, #2
 8000fc6:	d008      	beq.n	8000fda <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fccc 	bl	8000964 <HAL_GetTick>
 8000fcc:	1b80      	subs	r0, r0, r6
 8000fce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fd2:	4298      	cmp	r0, r3
 8000fd4:	d9f3      	bls.n	8000fbe <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	e077      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000fda:	b9e5      	cbnz	r5, 8001016 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fdc:	69e3      	ldr	r3, [r4, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d072      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8000fe4:	6852      	ldr	r2, [r2, #4]
 8000fe6:	f002 020c 	and.w	r2, r2, #12
 8000fea:	2a08      	cmp	r2, #8
 8000fec:	d056      	beq.n	800109c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d017      	beq.n	8001022 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80010e0 <HAL_RCC_OscConfig+0x40c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fcb4 	bl	8000964 <HAL_GetTick>
 8000ffc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	4b37      	ldr	r3, [pc, #220]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001006:	d047      	beq.n	8001098 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff fcac 	bl	8000964 <HAL_GetTick>
 800100c:	1b00      	subs	r0, r0, r4
 800100e:	2802      	cmp	r0, #2
 8001010:	d9f5      	bls.n	8000ffe <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8001012:	2003      	movs	r0, #3
 8001014:	e059      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001016:	4a31      	ldr	r2, [pc, #196]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8001018:	69d3      	ldr	r3, [r2, #28]
 800101a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800101e:	61d3      	str	r3, [r2, #28]
 8001020:	e7dc      	b.n	8000fdc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8001022:	4b2f      	ldr	r3, [pc, #188]	@ (80010e0 <HAL_RCC_OscConfig+0x40c>)
 8001024:	2200      	movs	r2, #0
 8001026:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001028:	f7ff fc9c 	bl	8000964 <HAL_GetTick>
 800102c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001036:	d006      	beq.n	8001046 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001038:	f7ff fc94 	bl	8000964 <HAL_GetTick>
 800103c:	1b40      	subs	r0, r0, r5
 800103e:	2802      	cmp	r0, #2
 8001040:	d9f5      	bls.n	800102e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001042:	2003      	movs	r0, #3
 8001044:	e041      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001046:	6a23      	ldr	r3, [r4, #32]
 8001048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800104c:	d01a      	beq.n	8001084 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800104e:	4923      	ldr	r1, [pc, #140]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8001050:	684b      	ldr	r3, [r1, #4]
 8001052:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8001056:	6a22      	ldr	r2, [r4, #32]
 8001058:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800105a:	4302      	orrs	r2, r0
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <HAL_RCC_OscConfig+0x40c>)
 8001062:	2201      	movs	r2, #1
 8001064:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001066:	f7ff fc7d 	bl	8000964 <HAL_GetTick>
 800106a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001074:	d10e      	bne.n	8001094 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fc75 	bl	8000964 <HAL_GetTick>
 800107a:	1b00      	subs	r0, r0, r4
 800107c:	2802      	cmp	r0, #2
 800107e:	d9f5      	bls.n	800106c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e022      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001084:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 8001086:	6853      	ldr	r3, [r2, #4]
 8001088:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800108c:	68a1      	ldr	r1, [r4, #8]
 800108e:	430b      	orrs	r3, r1
 8001090:	6053      	str	r3, [r2, #4]
 8001092:	e7dc      	b.n	800104e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
 8001096:	e018      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
 8001098:	2000      	movs	r0, #0
 800109a:	e016      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109c:	2b01      	cmp	r3, #1
 800109e:	d016      	beq.n	80010ce <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_RCC_OscConfig+0x408>)
 80010a2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a4:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80010a8:	6a22      	ldr	r2, [r4, #32]
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d111      	bne.n	80010d2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010ae:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80010b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d10e      	bne.n	80010d6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80010b8:	2000      	movs	r0, #0
 80010ba:	e006      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
}
 80010be:	4770      	bx	lr
        return HAL_ERROR;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e002      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80010c4:	2001      	movs	r0, #1
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
}
 80010ca:	b002      	add	sp, #8
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010ce:	2001      	movs	r0, #1
 80010d0:	e7fb      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	e7f9      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
 80010d6:	2001      	movs	r0, #1
 80010d8:	e7f7      	b.n	80010ca <HAL_RCC_OscConfig+0x3f6>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000

080010e4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_RCC_GetSysClockFreq+0x40>)
 80010e6:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80010e8:	f003 020c 	and.w	r2, r3, #12
 80010ec:	2a08      	cmp	r2, #8
 80010ee:	d001      	beq.n	80010f4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80010f2:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010f4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <HAL_RCC_GetSysClockFreq+0x48>)
 80010fa:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010fc:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001100:	d00b      	beq.n	800111a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_RCC_GetSysClockFreq+0x40>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800110a:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_RCC_GetSysClockFreq+0x4c>)
 800110c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800110e:	4a06      	ldr	r2, [pc, #24]	@ (8001128 <HAL_RCC_GetSysClockFreq+0x44>)
 8001110:	fb02 f000 	mul.w	r0, r2, r0
 8001114:	fbb0 f0f3 	udiv	r0, r0, r3
 8001118:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_RCC_GetSysClockFreq+0x50>)
 800111c:	fb03 f000 	mul.w	r0, r3, r0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	007a1200 	.word	0x007a1200
 800112c:	08002c2c 	.word	0x08002c2c
 8001130:	08002c28 	.word	0x08002c28
 8001134:	003d0900 	.word	0x003d0900

08001138 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001138:	2800      	cmp	r0, #0
 800113a:	f000 80a0 	beq.w	800127e <HAL_RCC_ClockConfig+0x146>
{
 800113e:	b570      	push	{r4, r5, r6, lr}
 8001140:	460d      	mov	r5, r1
 8001142:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b52      	ldr	r3, [pc, #328]	@ (8001290 <HAL_RCC_ClockConfig+0x158>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	428b      	cmp	r3, r1
 800114e:	d20b      	bcs.n	8001168 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_RCC_ClockConfig+0x158>)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f023 0307 	bic.w	r3, r3, #7
 8001158:	430b      	orrs	r3, r1
 800115a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115c:	6813      	ldr	r3, [r2, #0]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	428b      	cmp	r3, r1
 8001164:	f040 808d 	bne.w	8001282 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f013 0f02 	tst.w	r3, #2
 800116e:	d017      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001170:	f013 0f04 	tst.w	r3, #4
 8001174:	d004      	beq.n	8001180 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001176:	4a47      	ldr	r2, [pc, #284]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 8001178:	6853      	ldr	r3, [r2, #4]
 800117a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800117e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001180:	6823      	ldr	r3, [r4, #0]
 8001182:	f013 0f08 	tst.w	r3, #8
 8001186:	d004      	beq.n	8001192 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001188:	4a42      	ldr	r2, [pc, #264]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 800118a:	6853      	ldr	r3, [r2, #4]
 800118c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001190:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001192:	4a40      	ldr	r2, [pc, #256]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 8001194:	6853      	ldr	r3, [r2, #4]
 8001196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800119a:	68a1      	ldr	r1, [r4, #8]
 800119c:	430b      	orrs	r3, r1
 800119e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f013 0f01 	tst.w	r3, #1
 80011a6:	d031      	beq.n	800120c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a8:	6863      	ldr	r3, [r4, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d020      	beq.n	80011f0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d025      	beq.n	80011fe <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	4a38      	ldr	r2, [pc, #224]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	f012 0f02 	tst.w	r2, #2
 80011ba:	d064      	beq.n	8001286 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011bc:	4935      	ldr	r1, [pc, #212]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 80011be:	684a      	ldr	r2, [r1, #4]
 80011c0:	f022 0203 	bic.w	r2, r2, #3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80011c8:	f7ff fbcc 	bl	8000964 <HAL_GetTick>
 80011cc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	6862      	ldr	r2, [r4, #4]
 80011d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011dc:	d016      	beq.n	800120c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011de:	f7ff fbc1 	bl	8000964 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011e8:	4298      	cmp	r0, r3
 80011ea:	d9f0      	bls.n	80011ce <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80011ec:	2003      	movs	r0, #3
 80011ee:	e045      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80011f8:	d1e0      	bne.n	80011bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e03e      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4a25      	ldr	r2, [pc, #148]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001206:	d1d9      	bne.n	80011bc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8001208:	2001      	movs	r0, #1
 800120a:	e037      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_RCC_ClockConfig+0x158>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	42ab      	cmp	r3, r5
 8001216:	d90a      	bls.n	800122e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001218:	4a1d      	ldr	r2, [pc, #116]	@ (8001290 <HAL_RCC_ClockConfig+0x158>)
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	432b      	orrs	r3, r5
 8001222:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	42ab      	cmp	r3, r5
 800122c:	d12d      	bne.n	800128a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f013 0f04 	tst.w	r3, #4
 8001234:	d006      	beq.n	8001244 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001236:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 8001238:	6853      	ldr	r3, [r2, #4]
 800123a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800123e:	68e1      	ldr	r1, [r4, #12]
 8001240:	430b      	orrs	r3, r1
 8001242:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	f013 0f08 	tst.w	r3, #8
 800124a:	d007      	beq.n	800125c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800124c:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 800124e:	6853      	ldr	r3, [r2, #4]
 8001250:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001254:	6921      	ldr	r1, [r4, #16]
 8001256:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800125a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125c:	f7ff ff42 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_RCC_ClockConfig+0x15c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001268:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_RCC_ClockConfig+0x160>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	40d8      	lsrs	r0, r3
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_RCC_ClockConfig+0x164>)
 8001270:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_RCC_ClockConfig+0x168>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f000 f9b3 	bl	80015e0 <HAL_InitTick>
  return HAL_OK;
 800127a:	2000      	movs	r0, #0
}
 800127c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800127e:	2001      	movs	r0, #1
}
 8001280:	4770      	bx	lr
    return HAL_ERROR;
 8001282:	2001      	movs	r0, #1
 8001284:	e7fa      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
 8001288:	e7f8      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800128a:	2001      	movs	r0, #1
 800128c:	e7f6      	b.n	800127c <HAL_RCC_ClockConfig+0x144>
 800128e:	bf00      	nop
 8001290:	40022000 	.word	0x40022000
 8001294:	40021000 	.word	0x40021000
 8001298:	08002c44 	.word	0x08002c44
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	20000008 	.word	0x20000008

080012a4 <HAL_RCC_GetHCLKFreq>:
}
 80012a4:	4b01      	ldr	r3, [pc, #4]	@ (80012ac <HAL_RCC_GetHCLKFreq+0x8>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c

080012b0 <HAL_RCC_GetPCLK1Freq>:
{
 80012b0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b2:	f7ff fff7 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012b6:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80012be:	4a03      	ldr	r2, [pc, #12]	@ (80012cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
}
 80012c2:	40d8      	lsrs	r0, r3
 80012c4:	bd08      	pop	{r3, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	08002c3c 	.word	0x08002c3c

080012d0 <HAL_RCC_GetPCLK2Freq>:
{
 80012d0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012d2:	f7ff ffe7 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80012de:	4a03      	ldr	r2, [pc, #12]	@ (80012ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
}
 80012e2:	40d8      	lsrs	r0, r3
 80012e4:	bd08      	pop	{r3, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	08002c3c 	.word	0x08002c3c

080012f0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012f0:	230f      	movs	r3, #15
 80012f2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_RCC_GetClockConfig+0x34>)
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8001304:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800130c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001316:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001318:	4b03      	ldr	r3, [pc, #12]	@ (8001328 <HAL_RCC_GetClockConfig+0x38>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	600b      	str	r3, [r1, #0]
}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40022000 	.word	0x40022000

0800132c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800132c:	4770      	bx	lr
	...

08001330 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001330:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d127      	bne.n	800138a <HAL_TIM_Base_Start_IT+0x5a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800133a:	2302      	movs	r3, #2
 800133c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001340:	6802      	ldr	r2, [r0, #0]
 8001342:	68d3      	ldr	r3, [r2, #12]
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800134a:	6803      	ldr	r3, [r0, #0]
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_TIM_Base_Start_IT+0x64>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d010      	beq.n	8001374 <HAL_TIM_Base_Start_IT+0x44>
 8001352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001356:	d00d      	beq.n	8001374 <HAL_TIM_Base_Start_IT+0x44>
 8001358:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800135c:	4293      	cmp	r3, r2
 800135e:	d009      	beq.n	8001374 <HAL_TIM_Base_Start_IT+0x44>
 8001360:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001364:	4293      	cmp	r3, r2
 8001366:	d005      	beq.n	8001374 <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001370:	2000      	movs	r0, #0
 8001372:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800137a:	2a06      	cmp	r2, #6
 800137c:	d007      	beq.n	800138e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001386:	2000      	movs	r0, #0
 8001388:	4770      	bx	lr
    return HAL_ERROR;
 800138a:	2001      	movs	r0, #1
 800138c:	4770      	bx	lr
  return HAL_OK;
 800138e:	2000      	movs	r0, #0
}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00

08001398 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001398:	4770      	bx	lr

0800139a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800139a:	4770      	bx	lr

0800139c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800139c:	4770      	bx	lr

0800139e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800139e:	4770      	bx	lr

080013a0 <HAL_TIM_IRQHandler>:
{
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80013a4:	6803      	ldr	r3, [r0, #0]
 80013a6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80013a8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80013aa:	f015 0f02 	tst.w	r5, #2
 80013ae:	d010      	beq.n	80013d2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80013b0:	f016 0f02 	tst.w	r6, #2
 80013b4:	d00d      	beq.n	80013d2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80013b6:	f06f 0202 	mvn.w	r2, #2
 80013ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013bc:	2301      	movs	r3, #1
 80013be:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013c0:	6803      	ldr	r3, [r0, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f013 0f03 	tst.w	r3, #3
 80013c8:	d05e      	beq.n	8001488 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80013ca:	f7ff ffe6 	bl	800139a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013ce:	2300      	movs	r3, #0
 80013d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80013d2:	f015 0f04 	tst.w	r5, #4
 80013d6:	d012      	beq.n	80013fe <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80013d8:	f016 0f04 	tst.w	r6, #4
 80013dc:	d00f      	beq.n	80013fe <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f06f 0204 	mvn.w	r2, #4
 80013e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80013f2:	d04f      	beq.n	8001494 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff ffd0 	bl	800139a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013fa:	2300      	movs	r3, #0
 80013fc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80013fe:	f015 0f08 	tst.w	r5, #8
 8001402:	d012      	beq.n	800142a <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001404:	f016 0f08 	tst.w	r6, #8
 8001408:	d00f      	beq.n	800142a <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f06f 0208 	mvn.w	r2, #8
 8001410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001412:	2304      	movs	r3, #4
 8001414:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f013 0f03 	tst.w	r3, #3
 800141e:	d040      	beq.n	80014a2 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff ffba 	bl	800139a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001426:	2300      	movs	r3, #0
 8001428:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800142a:	f015 0f10 	tst.w	r5, #16
 800142e:	d012      	beq.n	8001456 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001430:	f016 0f10 	tst.w	r6, #16
 8001434:	d00f      	beq.n	8001456 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f06f 0210 	mvn.w	r2, #16
 800143c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800143e:	2308      	movs	r3, #8
 8001440:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800144a:	d031      	beq.n	80014b0 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff ffa4 	bl	800139a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001452:	2300      	movs	r3, #0
 8001454:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001456:	f015 0f01 	tst.w	r5, #1
 800145a:	d002      	beq.n	8001462 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800145c:	f016 0f01 	tst.w	r6, #1
 8001460:	d12d      	bne.n	80014be <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001462:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001466:	d002      	beq.n	800146e <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001468:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800146c:	d12f      	bne.n	80014ce <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800146e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001472:	d002      	beq.n	800147a <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001474:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8001478:	d131      	bne.n	80014de <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800147a:	f015 0f20 	tst.w	r5, #32
 800147e:	d002      	beq.n	8001486 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001480:	f016 0f20 	tst.w	r6, #32
 8001484:	d133      	bne.n	80014ee <HAL_TIM_IRQHandler+0x14e>
}
 8001486:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001488:	f7ff ff86 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff ff85 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
 8001492:	e79c      	b.n	80013ce <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ff7f 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff ff7e 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
 80014a0:	e7ab      	b.n	80013fa <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff ff78 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014a8:	4620      	mov	r0, r4
 80014aa:	f7ff ff77 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
 80014ae:	e7ba      	b.n	8001426 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff ff71 	bl	8001398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ff70 	bl	800139c <HAL_TIM_PWM_PulseFinishedCallback>
 80014bc:	e7c9      	b.n	8001452 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	f06f 0201 	mvn.w	r2, #1
 80014c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff f89c 	bl	8000604 <HAL_TIM_PeriodElapsedCallback>
 80014cc:	e7c9      	b.n	8001462 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80014d4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014d6:	4620      	mov	r0, r4
 80014d8:	f000 f881 	bl	80015de <HAL_TIMEx_BreakCallback>
 80014dc:	e7c7      	b.n	800146e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80014e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ff59 	bl	800139e <HAL_TIM_TriggerCallback>
 80014ec:	e7c5      	b.n	800147a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f06f 0220 	mvn.w	r2, #32
 80014f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80014f6:	4620      	mov	r0, r4
 80014f8:	f000 f870 	bl	80015dc <HAL_TIMEx_CommutCallback>
}
 80014fc:	e7c3      	b.n	8001486 <HAL_TIM_IRQHandler+0xe6>
	...

08001500 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001500:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001502:	4a1f      	ldr	r2, [pc, #124]	@ (8001580 <TIM_Base_SetConfig+0x80>)
 8001504:	4290      	cmp	r0, r2
 8001506:	d00a      	beq.n	800151e <TIM_Base_SetConfig+0x1e>
 8001508:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800150c:	d007      	beq.n	800151e <TIM_Base_SetConfig+0x1e>
 800150e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001512:	4290      	cmp	r0, r2
 8001514:	d003      	beq.n	800151e <TIM_Base_SetConfig+0x1e>
 8001516:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800151a:	4290      	cmp	r0, r2
 800151c:	d103      	bne.n	8001526 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800151e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001522:	684a      	ldr	r2, [r1, #4]
 8001524:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001526:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <TIM_Base_SetConfig+0x80>)
 8001528:	4290      	cmp	r0, r2
 800152a:	d00a      	beq.n	8001542 <TIM_Base_SetConfig+0x42>
 800152c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001530:	d007      	beq.n	8001542 <TIM_Base_SetConfig+0x42>
 8001532:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8001536:	4290      	cmp	r0, r2
 8001538:	d003      	beq.n	8001542 <TIM_Base_SetConfig+0x42>
 800153a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800153e:	4290      	cmp	r0, r2
 8001540:	d103      	bne.n	800154a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001546:	68ca      	ldr	r2, [r1, #12]
 8001548:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800154a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800154e:	694a      	ldr	r2, [r1, #20]
 8001550:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001552:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001554:	688b      	ldr	r3, [r1, #8]
 8001556:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001558:	680b      	ldr	r3, [r1, #0]
 800155a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <TIM_Base_SetConfig+0x80>)
 800155e:	4298      	cmp	r0, r3
 8001560:	d00a      	beq.n	8001578 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001562:	2301      	movs	r3, #1
 8001564:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001566:	6903      	ldr	r3, [r0, #16]
 8001568:	f013 0f01 	tst.w	r3, #1
 800156c:	d003      	beq.n	8001576 <TIM_Base_SetConfig+0x76>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800156e:	6903      	ldr	r3, [r0, #16]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6103      	str	r3, [r0, #16]
  }
}
 8001576:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001578:	690b      	ldr	r3, [r1, #16]
 800157a:	6303      	str	r3, [r0, #48]	@ 0x30
 800157c:	e7f1      	b.n	8001562 <TIM_Base_SetConfig+0x62>
 800157e:	bf00      	nop
 8001580:	40012c00 	.word	0x40012c00

08001584 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001584:	b340      	cbz	r0, 80015d8 <HAL_TIM_Base_Init+0x54>
{
 8001586:	b510      	push	{r4, lr}
 8001588:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800158a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800158e:	b1f3      	cbz	r3, 80015ce <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001590:	2302      	movs	r3, #2
 8001592:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001596:	4621      	mov	r1, r4
 8001598:	f851 0b04 	ldr.w	r0, [r1], #4
 800159c:	f7ff ffb0 	bl	8001500 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80015aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80015ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80015b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80015ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80015be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80015c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80015ca:	2000      	movs	r0, #0
}
 80015cc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80015ce:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80015d2:	f7ff feab 	bl	800132c <HAL_TIM_Base_MspInit>
 80015d6:	e7db      	b.n	8001590 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80015d8:	2001      	movs	r0, #1
}
 80015da:	4770      	bx	lr

080015dc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80015dc:	4770      	bx	lr

080015de <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015de:	4770      	bx	lr

080015e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e0:	b530      	push	{r4, r5, lr}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_InitTick+0x8c>)
 80015e8:	69da      	ldr	r2, [r3, #28]
 80015ea:	f042 0204 	orr.w	r2, r2, #4
 80015ee:	61da      	str	r2, [r3, #28]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fa:	a902      	add	r1, sp, #8
 80015fc:	a803      	add	r0, sp, #12
 80015fe:	f7ff fe77 	bl	80012f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001602:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001604:	b9cb      	cbnz	r3, 800163a <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001606:	f7ff fe53 	bl	80012b0 <HAL_RCC_GetPCLK1Freq>
 800160a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <HAL_InitTick+0x90>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9b      	lsrs	r3, r3, #18
 8001614:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001616:	4817      	ldr	r0, [pc, #92]	@ (8001674 <HAL_InitTick+0x94>)
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_InitTick+0x98>)
 800161a:	6002      	str	r2, [r0, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800161c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001620:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001622:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800162c:	f7ff ffaa 	bl	8001584 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001630:	4605      	mov	r5, r0
 8001632:	b130      	cbz	r0, 8001642 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8001634:	4628      	mov	r0, r5
 8001636:	b009      	add	sp, #36	@ 0x24
 8001638:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800163a:	f7ff fe39 	bl	80012b0 <HAL_RCC_GetPCLK1Freq>
 800163e:	0043      	lsls	r3, r0, #1
 8001640:	e7e4      	b.n	800160c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001642:	480c      	ldr	r0, [pc, #48]	@ (8001674 <HAL_InitTick+0x94>)
 8001644:	f7ff fe74 	bl	8001330 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001648:	4605      	mov	r5, r0
 800164a:	2800      	cmp	r0, #0
 800164c:	d1f2      	bne.n	8001634 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800164e:	201e      	movs	r0, #30
 8001650:	f7ff f9e4 	bl	8000a1c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001654:	2c0f      	cmp	r4, #15
 8001656:	d901      	bls.n	800165c <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8001658:	2501      	movs	r5, #1
 800165a:	e7eb      	b.n	8001634 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	4621      	mov	r1, r4
 8001660:	201e      	movs	r0, #30
 8001662:	f7ff f9cb 	bl	80009fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_InitTick+0x9c>)
 8001668:	601c      	str	r4, [r3, #0]
 800166a:	e7e3      	b.n	8001634 <HAL_InitTick+0x54>
 800166c:	40021000 	.word	0x40021000
 8001670:	431bde83 	.word	0x431bde83
 8001674:	20000f04 	.word	0x20000f04
 8001678:	40000800 	.word	0x40000800
 800167c:	20000008 	.word	0x20000008

08001680 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001680:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001682:	f102 030c 	add.w	r3, r2, #12
 8001686:	e853 3f00 	ldrex	r3, [r3]
 800168a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800168e:	320c      	adds	r2, #12
 8001690:	e842 3100 	strex	r1, r3, [r2]
 8001694:	2900      	cmp	r1, #0
 8001696:	d1f3      	bne.n	8001680 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001698:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800169a:	f102 0314 	add.w	r3, r2, #20
 800169e:	e853 3f00 	ldrex	r3, [r3]
 80016a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016a6:	3214      	adds	r2, #20
 80016a8:	e842 3100 	strex	r1, r3, [r2]
 80016ac:	2900      	cmp	r1, #0
 80016ae:	d1f3      	bne.n	8001698 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d005      	beq.n	80016c2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016b6:	2320      	movs	r3, #32
 80016b8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016bc:	2300      	movs	r3, #0
 80016be:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80016c0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016c2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016c4:	f102 030c 	add.w	r3, r2, #12
 80016c8:	e853 3f00 	ldrex	r3, [r3]
 80016cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016d0:	320c      	adds	r2, #12
 80016d2:	e842 3100 	strex	r1, r3, [r2]
 80016d6:	2900      	cmp	r1, #0
 80016d8:	d1f3      	bne.n	80016c2 <UART_EndRxTransfer+0x42>
 80016da:	e7ec      	b.n	80016b6 <UART_EndRxTransfer+0x36>

080016dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016e0:	6802      	ldr	r2, [r0, #0]
 80016e2:	6913      	ldr	r3, [r2, #16]
 80016e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016e8:	68c1      	ldr	r1, [r0, #12]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80016ee:	6883      	ldr	r3, [r0, #8]
 80016f0:	6902      	ldr	r2, [r0, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	6942      	ldr	r2, [r0, #20]
 80016f6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80016f8:	6801      	ldr	r1, [r0, #0]
 80016fa:	68cb      	ldr	r3, [r1, #12]
 80016fc:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001700:	f023 030c 	bic.w	r3, r3, #12
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	6953      	ldr	r3, [r2, #20]
 800170c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001710:	6981      	ldr	r1, [r0, #24]
 8001712:	430b      	orrs	r3, r1
 8001714:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <UART_SetConfig+0x8c>)
 800171a:	429a      	cmp	r2, r3
 800171c:	d020      	beq.n	8001760 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800171e:	f7ff fdc7 	bl	80012b0 <HAL_RCC_GetPCLK1Freq>
 8001722:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001724:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001728:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800172c:	6863      	ldr	r3, [r4, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fbb2 f2f3 	udiv	r2, r2, r3
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <UART_SetConfig+0x90>)
 8001736:	fba0 3102 	umull	r3, r1, r0, r2
 800173a:	0949      	lsrs	r1, r1, #5
 800173c:	2364      	movs	r3, #100	@ 0x64
 800173e:	fb03 2311 	mls	r3, r3, r1, r2
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	3332      	adds	r3, #50	@ 0x32
 8001746:	fba0 0303 	umull	r0, r3, r0, r3
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001750:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	6821      	ldr	r1, [r4, #0]
 800175a:	4413      	add	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 800175e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001760:	f7ff fdb6 	bl	80012d0 <HAL_RCC_GetPCLK2Freq>
 8001764:	4602      	mov	r2, r0
 8001766:	e7dd      	b.n	8001724 <UART_SetConfig+0x48>
 8001768:	40013800 	.word	0x40013800
 800176c:	51eb851f 	.word	0x51eb851f

08001770 <UART_WaitOnFlagUntilTimeout>:
{
 8001770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001774:	b083      	sub	sp, #12
 8001776:	4605      	mov	r5, r0
 8001778:	460e      	mov	r6, r1
 800177a:	4617      	mov	r7, r2
 800177c:	4699      	mov	r9, r3
 800177e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001782:	682b      	ldr	r3, [r5, #0]
 8001784:	681c      	ldr	r4, [r3, #0]
 8001786:	ea36 0404 	bics.w	r4, r6, r4
 800178a:	bf0c      	ite	eq
 800178c:	2401      	moveq	r4, #1
 800178e:	2400      	movne	r4, #0
 8001790:	42bc      	cmp	r4, r7
 8001792:	d128      	bne.n	80017e6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8001794:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001798:	d0f3      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff f8e3 	bl	8000964 <HAL_GetTick>
 800179e:	eba0 0009 	sub.w	r0, r0, r9
 80017a2:	4540      	cmp	r0, r8
 80017a4:	d823      	bhi.n	80017ee <UART_WaitOnFlagUntilTimeout+0x7e>
 80017a6:	f1b8 0f00 	cmp.w	r8, #0
 80017aa:	d022      	beq.n	80017f2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	f012 0f04 	tst.w	r2, #4
 80017b4:	d0e5      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
 80017b6:	2e80      	cmp	r6, #128	@ 0x80
 80017b8:	d0e3      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
 80017ba:	2e40      	cmp	r6, #64	@ 0x40
 80017bc:	d0e1      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f012 0f08 	tst.w	r2, #8
 80017c4:	d0dd      	beq.n	8001782 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80017c6:	2400      	movs	r4, #0
 80017c8:	9401      	str	r4, [sp, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80017d4:	4628      	mov	r0, r5
 80017d6:	f7ff ff53 	bl	8001680 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017da:	2308      	movs	r3, #8
 80017dc:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 80017de:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
 80017e4:	e000      	b.n	80017e8 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80017e6:	2000      	movs	r0, #0
}
 80017e8:	b003      	add	sp, #12
 80017ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80017ee:	2003      	movs	r0, #3
 80017f0:	e7fa      	b.n	80017e8 <UART_WaitOnFlagUntilTimeout+0x78>
 80017f2:	2003      	movs	r0, #3
 80017f4:	e7f8      	b.n	80017e8 <UART_WaitOnFlagUntilTimeout+0x78>

080017f6 <HAL_UART_Init>:
  if (huart == NULL)
 80017f6:	b360      	cbz	r0, 8001852 <HAL_UART_Init+0x5c>
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80017fc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001800:	b313      	cbz	r3, 8001848 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8001802:	2324      	movs	r3, #36	@ 0x24
 8001804:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	68d3      	ldr	r3, [r2, #12]
 800180c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001810:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ff62 	bl	80016dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	6913      	ldr	r3, [r2, #16]
 800181c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001820:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001822:	6822      	ldr	r2, [r4, #0]
 8001824:	6953      	ldr	r3, [r2, #20]
 8001826:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800182a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	68d3      	ldr	r3, [r2, #12]
 8001830:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001834:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001836:	2000      	movs	r0, #0
 8001838:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800183a:	2320      	movs	r3, #32
 800183c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001844:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001846:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001848:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800184c:	f000 fc70 	bl	8002130 <HAL_UART_MspInit>
 8001850:	e7d7      	b.n	8001802 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	4770      	bx	lr

08001856 <HAL_UART_Transmit>:
{
 8001856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800185e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b20      	cmp	r3, #32
 8001866:	d156      	bne.n	8001916 <HAL_UART_Transmit+0xc0>
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
 800186c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800186e:	2900      	cmp	r1, #0
 8001870:	d055      	beq.n	800191e <HAL_UART_Transmit+0xc8>
 8001872:	b90a      	cbnz	r2, 8001878 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8001874:	2001      	movs	r0, #1
 8001876:	e04f      	b.n	8001918 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001878:	2300      	movs	r3, #0
 800187a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800187c:	2321      	movs	r3, #33	@ 0x21
 800187e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001882:	f7ff f86f 	bl	8000964 <HAL_GetTick>
 8001886:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001888:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800188c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001890:	68a3      	ldr	r3, [r4, #8]
 8001892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001896:	d002      	beq.n	800189e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e014      	b.n	80018c8 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	b32b      	cbz	r3, 80018ee <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80018a2:	f04f 0800 	mov.w	r8, #0
 80018a6:	e00f      	b.n	80018c8 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80018a8:	2320      	movs	r3, #32
 80018aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80018ae:	2003      	movs	r0, #3
 80018b0:	e032      	b.n	8001918 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018b2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018bc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80018be:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80018c0:	b292      	uxth	r2, r2
 80018c2:	3a01      	subs	r2, #1
 80018c4:	b292      	uxth	r2, r2
 80018c6:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80018c8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b193      	cbz	r3, 80018f4 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ce:	9600      	str	r6, [sp, #0]
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff ff4a 	bl	8001770 <UART_WaitOnFlagUntilTimeout>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d1e3      	bne.n	80018a8 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80018e0:	2d00      	cmp	r5, #0
 80018e2:	d0e6      	beq.n	80018b2 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018e4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018ec:	e7e7      	b.n	80018be <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80018ee:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80018f0:	2500      	movs	r5, #0
 80018f2:	e7e9      	b.n	80018c8 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018f4:	9600      	str	r6, [sp, #0]
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	2140      	movs	r1, #64	@ 0x40
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ff37 	bl	8001770 <UART_WaitOnFlagUntilTimeout>
 8001902:	b918      	cbnz	r0, 800190c <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8001904:	2320      	movs	r3, #32
 8001906:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800190a:	e005      	b.n	8001918 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 800190c:	2320      	movs	r3, #32
 800190e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8001912:	2003      	movs	r0, #3
 8001914:	e000      	b.n	8001918 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8001916:	2002      	movs	r0, #2
}
 8001918:	b002      	add	sp, #8
 800191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800191e:	2001      	movs	r0, #1
 8001920:	e7fa      	b.n	8001918 <HAL_UART_Transmit+0xc2>

08001922 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001922:	e7fe      	b.n	8001922 <NMI_Handler>

08001924 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <HardFault_Handler>

08001926 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <MemManage_Handler>

08001928 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <BusFault_Handler>

0800192a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <UsageFault_Handler>

0800192c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	4770      	bx	lr
	...

08001930 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001932:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM4_IRQHandler+0xc>)
 8001934:	f7ff fd34 	bl	80013a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop
 800193c:	20000f04 	.word	0x20000f04

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a0c      	ldr	r2, [pc, #48]	@ (8001978 <_sbrk+0x38>)
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <_sbrk+0x40>)
 800194a:	6800      	ldr	r0, [r0, #0]
 800194c:	b140      	cbz	r0, 8001960 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194e:	480c      	ldr	r0, [pc, #48]	@ (8001980 <_sbrk+0x40>)
 8001950:	6800      	ldr	r0, [r0, #0]
 8001952:	4403      	add	r3, r0
 8001954:	1a52      	subs	r2, r2, r1
 8001956:	4293      	cmp	r3, r2
 8001958:	d806      	bhi.n	8001968 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <_sbrk+0x40>)
 800195c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800195e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001960:	4807      	ldr	r0, [pc, #28]	@ (8001980 <_sbrk+0x40>)
 8001962:	4c08      	ldr	r4, [pc, #32]	@ (8001984 <_sbrk+0x44>)
 8001964:	6004      	str	r4, [r0, #0]
 8001966:	e7f2      	b.n	800194e <_sbrk+0xe>
    errno = ENOMEM;
 8001968:	f000 fc88 	bl	800227c <__errno>
 800196c:	230c      	movs	r3, #12
 800196e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	e7f3      	b.n	800195e <_sbrk+0x1e>
 8001976:	bf00      	nop
 8001978:	20005000 	.word	0x20005000
 800197c:	00000400 	.word	0x00000400
 8001980:	20000f4c 	.word	0x20000f4c
 8001984:	20001210 	.word	0x20001210

08001988 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	4770      	bx	lr
	...

0800198c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <prvResetNextTaskUnblockTime+0x24>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b923      	cbnz	r3, 800199e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <prvResetNextTaskUnblockTime+0x28>)
 8001996:	f04f 32ff 	mov.w	r2, #4294967295
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <prvResetNextTaskUnblockTime+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <prvResetNextTaskUnblockTime+0x28>)
 80019aa:	601a      	str	r2, [r3, #0]
	}
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000fc0 	.word	0x20000fc0
 80019b4:	20000f58 	.word	0x20000f58

080019b8 <prvInitialiseNewTask>:
{
 80019b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019bc:	4607      	mov	r7, r0
 80019be:	4698      	mov	r8, r3
 80019c0:	9d08      	ldr	r5, [sp, #32]
 80019c2:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 80019c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019c8:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80019ca:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80019ce:	3a01      	subs	r2, #1
 80019d0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019d4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80019d8:	b3c1      	cbz	r1, 8001a4c <prvInitialiseNewTask+0x94>
 80019da:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019dc:	f04f 0c00 	mov.w	ip, #0
 80019e0:	f1bc 0f0f 	cmp.w	ip, #15
 80019e4:	d809      	bhi.n	80019fa <prvInitialiseNewTask+0x42>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019e6:	f810 200c 	ldrb.w	r2, [r0, ip]
 80019ea:	eb04 030c 	add.w	r3, r4, ip
 80019ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80019f2:	b112      	cbz	r2, 80019fa <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019f4:	f10c 0c01 	add.w	ip, ip, #1
 80019f8:	e7f2      	b.n	80019e0 <prvInitialiseNewTask+0x28>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019fa:	2300      	movs	r3, #0
 80019fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a00:	2d06      	cmp	r5, #6
 8001a02:	d900      	bls.n	8001a06 <prvInitialiseNewTask+0x4e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a04:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8001a06:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001a08:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001a0a:	f04f 0a00 	mov.w	sl, #0
 8001a0e:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a12:	1d20      	adds	r0, r4, #4
 8001a14:	f7fe fd9f 	bl	8000556 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a18:	f104 0018 	add.w	r0, r4, #24
 8001a1c:	f7fe fd9b 	bl	8000556 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a20:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a22:	f1c5 0507 	rsb	r5, r5, #7
 8001a26:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a28:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001a2a:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a2e:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a32:	4642      	mov	r2, r8
 8001a34:	4639      	mov	r1, r7
 8001a36:	4630      	mov	r0, r6
 8001a38:	f7fe fe62 	bl	8000700 <pxPortInitialiseStack>
 8001a3c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8001a3e:	f1b9 0f00 	cmp.w	r9, #0
 8001a42:	d001      	beq.n	8001a48 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a44:	f8c9 4000 	str.w	r4, [r9]
}
 8001a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8001a52:	e7d5      	b.n	8001a00 <prvInitialiseNewTask+0x48>

08001a54 <prvInitialiseTaskLists>:
{
 8001a54:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a56:	2400      	movs	r4, #0
 8001a58:	e007      	b.n	8001a6a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001a5a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a5e:	0093      	lsls	r3, r2, #2
 8001a60:	480e      	ldr	r0, [pc, #56]	@ (8001a9c <prvInitialiseTaskLists+0x48>)
 8001a62:	4418      	add	r0, r3
 8001a64:	f7fe fd6c 	bl	8000540 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001a68:	3401      	adds	r4, #1
 8001a6a:	2c06      	cmp	r4, #6
 8001a6c:	d9f5      	bls.n	8001a5a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001a6e:	4d0c      	ldr	r5, [pc, #48]	@ (8001aa0 <prvInitialiseTaskLists+0x4c>)
 8001a70:	4628      	mov	r0, r5
 8001a72:	f7fe fd65 	bl	8000540 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001a76:	4c0b      	ldr	r4, [pc, #44]	@ (8001aa4 <prvInitialiseTaskLists+0x50>)
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fd61 	bl	8000540 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001a7e:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <prvInitialiseTaskLists+0x54>)
 8001a80:	f7fe fd5e 	bl	8000540 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001a84:	4809      	ldr	r0, [pc, #36]	@ (8001aac <prvInitialiseTaskLists+0x58>)
 8001a86:	f7fe fd5b 	bl	8000540 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001a8a:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <prvInitialiseTaskLists+0x5c>)
 8001a8c:	f7fe fd58 	bl	8000540 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <prvInitialiseTaskLists+0x60>)
 8001a92:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001a94:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <prvInitialiseTaskLists+0x64>)
 8001a96:	601c      	str	r4, [r3, #0]
}
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000fec 	.word	0x20000fec
 8001aa0:	20000fd8 	.word	0x20000fd8
 8001aa4:	20000fc4 	.word	0x20000fc4
 8001aa8:	20000fa8 	.word	0x20000fa8
 8001aac:	20000f94 	.word	0x20000f94
 8001ab0:	20000f7c 	.word	0x20000f7c
 8001ab4:	20000fc0 	.word	0x20000fc0
 8001ab8:	20000fbc 	.word	0x20000fbc

08001abc <prvAddNewTaskToReadyList>:
{
 8001abc:	b510      	push	{r4, lr}
 8001abe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001ac0:	f7fe fe48 	bl	8000754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001ac4:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <prvAddNewTaskToReadyList+0x90>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <prvAddNewTaskToReadyList+0x94>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b15b      	cbz	r3, 8001aea <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <prvAddNewTaskToReadyList+0x98>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b96b      	cbnz	r3, 8001af4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <prvAddNewTaskToReadyList+0x94>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ade:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d807      	bhi.n	8001af4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <prvAddNewTaskToReadyList+0x94>)
 8001ae6:	601c      	str	r4, [r3, #0]
 8001ae8:	e004      	b.n	8001af4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <prvAddNewTaskToReadyList+0x94>)
 8001aec:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d028      	beq.n	8001b46 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8001af4:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <prvAddNewTaskToReadyList+0x9c>)
 8001af6:	6813      	ldr	r3, [r2, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001afc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001afe:	2301      	movs	r3, #1
 8001b00:	4083      	lsls	r3, r0
 8001b02:	4a16      	ldr	r2, [pc, #88]	@ (8001b5c <prvAddNewTaskToReadyList+0xa0>)
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b0e:	1d21      	adds	r1, r4, #4
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <prvAddNewTaskToReadyList+0xa4>)
 8001b12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b16:	f7fe fd21 	bl	800055c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001b1a:	f7fe fe3d 	bl	8000798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <prvAddNewTaskToReadyList+0x98>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b17b      	cbz	r3, 8001b44 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <prvAddNewTaskToReadyList+0x94>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d209      	bcs.n	8001b44 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8001b30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b38:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001b3c:	f3bf 8f4f 	dsb	sy
 8001b40:	f3bf 8f6f 	isb	sy
}
 8001b44:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8001b46:	f7ff ff85 	bl	8001a54 <prvInitialiseTaskLists>
 8001b4a:	e7d3      	b.n	8001af4 <prvAddNewTaskToReadyList+0x38>
 8001b4c:	20000f78 	.word	0x20000f78
 8001b50:	20001078 	.word	0x20001078
 8001b54:	20000f6c 	.word	0x20000f6c
 8001b58:	20000f5c 	.word	0x20000f5c
 8001b5c:	20000f70 	.word	0x20000f70
 8001b60:	20000fec 	.word	0x20000fec

08001b64 <prvDeleteTCB>:
	{
 8001b64:	b510      	push	{r4, lr}
 8001b66:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001b68:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8001b6c:	b163      	cbz	r3, 8001b88 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d011      	beq.n	8001b96 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d00e      	beq.n	8001b94 <prvDeleteTCB+0x30>
 8001b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b7a:	f383 8811 	msr	BASEPRI, r3
 8001b7e:	f3bf 8f6f 	isb	sy
 8001b82:	f3bf 8f4f 	dsb	sy
 8001b86:	e7fe      	b.n	8001b86 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8001b88:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8001b8a:	f7fe fc9b 	bl	80004c4 <vPortFree>
				vPortFree( pxTCB );
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7fe fc98 	bl	80004c4 <vPortFree>
	}
 8001b94:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8001b96:	f7fe fc95 	bl	80004c4 <vPortFree>
 8001b9a:	e7fb      	b.n	8001b94 <prvDeleteTCB+0x30>

08001b9c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <prvCheckTasksWaitingTermination+0x40>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b1d3      	cbz	r3, 8001bd8 <prvCheckTasksWaitingTermination+0x3c>
{
 8001ba2:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8001ba4:	f7fe fdd6 	bl	8000754 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <prvCheckTasksWaitingTermination+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bae:	1d20      	adds	r0, r4, #4
 8001bb0:	f7fe fcf8 	bl	80005a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <prvCheckTasksWaitingTermination+0x48>)
 8001bb6:	6813      	ldr	r3, [r2, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001bbc:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <prvCheckTasksWaitingTermination+0x40>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8001bc4:	f7fe fde8 	bl	8000798 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ffcb 	bl	8001b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bce:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <prvCheckTasksWaitingTermination+0x40>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e6      	bne.n	8001ba4 <prvCheckTasksWaitingTermination+0x8>
}
 8001bd6:	bd10      	pop	{r4, pc}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000f90 	.word	0x20000f90
 8001be0:	20000f94 	.word	0x20000f94
 8001be4:	20000f78 	.word	0x20000f78

08001be8 <prvIdleTask>:
{
 8001be8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001bea:	f7ff ffd7 	bl	8001b9c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <prvIdleTask+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d9f9      	bls.n	8001bea <prvIdleTask+0x2>
				taskYIELD();
 8001bf6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bfe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	f3bf 8f6f 	isb	sy
 8001c0a:	e7ee      	b.n	8001bea <prvIdleTask+0x2>
 8001c0c:	20000fec 	.word	0x20000fec

08001c10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c10:	b570      	push	{r4, r5, r6, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <prvAddCurrentTaskToDelayedList+0x7c>)
 8001c18:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	3004      	adds	r0, #4
 8001c20:	f7fe fcc0 	bl	80005a4 <uxListRemove>
 8001c24:	b948      	cbnz	r0, 8001c3a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	4918      	ldr	r1, [pc, #96]	@ (8001c94 <prvAddCurrentTaskToDelayedList+0x84>)
 8001c32:	680b      	ldr	r3, [r1, #0]
 8001c34:	ea23 0302 	bic.w	r3, r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c3a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c3e:	d00d      	beq.n	8001c5c <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c40:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001c48:	42a6      	cmp	r6, r4
 8001c4a:	d910      	bls.n	8001c6e <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <prvAddCurrentTaskToDelayedList+0x88>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	3104      	adds	r1, #4
 8001c56:	f7fe fc8c 	bl	8000572 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c5c:	2d00      	cmp	r5, #0
 8001c5e:	d0ef      	beq.n	8001c40 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	3104      	adds	r1, #4
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <prvAddCurrentTaskToDelayedList+0x8c>)
 8001c68:	f7fe fc78 	bl	800055c <vListInsertEnd>
 8001c6c:	e7f5      	b.n	8001c5a <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <prvAddCurrentTaskToDelayedList+0x90>)
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <prvAddCurrentTaskToDelayedList+0x80>)
 8001c74:	6819      	ldr	r1, [r3, #0]
 8001c76:	3104      	adds	r1, #4
 8001c78:	f7fe fc7b 	bl	8000572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	d9ea      	bls.n	8001c5a <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8001c84:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8001c86:	601c      	str	r4, [r3, #0]
}
 8001c88:	e7e7      	b.n	8001c5a <prvAddCurrentTaskToDelayedList+0x4a>
 8001c8a:	bf00      	nop
 8001c8c:	20000f74 	.word	0x20000f74
 8001c90:	20001078 	.word	0x20001078
 8001c94:	20000f70 	.word	0x20000f70
 8001c98:	20000fbc 	.word	0x20000fbc
 8001c9c:	20000f7c 	.word	0x20000f7c
 8001ca0:	20000fc0 	.word	0x20000fc0
 8001ca4:	20000f58 	.word	0x20000f58

08001ca8 <xTaskCreateStatic>:
	{
 8001ca8:	b530      	push	{r4, r5, lr}
 8001caa:	b087      	sub	sp, #28
 8001cac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8001cae:	b17c      	cbz	r4, 8001cd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001cb0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001cb2:	b1b5      	cbz	r5, 8001ce2 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8001cb4:	2554      	movs	r5, #84	@ 0x54
 8001cb6:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001cb8:	9d04      	ldr	r5, [sp, #16]
 8001cba:	2d54      	cmp	r5, #84	@ 0x54
 8001cbc:	d01a      	beq.n	8001cf4 <xTaskCreateStatic+0x4c>
 8001cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	e7fe      	b.n	8001cce <xTaskCreateStatic+0x26>
 8001cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8001ce0:	e7fe      	b.n	8001ce0 <xTaskCreateStatic+0x38>
 8001ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ce6:	f383 8811 	msr	BASEPRI, r3
 8001cea:	f3bf 8f6f 	isb	sy
 8001cee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8001cf2:	e7fe      	b.n	8001cf2 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001cf4:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001cf6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001cf8:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001cfa:	2402      	movs	r4, #2
 8001cfc:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001d00:	2400      	movs	r4, #0
 8001d02:	9403      	str	r4, [sp, #12]
 8001d04:	9502      	str	r5, [sp, #8]
 8001d06:	ac05      	add	r4, sp, #20
 8001d08:	9401      	str	r4, [sp, #4]
 8001d0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8001d0c:	9400      	str	r4, [sp, #0]
 8001d0e:	f7ff fe53 	bl	80019b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d12:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8001d14:	f7ff fed2 	bl	8001abc <prvAddNewTaskToReadyList>
	}
 8001d18:	9805      	ldr	r0, [sp, #20]
 8001d1a:	b007      	add	sp, #28
 8001d1c:	bd30      	pop	{r4, r5, pc}

08001d1e <xTaskCreate>:
	{
 8001d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d22:	b085      	sub	sp, #20
 8001d24:	4607      	mov	r7, r0
 8001d26:	4688      	mov	r8, r1
 8001d28:	4614      	mov	r4, r2
 8001d2a:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d2c:	0090      	lsls	r0, r2, #2
 8001d2e:	f7fe fb47 	bl	80003c0 <pvPortMalloc>
			if( pxStack != NULL )
 8001d32:	b308      	cbz	r0, 8001d78 <xTaskCreate+0x5a>
 8001d34:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001d36:	2054      	movs	r0, #84	@ 0x54
 8001d38:	f7fe fb42 	bl	80003c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001d3c:	4605      	mov	r5, r0
 8001d3e:	b1a8      	cbz	r0, 8001d6c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8001d40:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d4a:	9303      	str	r3, [sp, #12]
 8001d4c:	9002      	str	r0, [sp, #8]
 8001d4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4633      	mov	r3, r6
 8001d58:	4622      	mov	r2, r4
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	4638      	mov	r0, r7
 8001d5e:	f7ff fe2b 	bl	80019b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff feaa 	bl	8001abc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e007      	b.n	8001d7c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8001d6c:	4648      	mov	r0, r9
 8001d6e:	f7fe fba9 	bl	80004c4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295
 8001d76:	e001      	b.n	8001d7c <xTaskCreate+0x5e>
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8001d7c:	b005      	add	sp, #20
 8001d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001d84 <vTaskStartScheduler>:
{
 8001d84:	b510      	push	{r4, lr}
 8001d86:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d88:	2400      	movs	r4, #0
 8001d8a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d8c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d8e:	aa07      	add	r2, sp, #28
 8001d90:	a906      	add	r1, sp, #24
 8001d92:	a805      	add	r0, sp, #20
 8001d94:	f7fe fa4e 	bl	8000234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d98:	9b05      	ldr	r3, [sp, #20]
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	9b06      	ldr	r3, [sp, #24]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	9400      	str	r4, [sp, #0]
 8001da2:	4623      	mov	r3, r4
 8001da4:	9a07      	ldr	r2, [sp, #28]
 8001da6:	490e      	ldr	r1, [pc, #56]	@ (8001de0 <vTaskStartScheduler+0x5c>)
 8001da8:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <vTaskStartScheduler+0x60>)
 8001daa:	f7ff ff7d 	bl	8001ca8 <xTaskCreateStatic>
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <vTaskStartScheduler+0x64>)
 8001db0:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8001db2:	b190      	cbz	r0, 8001dda <vTaskStartScheduler+0x56>
 8001db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <vTaskStartScheduler+0x68>)
 8001dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <vTaskStartScheduler+0x6c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <vTaskStartScheduler+0x70>)
 8001dd4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001dd6:	f7fe fd47 	bl	8000868 <xPortStartScheduler>
}
 8001dda:	b008      	add	sp, #32
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	bf00      	nop
 8001de0:	08002c20 	.word	0x08002c20
 8001de4:	08001be9 	.word	0x08001be9
 8001de8:	20000f54 	.word	0x20000f54
 8001dec:	20000f58 	.word	0x20000f58
 8001df0:	20000f6c 	.word	0x20000f6c
 8001df4:	20000f74 	.word	0x20000f74

08001df8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001df8:	4a02      	ldr	r2, [pc, #8]	@ (8001e04 <vTaskSuspendAll+0xc>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000f50 	.word	0x20000f50

08001e08 <xTaskIncrementTick>:
{
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <xTaskIncrementTick+0xec>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d169      	bne.n	8001ee6 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e12:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <xTaskIncrementTick+0xf0>)
 8001e14:	681d      	ldr	r5, [r3, #0]
 8001e16:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001e18:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e1a:	b9c5      	cbnz	r5, 8001e4e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001e1c:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <xTaskIncrementTick+0xf4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b143      	cbz	r3, 8001e36 <xTaskIncrementTick+0x2e>
 8001e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	e7fe      	b.n	8001e34 <xTaskIncrementTick+0x2c>
 8001e36:	4a31      	ldr	r2, [pc, #196]	@ (8001efc <xTaskIncrementTick+0xf4>)
 8001e38:	6811      	ldr	r1, [r2, #0]
 8001e3a:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <xTaskIncrementTick+0xf8>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	6010      	str	r0, [r2, #0]
 8001e40:	6019      	str	r1, [r3, #0]
 8001e42:	4a30      	ldr	r2, [pc, #192]	@ (8001f04 <xTaskIncrementTick+0xfc>)
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	f7ff fd9f 	bl	800198c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f08 <xTaskIncrementTick+0x100>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	42ab      	cmp	r3, r5
 8001e54:	d93d      	bls.n	8001ed2 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8001e56:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e58:	4b2c      	ldr	r3, [pc, #176]	@ (8001f0c <xTaskIncrementTick+0x104>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <xTaskIncrementTick+0x108>)
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d900      	bls.n	8001e6e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8001e6c:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8001e6e:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <xTaskIncrementTick+0x10c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03c      	beq.n	8001ef0 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8001e76:	2701      	movs	r7, #1
	return xSwitchRequired;
 8001e78:	e03a      	b.n	8001ef0 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8001e7a:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <xTaskIncrementTick+0xf4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b343      	cbz	r3, 8001ed6 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e84:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <xTaskIncrementTick+0xf4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e8c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001e8e:	429d      	cmp	r5, r3
 8001e90:	d326      	bcc.n	8001ee0 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e92:	1d26      	adds	r6, r4, #4
 8001e94:	4630      	mov	r0, r6
 8001e96:	f7fe fb85 	bl	80005a4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e9c:	b11b      	cbz	r3, 8001ea6 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e9e:	f104 0018 	add.w	r0, r4, #24
 8001ea2:	f7fe fb7f 	bl	80005a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ea6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	491a      	ldr	r1, [pc, #104]	@ (8001f18 <xTaskIncrementTick+0x110>)
 8001eae:	6808      	ldr	r0, [r1, #0]
 8001eb0:	4302      	orrs	r2, r0
 8001eb2:	600a      	str	r2, [r1, #0]
 8001eb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eb8:	009a      	lsls	r2, r3, #2
 8001eba:	4631      	mov	r1, r6
 8001ebc:	4814      	ldr	r0, [pc, #80]	@ (8001f10 <xTaskIncrementTick+0x108>)
 8001ebe:	4410      	add	r0, r2
 8001ec0:	f7fe fb4c 	bl	800055c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <xTaskIncrementTick+0x104>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d2d4      	bcs.n	8001e7a <xTaskIncrementTick+0x72>
 8001ed0:	e7d4      	b.n	8001e7c <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8001ed2:	2700      	movs	r7, #0
 8001ed4:	e7d2      	b.n	8001e7c <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <xTaskIncrementTick+0x100>)
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	601a      	str	r2, [r3, #0]
					break;
 8001ede:	e7bb      	b.n	8001e58 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8001ee0:	4a09      	ldr	r2, [pc, #36]	@ (8001f08 <xTaskIncrementTick+0x100>)
 8001ee2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ee4:	e7b8      	b.n	8001e58 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <xTaskIncrementTick+0x114>)
 8001ee8:	6813      	ldr	r3, [r2, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001eee:	2700      	movs	r7, #0
}
 8001ef0:	4638      	mov	r0, r7
 8001ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef4:	20000f50 	.word	0x20000f50
 8001ef8:	20000f74 	.word	0x20000f74
 8001efc:	20000fc0 	.word	0x20000fc0
 8001f00:	20000fbc 	.word	0x20000fbc
 8001f04:	20000f60 	.word	0x20000f60
 8001f08:	20000f58 	.word	0x20000f58
 8001f0c:	20001078 	.word	0x20001078
 8001f10:	20000fec 	.word	0x20000fec
 8001f14:	20000f64 	.word	0x20000f64
 8001f18:	20000f70 	.word	0x20000f70
 8001f1c:	20000f68 	.word	0x20000f68

08001f20 <xTaskResumeAll>:
{
 8001f20:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8001f22:	4b35      	ldr	r3, [pc, #212]	@ (8001ff8 <xTaskResumeAll+0xd8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b943      	cbnz	r3, 8001f3a <xTaskResumeAll+0x1a>
 8001f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f2c:	f383 8811 	msr	BASEPRI, r3
 8001f30:	f3bf 8f6f 	isb	sy
 8001f34:	f3bf 8f4f 	dsb	sy
 8001f38:	e7fe      	b.n	8001f38 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8001f3a:	f7fe fc0b 	bl	8000754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <xTaskResumeAll+0xd8>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	3a01      	subs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d14f      	bne.n	8001fec <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <xTaskResumeAll+0xdc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b90b      	cbnz	r3, 8001f56 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001f52:	2400      	movs	r4, #0
 8001f54:	e04b      	b.n	8001fee <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8001f56:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f58:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <xTaskResumeAll+0xe0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b31b      	cbz	r3, 8001fa6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f5e:	4b28      	ldr	r3, [pc, #160]	@ (8002000 <xTaskResumeAll+0xe0>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f64:	f104 0018 	add.w	r0, r4, #24
 8001f68:	f7fe fb1c 	bl	80005a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f6c:	1d25      	adds	r5, r4, #4
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7fe fb18 	bl	80005a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f74:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001f76:	2301      	movs	r3, #1
 8001f78:	4083      	lsls	r3, r0
 8001f7a:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <xTaskResumeAll+0xe4>)
 8001f7c:	6811      	ldr	r1, [r2, #0]
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f86:	4629      	mov	r1, r5
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <xTaskResumeAll+0xe8>)
 8001f8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001f8e:	f7fe fae5 	bl	800055c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <xTaskResumeAll+0xec>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d3dc      	bcc.n	8001f58 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <xTaskResumeAll+0xf0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e7d8      	b.n	8001f58 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8001fa6:	b10c      	cbz	r4, 8001fac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8001fa8:	f7ff fcf0 	bl	800198c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <xTaskResumeAll+0xf4>)
 8001fae:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8001fb0:	b984      	cbnz	r4, 8001fd4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8001fb2:	4b17      	ldr	r3, [pc, #92]	@ (8002010 <xTaskResumeAll+0xf0>)
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	b1d4      	cbz	r4, 8001fee <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8001fb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001fcc:	2401      	movs	r4, #1
 8001fce:	e00e      	b.n	8001fee <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001fd0:	3c01      	subs	r4, #1
 8001fd2:	d007      	beq.n	8001fe4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8001fd4:	f7ff ff18 	bl	8001e08 <xTaskIncrementTick>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	d0f9      	beq.n	8001fd0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <xTaskResumeAll+0xf0>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e7f5      	b.n	8001fd0 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <xTaskResumeAll+0xf4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e7e2      	b.n	8001fb2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8001fec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001fee:	f7fe fbd3 	bl	8000798 <vPortExitCritical>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000f50 	.word	0x20000f50
 8001ffc:	20000f78 	.word	0x20000f78
 8002000:	20000fa8 	.word	0x20000fa8
 8002004:	20000f70 	.word	0x20000f70
 8002008:	20000fec 	.word	0x20000fec
 800200c:	20001078 	.word	0x20001078
 8002010:	20000f64 	.word	0x20000f64
 8002014:	20000f68 	.word	0x20000f68

08002018 <vTaskDelay>:
	{
 8002018:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800201a:	b1a8      	cbz	r0, 8002048 <vTaskDelay+0x30>
 800201c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <vTaskDelay+0x48>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b143      	cbz	r3, 8002036 <vTaskDelay+0x1e>
 8002024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	e7fe      	b.n	8002034 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002036:	f7ff fedf 	bl	8001df8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800203a:	2100      	movs	r1, #0
 800203c:	4620      	mov	r0, r4
 800203e:	f7ff fde7 	bl	8001c10 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002042:	f7ff ff6d 	bl	8001f20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002046:	b948      	cbnz	r0, 800205c <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8002048:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800204c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002050:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	f3bf 8f6f 	isb	sy
	}
 800205c:	bd10      	pop	{r4, pc}
 800205e:	bf00      	nop
 8002060:	20000f50 	.word	0x20000f50

08002064 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <vTaskSwitchContext+0x84>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b11b      	cbz	r3, 8002072 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800206a:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <vTaskSwitchContext+0x88>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <vTaskSwitchContext+0x88>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <vTaskSwitchContext+0x8c>)
 800207a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f1c3 031f 	rsb	r3, r3, #31
 8002086:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800208a:	008a      	lsls	r2, r1, #2
 800208c:	4919      	ldr	r1, [pc, #100]	@ (80020f4 <vTaskSwitchContext+0x90>)
 800208e:	588a      	ldr	r2, [r1, r2]
 8002090:	b942      	cbnz	r2, 80020a4 <vTaskSwitchContext+0x40>
	__asm volatile
 8002092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	e7fe      	b.n	80020a2 <vTaskSwitchContext+0x3e>
 80020a4:	4813      	ldr	r0, [pc, #76]	@ (80020f4 <vTaskSwitchContext+0x90>)
 80020a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80020aa:	008a      	lsls	r2, r1, #2
 80020ac:	4402      	add	r2, r0
 80020ae:	6851      	ldr	r1, [r2, #4]
 80020b0:	6849      	ldr	r1, [r1, #4]
 80020b2:	6051      	str	r1, [r2, #4]
 80020b4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80020b8:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80020bc:	3208      	adds	r2, #8
 80020be:	4402      	add	r2, r0
 80020c0:	4291      	cmp	r1, r2
 80020c2:	d009      	beq.n	80020d8 <vTaskSwitchContext+0x74>
 80020c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020c8:	009a      	lsls	r2, r3, #2
 80020ca:	4b0a      	ldr	r3, [pc, #40]	@ (80020f4 <vTaskSwitchContext+0x90>)
 80020cc:	4413      	add	r3, r2
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <vTaskSwitchContext+0x94>)
 80020d4:	601a      	str	r2, [r3, #0]
}
 80020d6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020d8:	6848      	ldr	r0, [r1, #4]
 80020da:	4662      	mov	r2, ip
 80020dc:	0091      	lsls	r1, r2, #2
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <vTaskSwitchContext+0x90>)
 80020e0:	440a      	add	r2, r1
 80020e2:	6050      	str	r0, [r2, #4]
 80020e4:	e7ee      	b.n	80020c4 <vTaskSwitchContext+0x60>
 80020e6:	bf00      	nop
 80020e8:	20000f50 	.word	0x20000f50
 80020ec:	20000f64 	.word	0x20000f64
 80020f0:	20000f70 	.word	0x20000f70
 80020f4:	20000fec 	.word	0x20000fec
 80020f8:	20001078 	.word	0x20001078

080020fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020fc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020fe:	480a      	ldr	r0, [pc, #40]	@ (8002128 <MX_USART1_UART_Init+0x2c>)
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <MX_USART1_UART_Init+0x30>)
 8002102:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002104:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002108:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	2300      	movs	r3, #0
 800210c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800210e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002110:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002112:	220c      	movs	r2, #12
 8002114:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002116:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002118:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211a:	f7ff fb6c 	bl	80017f6 <HAL_UART_Init>
 800211e:	b900      	cbnz	r0, 8002122 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002120:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002122:	f7fe fa7b 	bl	800061c <Error_Handler>
}
 8002126:	e7fb      	b.n	8002120 <MX_USART1_UART_Init+0x24>
 8002128:	2000107c 	.word	0x2000107c
 800212c:	40013800 	.word	0x40013800

08002130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002130:	b510      	push	{r4, lr}
 8002132:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	2300      	movs	r3, #0
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	9304      	str	r3, [sp, #16]
 800213c:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 800213e:	6802      	ldr	r2, [r0, #0]
 8002140:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_UART_MspInit+0x70>)
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002146:	b006      	add	sp, #24
 8002148:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800214a:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002154:	619a      	str	r2, [r3, #24]
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	f042 0204 	orr.w	r2, r2, #4
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002172:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002176:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	4c08      	ldr	r4, [pc, #32]	@ (80021a4 <HAL_UART_MspInit+0x74>)
 8002182:	a902      	add	r1, sp, #8
 8002184:	4620      	mov	r0, r4
 8002186:	f7fe fc57 	bl	8000a38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800218a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800218e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	a902      	add	r1, sp, #8
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fc4d 	bl	8000a38 <HAL_GPIO_Init>
}
 800219e:	e7d2      	b.n	8002146 <HAL_UART_MspInit+0x16>
 80021a0:	40013800 	.word	0x40013800
 80021a4:	40010800 	.word	0x40010800

080021a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a8:	f7ff fbee 	bl	8001988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480b      	ldr	r0, [pc, #44]	@ (80021dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021ae:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021c4:	4c09      	ldr	r4, [pc, #36]	@ (80021ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f000 f859 	bl	8002288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021d6:	f7fe fa4f 	bl	8000678 <main>
  bx lr
 80021da:	4770      	bx	lr
  ldr r0, =_sdata
 80021dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80021e4:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 80021e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80021ec:	2000120c 	.word	0x2000120c

080021f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f0:	e7fe      	b.n	80021f0 <ADC1_2_IRQHandler>

080021f2 <_vsniprintf_r>:
 80021f2:	b530      	push	{r4, r5, lr}
 80021f4:	4614      	mov	r4, r2
 80021f6:	2c00      	cmp	r4, #0
 80021f8:	4605      	mov	r5, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	b09b      	sub	sp, #108	@ 0x6c
 80021fe:	da05      	bge.n	800220c <_vsniprintf_r+0x1a>
 8002200:	238b      	movs	r3, #139	@ 0x8b
 8002202:	6003      	str	r3, [r0, #0]
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	b01b      	add	sp, #108	@ 0x6c
 800220a:	bd30      	pop	{r4, r5, pc}
 800220c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002210:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	9319      	str	r3, [sp, #100]	@ 0x64
 800221a:	bf0c      	ite	eq
 800221c:	4623      	moveq	r3, r4
 800221e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	9305      	str	r3, [sp, #20]
 8002226:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800222a:	9100      	str	r1, [sp, #0]
 800222c:	9104      	str	r1, [sp, #16]
 800222e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002232:	4669      	mov	r1, sp
 8002234:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002236:	f000 f9ad 	bl	8002594 <_svfiprintf_r>
 800223a:	1c43      	adds	r3, r0, #1
 800223c:	bfbc      	itt	lt
 800223e:	238b      	movlt	r3, #139	@ 0x8b
 8002240:	602b      	strlt	r3, [r5, #0]
 8002242:	2c00      	cmp	r4, #0
 8002244:	d0e0      	beq.n	8002208 <_vsniprintf_r+0x16>
 8002246:	2200      	movs	r2, #0
 8002248:	9b00      	ldr	r3, [sp, #0]
 800224a:	701a      	strb	r2, [r3, #0]
 800224c:	e7dc      	b.n	8002208 <_vsniprintf_r+0x16>
	...

08002250 <vsniprintf>:
 8002250:	b507      	push	{r0, r1, r2, lr}
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	460a      	mov	r2, r1
 8002258:	4601      	mov	r1, r0
 800225a:	4803      	ldr	r0, [pc, #12]	@ (8002268 <vsniprintf+0x18>)
 800225c:	6800      	ldr	r0, [r0, #0]
 800225e:	f7ff ffc8 	bl	80021f2 <_vsniprintf_r>
 8002262:	b003      	add	sp, #12
 8002264:	f85d fb04 	ldr.w	pc, [sp], #4
 8002268:	20000010 	.word	0x20000010

0800226c <memset>:
 800226c:	4603      	mov	r3, r0
 800226e:	4402      	add	r2, r0
 8002270:	4293      	cmp	r3, r2
 8002272:	d100      	bne.n	8002276 <memset+0xa>
 8002274:	4770      	bx	lr
 8002276:	f803 1b01 	strb.w	r1, [r3], #1
 800227a:	e7f9      	b.n	8002270 <memset+0x4>

0800227c <__errno>:
 800227c:	4b01      	ldr	r3, [pc, #4]	@ (8002284 <__errno+0x8>)
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000010 	.word	0x20000010

08002288 <__libc_init_array>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	2600      	movs	r6, #0
 800228c:	4d0c      	ldr	r5, [pc, #48]	@ (80022c0 <__libc_init_array+0x38>)
 800228e:	4c0d      	ldr	r4, [pc, #52]	@ (80022c4 <__libc_init_array+0x3c>)
 8002290:	1b64      	subs	r4, r4, r5
 8002292:	10a4      	asrs	r4, r4, #2
 8002294:	42a6      	cmp	r6, r4
 8002296:	d109      	bne.n	80022ac <__libc_init_array+0x24>
 8002298:	f000 fc76 	bl	8002b88 <_init>
 800229c:	2600      	movs	r6, #0
 800229e:	4d0a      	ldr	r5, [pc, #40]	@ (80022c8 <__libc_init_array+0x40>)
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <__libc_init_array+0x44>)
 80022a2:	1b64      	subs	r4, r4, r5
 80022a4:	10a4      	asrs	r4, r4, #2
 80022a6:	42a6      	cmp	r6, r4
 80022a8:	d105      	bne.n	80022b6 <__libc_init_array+0x2e>
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b0:	4798      	blx	r3
 80022b2:	3601      	adds	r6, #1
 80022b4:	e7ee      	b.n	8002294 <__libc_init_array+0xc>
 80022b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ba:	4798      	blx	r3
 80022bc:	3601      	adds	r6, #1
 80022be:	e7f2      	b.n	80022a6 <__libc_init_array+0x1e>
 80022c0:	08002c90 	.word	0x08002c90
 80022c4:	08002c90 	.word	0x08002c90
 80022c8:	08002c90 	.word	0x08002c90
 80022cc:	08002c94 	.word	0x08002c94

080022d0 <__retarget_lock_acquire_recursive>:
 80022d0:	4770      	bx	lr

080022d2 <__retarget_lock_release_recursive>:
 80022d2:	4770      	bx	lr

080022d4 <memcpy>:
 80022d4:	440a      	add	r2, r1
 80022d6:	4291      	cmp	r1, r2
 80022d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80022dc:	d100      	bne.n	80022e0 <memcpy+0xc>
 80022de:	4770      	bx	lr
 80022e0:	b510      	push	{r4, lr}
 80022e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022e6:	4291      	cmp	r1, r2
 80022e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022ec:	d1f9      	bne.n	80022e2 <memcpy+0xe>
 80022ee:	bd10      	pop	{r4, pc}

080022f0 <_free_r>:
 80022f0:	b538      	push	{r3, r4, r5, lr}
 80022f2:	4605      	mov	r5, r0
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d040      	beq.n	800237a <_free_r+0x8a>
 80022f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022fc:	1f0c      	subs	r4, r1, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	18e4      	addlt	r4, r4, r3
 8002304:	f000 f8de 	bl	80024c4 <__malloc_lock>
 8002308:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <_free_r+0x8c>)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	b933      	cbnz	r3, 800231c <_free_r+0x2c>
 800230e:	6063      	str	r3, [r4, #4]
 8002310:	6014      	str	r4, [r2, #0]
 8002312:	4628      	mov	r0, r5
 8002314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002318:	f000 b8da 	b.w	80024d0 <__malloc_unlock>
 800231c:	42a3      	cmp	r3, r4
 800231e:	d908      	bls.n	8002332 <_free_r+0x42>
 8002320:	6820      	ldr	r0, [r4, #0]
 8002322:	1821      	adds	r1, r4, r0
 8002324:	428b      	cmp	r3, r1
 8002326:	bf01      	itttt	eq
 8002328:	6819      	ldreq	r1, [r3, #0]
 800232a:	685b      	ldreq	r3, [r3, #4]
 800232c:	1809      	addeq	r1, r1, r0
 800232e:	6021      	streq	r1, [r4, #0]
 8002330:	e7ed      	b.n	800230e <_free_r+0x1e>
 8002332:	461a      	mov	r2, r3
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	b10b      	cbz	r3, 800233c <_free_r+0x4c>
 8002338:	42a3      	cmp	r3, r4
 800233a:	d9fa      	bls.n	8002332 <_free_r+0x42>
 800233c:	6811      	ldr	r1, [r2, #0]
 800233e:	1850      	adds	r0, r2, r1
 8002340:	42a0      	cmp	r0, r4
 8002342:	d10b      	bne.n	800235c <_free_r+0x6c>
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	4401      	add	r1, r0
 8002348:	1850      	adds	r0, r2, r1
 800234a:	4283      	cmp	r3, r0
 800234c:	6011      	str	r1, [r2, #0]
 800234e:	d1e0      	bne.n	8002312 <_free_r+0x22>
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4408      	add	r0, r1
 8002356:	6010      	str	r0, [r2, #0]
 8002358:	6053      	str	r3, [r2, #4]
 800235a:	e7da      	b.n	8002312 <_free_r+0x22>
 800235c:	d902      	bls.n	8002364 <_free_r+0x74>
 800235e:	230c      	movs	r3, #12
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	e7d6      	b.n	8002312 <_free_r+0x22>
 8002364:	6820      	ldr	r0, [r4, #0]
 8002366:	1821      	adds	r1, r4, r0
 8002368:	428b      	cmp	r3, r1
 800236a:	bf01      	itttt	eq
 800236c:	6819      	ldreq	r1, [r3, #0]
 800236e:	685b      	ldreq	r3, [r3, #4]
 8002370:	1809      	addeq	r1, r1, r0
 8002372:	6021      	streq	r1, [r4, #0]
 8002374:	6063      	str	r3, [r4, #4]
 8002376:	6054      	str	r4, [r2, #4]
 8002378:	e7cb      	b.n	8002312 <_free_r+0x22>
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	20001208 	.word	0x20001208

08002380 <sbrk_aligned>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	4e0f      	ldr	r6, [pc, #60]	@ (80023c0 <sbrk_aligned+0x40>)
 8002384:	460c      	mov	r4, r1
 8002386:	6831      	ldr	r1, [r6, #0]
 8002388:	4605      	mov	r5, r0
 800238a:	b911      	cbnz	r1, 8002392 <sbrk_aligned+0x12>
 800238c:	f000 fba8 	bl	8002ae0 <_sbrk_r>
 8002390:	6030      	str	r0, [r6, #0]
 8002392:	4621      	mov	r1, r4
 8002394:	4628      	mov	r0, r5
 8002396:	f000 fba3 	bl	8002ae0 <_sbrk_r>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	d103      	bne.n	80023a6 <sbrk_aligned+0x26>
 800239e:	f04f 34ff 	mov.w	r4, #4294967295
 80023a2:	4620      	mov	r0, r4
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	1cc4      	adds	r4, r0, #3
 80023a8:	f024 0403 	bic.w	r4, r4, #3
 80023ac:	42a0      	cmp	r0, r4
 80023ae:	d0f8      	beq.n	80023a2 <sbrk_aligned+0x22>
 80023b0:	1a21      	subs	r1, r4, r0
 80023b2:	4628      	mov	r0, r5
 80023b4:	f000 fb94 	bl	8002ae0 <_sbrk_r>
 80023b8:	3001      	adds	r0, #1
 80023ba:	d1f2      	bne.n	80023a2 <sbrk_aligned+0x22>
 80023bc:	e7ef      	b.n	800239e <sbrk_aligned+0x1e>
 80023be:	bf00      	nop
 80023c0:	20001204 	.word	0x20001204

080023c4 <_malloc_r>:
 80023c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023c8:	1ccd      	adds	r5, r1, #3
 80023ca:	f025 0503 	bic.w	r5, r5, #3
 80023ce:	3508      	adds	r5, #8
 80023d0:	2d0c      	cmp	r5, #12
 80023d2:	bf38      	it	cc
 80023d4:	250c      	movcc	r5, #12
 80023d6:	2d00      	cmp	r5, #0
 80023d8:	4606      	mov	r6, r0
 80023da:	db01      	blt.n	80023e0 <_malloc_r+0x1c>
 80023dc:	42a9      	cmp	r1, r5
 80023de:	d904      	bls.n	80023ea <_malloc_r+0x26>
 80023e0:	230c      	movs	r3, #12
 80023e2:	6033      	str	r3, [r6, #0]
 80023e4:	2000      	movs	r0, #0
 80023e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024c0 <_malloc_r+0xfc>
 80023ee:	f000 f869 	bl	80024c4 <__malloc_lock>
 80023f2:	f8d8 3000 	ldr.w	r3, [r8]
 80023f6:	461c      	mov	r4, r3
 80023f8:	bb44      	cbnz	r4, 800244c <_malloc_r+0x88>
 80023fa:	4629      	mov	r1, r5
 80023fc:	4630      	mov	r0, r6
 80023fe:	f7ff ffbf 	bl	8002380 <sbrk_aligned>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	4604      	mov	r4, r0
 8002406:	d158      	bne.n	80024ba <_malloc_r+0xf6>
 8002408:	f8d8 4000 	ldr.w	r4, [r8]
 800240c:	4627      	mov	r7, r4
 800240e:	2f00      	cmp	r7, #0
 8002410:	d143      	bne.n	800249a <_malloc_r+0xd6>
 8002412:	2c00      	cmp	r4, #0
 8002414:	d04b      	beq.n	80024ae <_malloc_r+0xea>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	4639      	mov	r1, r7
 800241a:	4630      	mov	r0, r6
 800241c:	eb04 0903 	add.w	r9, r4, r3
 8002420:	f000 fb5e 	bl	8002ae0 <_sbrk_r>
 8002424:	4581      	cmp	r9, r0
 8002426:	d142      	bne.n	80024ae <_malloc_r+0xea>
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	4630      	mov	r0, r6
 800242c:	1a6d      	subs	r5, r5, r1
 800242e:	4629      	mov	r1, r5
 8002430:	f7ff ffa6 	bl	8002380 <sbrk_aligned>
 8002434:	3001      	adds	r0, #1
 8002436:	d03a      	beq.n	80024ae <_malloc_r+0xea>
 8002438:	6823      	ldr	r3, [r4, #0]
 800243a:	442b      	add	r3, r5
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	f8d8 3000 	ldr.w	r3, [r8]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	bb62      	cbnz	r2, 80024a0 <_malloc_r+0xdc>
 8002446:	f8c8 7000 	str.w	r7, [r8]
 800244a:	e00f      	b.n	800246c <_malloc_r+0xa8>
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	1b52      	subs	r2, r2, r5
 8002450:	d420      	bmi.n	8002494 <_malloc_r+0xd0>
 8002452:	2a0b      	cmp	r2, #11
 8002454:	d917      	bls.n	8002486 <_malloc_r+0xc2>
 8002456:	1961      	adds	r1, r4, r5
 8002458:	42a3      	cmp	r3, r4
 800245a:	6025      	str	r5, [r4, #0]
 800245c:	bf18      	it	ne
 800245e:	6059      	strne	r1, [r3, #4]
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	bf08      	it	eq
 8002464:	f8c8 1000 	streq.w	r1, [r8]
 8002468:	5162      	str	r2, [r4, r5]
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	4630      	mov	r0, r6
 800246e:	f000 f82f 	bl	80024d0 <__malloc_unlock>
 8002472:	f104 000b 	add.w	r0, r4, #11
 8002476:	1d23      	adds	r3, r4, #4
 8002478:	f020 0007 	bic.w	r0, r0, #7
 800247c:	1ac2      	subs	r2, r0, r3
 800247e:	bf1c      	itt	ne
 8002480:	1a1b      	subne	r3, r3, r0
 8002482:	50a3      	strne	r3, [r4, r2]
 8002484:	e7af      	b.n	80023e6 <_malloc_r+0x22>
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	42a3      	cmp	r3, r4
 800248a:	bf0c      	ite	eq
 800248c:	f8c8 2000 	streq.w	r2, [r8]
 8002490:	605a      	strne	r2, [r3, #4]
 8002492:	e7eb      	b.n	800246c <_malloc_r+0xa8>
 8002494:	4623      	mov	r3, r4
 8002496:	6864      	ldr	r4, [r4, #4]
 8002498:	e7ae      	b.n	80023f8 <_malloc_r+0x34>
 800249a:	463c      	mov	r4, r7
 800249c:	687f      	ldr	r7, [r7, #4]
 800249e:	e7b6      	b.n	800240e <_malloc_r+0x4a>
 80024a0:	461a      	mov	r2, r3
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	42a3      	cmp	r3, r4
 80024a6:	d1fb      	bne.n	80024a0 <_malloc_r+0xdc>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e7de      	b.n	800246c <_malloc_r+0xa8>
 80024ae:	230c      	movs	r3, #12
 80024b0:	4630      	mov	r0, r6
 80024b2:	6033      	str	r3, [r6, #0]
 80024b4:	f000 f80c 	bl	80024d0 <__malloc_unlock>
 80024b8:	e794      	b.n	80023e4 <_malloc_r+0x20>
 80024ba:	6005      	str	r5, [r0, #0]
 80024bc:	e7d6      	b.n	800246c <_malloc_r+0xa8>
 80024be:	bf00      	nop
 80024c0:	20001208 	.word	0x20001208

080024c4 <__malloc_lock>:
 80024c4:	4801      	ldr	r0, [pc, #4]	@ (80024cc <__malloc_lock+0x8>)
 80024c6:	f7ff bf03 	b.w	80022d0 <__retarget_lock_acquire_recursive>
 80024ca:	bf00      	nop
 80024cc:	20001200 	.word	0x20001200

080024d0 <__malloc_unlock>:
 80024d0:	4801      	ldr	r0, [pc, #4]	@ (80024d8 <__malloc_unlock+0x8>)
 80024d2:	f7ff befe 	b.w	80022d2 <__retarget_lock_release_recursive>
 80024d6:	bf00      	nop
 80024d8:	20001200 	.word	0x20001200

080024dc <__ssputs_r>:
 80024dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024e0:	461f      	mov	r7, r3
 80024e2:	688e      	ldr	r6, [r1, #8]
 80024e4:	4682      	mov	sl, r0
 80024e6:	42be      	cmp	r6, r7
 80024e8:	460c      	mov	r4, r1
 80024ea:	4690      	mov	r8, r2
 80024ec:	680b      	ldr	r3, [r1, #0]
 80024ee:	d82d      	bhi.n	800254c <__ssputs_r+0x70>
 80024f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80024f8:	d026      	beq.n	8002548 <__ssputs_r+0x6c>
 80024fa:	6965      	ldr	r5, [r4, #20]
 80024fc:	6909      	ldr	r1, [r1, #16]
 80024fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002502:	eba3 0901 	sub.w	r9, r3, r1
 8002506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800250a:	1c7b      	adds	r3, r7, #1
 800250c:	444b      	add	r3, r9
 800250e:	106d      	asrs	r5, r5, #1
 8002510:	429d      	cmp	r5, r3
 8002512:	bf38      	it	cc
 8002514:	461d      	movcc	r5, r3
 8002516:	0553      	lsls	r3, r2, #21
 8002518:	d527      	bpl.n	800256a <__ssputs_r+0x8e>
 800251a:	4629      	mov	r1, r5
 800251c:	f7ff ff52 	bl	80023c4 <_malloc_r>
 8002520:	4606      	mov	r6, r0
 8002522:	b360      	cbz	r0, 800257e <__ssputs_r+0xa2>
 8002524:	464a      	mov	r2, r9
 8002526:	6921      	ldr	r1, [r4, #16]
 8002528:	f7ff fed4 	bl	80022d4 <memcpy>
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002536:	81a3      	strh	r3, [r4, #12]
 8002538:	6126      	str	r6, [r4, #16]
 800253a:	444e      	add	r6, r9
 800253c:	6026      	str	r6, [r4, #0]
 800253e:	463e      	mov	r6, r7
 8002540:	6165      	str	r5, [r4, #20]
 8002542:	eba5 0509 	sub.w	r5, r5, r9
 8002546:	60a5      	str	r5, [r4, #8]
 8002548:	42be      	cmp	r6, r7
 800254a:	d900      	bls.n	800254e <__ssputs_r+0x72>
 800254c:	463e      	mov	r6, r7
 800254e:	4632      	mov	r2, r6
 8002550:	4641      	mov	r1, r8
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	f000 faaa 	bl	8002aac <memmove>
 8002558:	2000      	movs	r0, #0
 800255a:	68a3      	ldr	r3, [r4, #8]
 800255c:	1b9b      	subs	r3, r3, r6
 800255e:	60a3      	str	r3, [r4, #8]
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	4433      	add	r3, r6
 8002564:	6023      	str	r3, [r4, #0]
 8002566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800256a:	462a      	mov	r2, r5
 800256c:	f000 fad6 	bl	8002b1c <_realloc_r>
 8002570:	4606      	mov	r6, r0
 8002572:	2800      	cmp	r0, #0
 8002574:	d1e0      	bne.n	8002538 <__ssputs_r+0x5c>
 8002576:	4650      	mov	r0, sl
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	f7ff feb9 	bl	80022f0 <_free_r>
 800257e:	230c      	movs	r3, #12
 8002580:	f8ca 3000 	str.w	r3, [sl]
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	f04f 30ff 	mov.w	r0, #4294967295
 800258a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	e7e9      	b.n	8002566 <__ssputs_r+0x8a>
	...

08002594 <_svfiprintf_r>:
 8002594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002598:	4698      	mov	r8, r3
 800259a:	898b      	ldrh	r3, [r1, #12]
 800259c:	4607      	mov	r7, r0
 800259e:	061b      	lsls	r3, r3, #24
 80025a0:	460d      	mov	r5, r1
 80025a2:	4614      	mov	r4, r2
 80025a4:	b09d      	sub	sp, #116	@ 0x74
 80025a6:	d510      	bpl.n	80025ca <_svfiprintf_r+0x36>
 80025a8:	690b      	ldr	r3, [r1, #16]
 80025aa:	b973      	cbnz	r3, 80025ca <_svfiprintf_r+0x36>
 80025ac:	2140      	movs	r1, #64	@ 0x40
 80025ae:	f7ff ff09 	bl	80023c4 <_malloc_r>
 80025b2:	6028      	str	r0, [r5, #0]
 80025b4:	6128      	str	r0, [r5, #16]
 80025b6:	b930      	cbnz	r0, 80025c6 <_svfiprintf_r+0x32>
 80025b8:	230c      	movs	r3, #12
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	b01d      	add	sp, #116	@ 0x74
 80025c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c6:	2340      	movs	r3, #64	@ 0x40
 80025c8:	616b      	str	r3, [r5, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025ce:	2320      	movs	r3, #32
 80025d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80025d4:	2330      	movs	r3, #48	@ 0x30
 80025d6:	f04f 0901 	mov.w	r9, #1
 80025da:	f8cd 800c 	str.w	r8, [sp, #12]
 80025de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002778 <_svfiprintf_r+0x1e4>
 80025e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025e6:	4623      	mov	r3, r4
 80025e8:	469a      	mov	sl, r3
 80025ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ee:	b10a      	cbz	r2, 80025f4 <_svfiprintf_r+0x60>
 80025f0:	2a25      	cmp	r2, #37	@ 0x25
 80025f2:	d1f9      	bne.n	80025e8 <_svfiprintf_r+0x54>
 80025f4:	ebba 0b04 	subs.w	fp, sl, r4
 80025f8:	d00b      	beq.n	8002612 <_svfiprintf_r+0x7e>
 80025fa:	465b      	mov	r3, fp
 80025fc:	4622      	mov	r2, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	4638      	mov	r0, r7
 8002602:	f7ff ff6b 	bl	80024dc <__ssputs_r>
 8002606:	3001      	adds	r0, #1
 8002608:	f000 80a7 	beq.w	800275a <_svfiprintf_r+0x1c6>
 800260c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800260e:	445a      	add	r2, fp
 8002610:	9209      	str	r2, [sp, #36]	@ 0x24
 8002612:	f89a 3000 	ldrb.w	r3, [sl]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 809f 	beq.w	800275a <_svfiprintf_r+0x1c6>
 800261c:	2300      	movs	r3, #0
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002626:	f10a 0a01 	add.w	sl, sl, #1
 800262a:	9304      	str	r3, [sp, #16]
 800262c:	9307      	str	r3, [sp, #28]
 800262e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002632:	931a      	str	r3, [sp, #104]	@ 0x68
 8002634:	4654      	mov	r4, sl
 8002636:	2205      	movs	r2, #5
 8002638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800263c:	484e      	ldr	r0, [pc, #312]	@ (8002778 <_svfiprintf_r+0x1e4>)
 800263e:	f000 fa5f 	bl	8002b00 <memchr>
 8002642:	9a04      	ldr	r2, [sp, #16]
 8002644:	b9d8      	cbnz	r0, 800267e <_svfiprintf_r+0xea>
 8002646:	06d0      	lsls	r0, r2, #27
 8002648:	bf44      	itt	mi
 800264a:	2320      	movmi	r3, #32
 800264c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002650:	0711      	lsls	r1, r2, #28
 8002652:	bf44      	itt	mi
 8002654:	232b      	movmi	r3, #43	@ 0x2b
 8002656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800265a:	f89a 3000 	ldrb.w	r3, [sl]
 800265e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002660:	d015      	beq.n	800268e <_svfiprintf_r+0xfa>
 8002662:	4654      	mov	r4, sl
 8002664:	2000      	movs	r0, #0
 8002666:	f04f 0c0a 	mov.w	ip, #10
 800266a:	9a07      	ldr	r2, [sp, #28]
 800266c:	4621      	mov	r1, r4
 800266e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002672:	3b30      	subs	r3, #48	@ 0x30
 8002674:	2b09      	cmp	r3, #9
 8002676:	d94b      	bls.n	8002710 <_svfiprintf_r+0x17c>
 8002678:	b1b0      	cbz	r0, 80026a8 <_svfiprintf_r+0x114>
 800267a:	9207      	str	r2, [sp, #28]
 800267c:	e014      	b.n	80026a8 <_svfiprintf_r+0x114>
 800267e:	eba0 0308 	sub.w	r3, r0, r8
 8002682:	fa09 f303 	lsl.w	r3, r9, r3
 8002686:	4313      	orrs	r3, r2
 8002688:	46a2      	mov	sl, r4
 800268a:	9304      	str	r3, [sp, #16]
 800268c:	e7d2      	b.n	8002634 <_svfiprintf_r+0xa0>
 800268e:	9b03      	ldr	r3, [sp, #12]
 8002690:	1d19      	adds	r1, r3, #4
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	9103      	str	r1, [sp, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	bfbb      	ittet	lt
 800269a:	425b      	neglt	r3, r3
 800269c:	f042 0202 	orrlt.w	r2, r2, #2
 80026a0:	9307      	strge	r3, [sp, #28]
 80026a2:	9307      	strlt	r3, [sp, #28]
 80026a4:	bfb8      	it	lt
 80026a6:	9204      	strlt	r2, [sp, #16]
 80026a8:	7823      	ldrb	r3, [r4, #0]
 80026aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80026ac:	d10a      	bne.n	80026c4 <_svfiprintf_r+0x130>
 80026ae:	7863      	ldrb	r3, [r4, #1]
 80026b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026b2:	d132      	bne.n	800271a <_svfiprintf_r+0x186>
 80026b4:	9b03      	ldr	r3, [sp, #12]
 80026b6:	3402      	adds	r4, #2
 80026b8:	1d1a      	adds	r2, r3, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	9203      	str	r2, [sp, #12]
 80026be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026c2:	9305      	str	r3, [sp, #20]
 80026c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800277c <_svfiprintf_r+0x1e8>
 80026c8:	2203      	movs	r2, #3
 80026ca:	4650      	mov	r0, sl
 80026cc:	7821      	ldrb	r1, [r4, #0]
 80026ce:	f000 fa17 	bl	8002b00 <memchr>
 80026d2:	b138      	cbz	r0, 80026e4 <_svfiprintf_r+0x150>
 80026d4:	2240      	movs	r2, #64	@ 0x40
 80026d6:	9b04      	ldr	r3, [sp, #16]
 80026d8:	eba0 000a 	sub.w	r0, r0, sl
 80026dc:	4082      	lsls	r2, r0
 80026de:	4313      	orrs	r3, r2
 80026e0:	3401      	adds	r4, #1
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026e8:	2206      	movs	r2, #6
 80026ea:	4825      	ldr	r0, [pc, #148]	@ (8002780 <_svfiprintf_r+0x1ec>)
 80026ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026f0:	f000 fa06 	bl	8002b00 <memchr>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d036      	beq.n	8002766 <_svfiprintf_r+0x1d2>
 80026f8:	4b22      	ldr	r3, [pc, #136]	@ (8002784 <_svfiprintf_r+0x1f0>)
 80026fa:	bb1b      	cbnz	r3, 8002744 <_svfiprintf_r+0x1b0>
 80026fc:	9b03      	ldr	r3, [sp, #12]
 80026fe:	3307      	adds	r3, #7
 8002700:	f023 0307 	bic.w	r3, r3, #7
 8002704:	3308      	adds	r3, #8
 8002706:	9303      	str	r3, [sp, #12]
 8002708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800270a:	4433      	add	r3, r6
 800270c:	9309      	str	r3, [sp, #36]	@ 0x24
 800270e:	e76a      	b.n	80025e6 <_svfiprintf_r+0x52>
 8002710:	460c      	mov	r4, r1
 8002712:	2001      	movs	r0, #1
 8002714:	fb0c 3202 	mla	r2, ip, r2, r3
 8002718:	e7a8      	b.n	800266c <_svfiprintf_r+0xd8>
 800271a:	2300      	movs	r3, #0
 800271c:	f04f 0c0a 	mov.w	ip, #10
 8002720:	4619      	mov	r1, r3
 8002722:	3401      	adds	r4, #1
 8002724:	9305      	str	r3, [sp, #20]
 8002726:	4620      	mov	r0, r4
 8002728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800272c:	3a30      	subs	r2, #48	@ 0x30
 800272e:	2a09      	cmp	r2, #9
 8002730:	d903      	bls.n	800273a <_svfiprintf_r+0x1a6>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0c6      	beq.n	80026c4 <_svfiprintf_r+0x130>
 8002736:	9105      	str	r1, [sp, #20]
 8002738:	e7c4      	b.n	80026c4 <_svfiprintf_r+0x130>
 800273a:	4604      	mov	r4, r0
 800273c:	2301      	movs	r3, #1
 800273e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002742:	e7f0      	b.n	8002726 <_svfiprintf_r+0x192>
 8002744:	ab03      	add	r3, sp, #12
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	462a      	mov	r2, r5
 800274a:	4638      	mov	r0, r7
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <_svfiprintf_r+0x1f4>)
 800274e:	a904      	add	r1, sp, #16
 8002750:	f3af 8000 	nop.w
 8002754:	1c42      	adds	r2, r0, #1
 8002756:	4606      	mov	r6, r0
 8002758:	d1d6      	bne.n	8002708 <_svfiprintf_r+0x174>
 800275a:	89ab      	ldrh	r3, [r5, #12]
 800275c:	065b      	lsls	r3, r3, #25
 800275e:	f53f af2d 	bmi.w	80025bc <_svfiprintf_r+0x28>
 8002762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002764:	e72c      	b.n	80025c0 <_svfiprintf_r+0x2c>
 8002766:	ab03      	add	r3, sp, #12
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	462a      	mov	r2, r5
 800276c:	4638      	mov	r0, r7
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <_svfiprintf_r+0x1f4>)
 8002770:	a904      	add	r1, sp, #16
 8002772:	f000 f87d 	bl	8002870 <_printf_i>
 8002776:	e7ed      	b.n	8002754 <_svfiprintf_r+0x1c0>
 8002778:	08002c54 	.word	0x08002c54
 800277c:	08002c5a 	.word	0x08002c5a
 8002780:	08002c5e 	.word	0x08002c5e
 8002784:	00000000 	.word	0x00000000
 8002788:	080024dd 	.word	0x080024dd

0800278c <_printf_common>:
 800278c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002790:	4616      	mov	r6, r2
 8002792:	4698      	mov	r8, r3
 8002794:	688a      	ldr	r2, [r1, #8]
 8002796:	690b      	ldr	r3, [r1, #16]
 8002798:	4607      	mov	r7, r0
 800279a:	4293      	cmp	r3, r2
 800279c:	bfb8      	it	lt
 800279e:	4613      	movlt	r3, r2
 80027a0:	6033      	str	r3, [r6, #0]
 80027a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027a6:	460c      	mov	r4, r1
 80027a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027ac:	b10a      	cbz	r2, 80027b2 <_printf_common+0x26>
 80027ae:	3301      	adds	r3, #1
 80027b0:	6033      	str	r3, [r6, #0]
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	0699      	lsls	r1, r3, #26
 80027b6:	bf42      	ittt	mi
 80027b8:	6833      	ldrmi	r3, [r6, #0]
 80027ba:	3302      	addmi	r3, #2
 80027bc:	6033      	strmi	r3, [r6, #0]
 80027be:	6825      	ldr	r5, [r4, #0]
 80027c0:	f015 0506 	ands.w	r5, r5, #6
 80027c4:	d106      	bne.n	80027d4 <_printf_common+0x48>
 80027c6:	f104 0a19 	add.w	sl, r4, #25
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	6832      	ldr	r2, [r6, #0]
 80027ce:	1a9b      	subs	r3, r3, r2
 80027d0:	42ab      	cmp	r3, r5
 80027d2:	dc2b      	bgt.n	800282c <_printf_common+0xa0>
 80027d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027d8:	6822      	ldr	r2, [r4, #0]
 80027da:	3b00      	subs	r3, #0
 80027dc:	bf18      	it	ne
 80027de:	2301      	movne	r3, #1
 80027e0:	0692      	lsls	r2, r2, #26
 80027e2:	d430      	bmi.n	8002846 <_printf_common+0xba>
 80027e4:	4641      	mov	r1, r8
 80027e6:	4638      	mov	r0, r7
 80027e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027ec:	47c8      	blx	r9
 80027ee:	3001      	adds	r0, #1
 80027f0:	d023      	beq.n	800283a <_printf_common+0xae>
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	6922      	ldr	r2, [r4, #16]
 80027f6:	f003 0306 	and.w	r3, r3, #6
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf14      	ite	ne
 80027fe:	2500      	movne	r5, #0
 8002800:	6833      	ldreq	r3, [r6, #0]
 8002802:	f04f 0600 	mov.w	r6, #0
 8002806:	bf08      	it	eq
 8002808:	68e5      	ldreq	r5, [r4, #12]
 800280a:	f104 041a 	add.w	r4, r4, #26
 800280e:	bf08      	it	eq
 8002810:	1aed      	subeq	r5, r5, r3
 8002812:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002816:	bf08      	it	eq
 8002818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800281c:	4293      	cmp	r3, r2
 800281e:	bfc4      	itt	gt
 8002820:	1a9b      	subgt	r3, r3, r2
 8002822:	18ed      	addgt	r5, r5, r3
 8002824:	42b5      	cmp	r5, r6
 8002826:	d11a      	bne.n	800285e <_printf_common+0xd2>
 8002828:	2000      	movs	r0, #0
 800282a:	e008      	b.n	800283e <_printf_common+0xb2>
 800282c:	2301      	movs	r3, #1
 800282e:	4652      	mov	r2, sl
 8002830:	4641      	mov	r1, r8
 8002832:	4638      	mov	r0, r7
 8002834:	47c8      	blx	r9
 8002836:	3001      	adds	r0, #1
 8002838:	d103      	bne.n	8002842 <_printf_common+0xb6>
 800283a:	f04f 30ff 	mov.w	r0, #4294967295
 800283e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002842:	3501      	adds	r5, #1
 8002844:	e7c1      	b.n	80027ca <_printf_common+0x3e>
 8002846:	2030      	movs	r0, #48	@ 0x30
 8002848:	18e1      	adds	r1, r4, r3
 800284a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002854:	4422      	add	r2, r4
 8002856:	3302      	adds	r3, #2
 8002858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800285c:	e7c2      	b.n	80027e4 <_printf_common+0x58>
 800285e:	2301      	movs	r3, #1
 8002860:	4622      	mov	r2, r4
 8002862:	4641      	mov	r1, r8
 8002864:	4638      	mov	r0, r7
 8002866:	47c8      	blx	r9
 8002868:	3001      	adds	r0, #1
 800286a:	d0e6      	beq.n	800283a <_printf_common+0xae>
 800286c:	3601      	adds	r6, #1
 800286e:	e7d9      	b.n	8002824 <_printf_common+0x98>

08002870 <_printf_i>:
 8002870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002874:	7e0f      	ldrb	r7, [r1, #24]
 8002876:	4691      	mov	r9, r2
 8002878:	2f78      	cmp	r7, #120	@ 0x78
 800287a:	4680      	mov	r8, r0
 800287c:	460c      	mov	r4, r1
 800287e:	469a      	mov	sl, r3
 8002880:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002886:	d807      	bhi.n	8002898 <_printf_i+0x28>
 8002888:	2f62      	cmp	r7, #98	@ 0x62
 800288a:	d80a      	bhi.n	80028a2 <_printf_i+0x32>
 800288c:	2f00      	cmp	r7, #0
 800288e:	f000 80d1 	beq.w	8002a34 <_printf_i+0x1c4>
 8002892:	2f58      	cmp	r7, #88	@ 0x58
 8002894:	f000 80b8 	beq.w	8002a08 <_printf_i+0x198>
 8002898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800289c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028a0:	e03a      	b.n	8002918 <_printf_i+0xa8>
 80028a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028a6:	2b15      	cmp	r3, #21
 80028a8:	d8f6      	bhi.n	8002898 <_printf_i+0x28>
 80028aa:	a101      	add	r1, pc, #4	@ (adr r1, 80028b0 <_printf_i+0x40>)
 80028ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028b0:	08002909 	.word	0x08002909
 80028b4:	0800291d 	.word	0x0800291d
 80028b8:	08002899 	.word	0x08002899
 80028bc:	08002899 	.word	0x08002899
 80028c0:	08002899 	.word	0x08002899
 80028c4:	08002899 	.word	0x08002899
 80028c8:	0800291d 	.word	0x0800291d
 80028cc:	08002899 	.word	0x08002899
 80028d0:	08002899 	.word	0x08002899
 80028d4:	08002899 	.word	0x08002899
 80028d8:	08002899 	.word	0x08002899
 80028dc:	08002a1b 	.word	0x08002a1b
 80028e0:	08002947 	.word	0x08002947
 80028e4:	080029d5 	.word	0x080029d5
 80028e8:	08002899 	.word	0x08002899
 80028ec:	08002899 	.word	0x08002899
 80028f0:	08002a3d 	.word	0x08002a3d
 80028f4:	08002899 	.word	0x08002899
 80028f8:	08002947 	.word	0x08002947
 80028fc:	08002899 	.word	0x08002899
 8002900:	08002899 	.word	0x08002899
 8002904:	080029dd 	.word	0x080029dd
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6032      	str	r2, [r6, #0]
 8002910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002918:	2301      	movs	r3, #1
 800291a:	e09c      	b.n	8002a56 <_printf_i+0x1e6>
 800291c:	6833      	ldr	r3, [r6, #0]
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	1d19      	adds	r1, r3, #4
 8002922:	6031      	str	r1, [r6, #0]
 8002924:	0606      	lsls	r6, r0, #24
 8002926:	d501      	bpl.n	800292c <_printf_i+0xbc>
 8002928:	681d      	ldr	r5, [r3, #0]
 800292a:	e003      	b.n	8002934 <_printf_i+0xc4>
 800292c:	0645      	lsls	r5, r0, #25
 800292e:	d5fb      	bpl.n	8002928 <_printf_i+0xb8>
 8002930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002934:	2d00      	cmp	r5, #0
 8002936:	da03      	bge.n	8002940 <_printf_i+0xd0>
 8002938:	232d      	movs	r3, #45	@ 0x2d
 800293a:	426d      	negs	r5, r5
 800293c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002940:	230a      	movs	r3, #10
 8002942:	4858      	ldr	r0, [pc, #352]	@ (8002aa4 <_printf_i+0x234>)
 8002944:	e011      	b.n	800296a <_printf_i+0xfa>
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	6833      	ldr	r3, [r6, #0]
 800294a:	0608      	lsls	r0, r1, #24
 800294c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002950:	d402      	bmi.n	8002958 <_printf_i+0xe8>
 8002952:	0649      	lsls	r1, r1, #25
 8002954:	bf48      	it	mi
 8002956:	b2ad      	uxthmi	r5, r5
 8002958:	2f6f      	cmp	r7, #111	@ 0x6f
 800295a:	6033      	str	r3, [r6, #0]
 800295c:	bf14      	ite	ne
 800295e:	230a      	movne	r3, #10
 8002960:	2308      	moveq	r3, #8
 8002962:	4850      	ldr	r0, [pc, #320]	@ (8002aa4 <_printf_i+0x234>)
 8002964:	2100      	movs	r1, #0
 8002966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800296a:	6866      	ldr	r6, [r4, #4]
 800296c:	2e00      	cmp	r6, #0
 800296e:	60a6      	str	r6, [r4, #8]
 8002970:	db05      	blt.n	800297e <_printf_i+0x10e>
 8002972:	6821      	ldr	r1, [r4, #0]
 8002974:	432e      	orrs	r6, r5
 8002976:	f021 0104 	bic.w	r1, r1, #4
 800297a:	6021      	str	r1, [r4, #0]
 800297c:	d04b      	beq.n	8002a16 <_printf_i+0x1a6>
 800297e:	4616      	mov	r6, r2
 8002980:	fbb5 f1f3 	udiv	r1, r5, r3
 8002984:	fb03 5711 	mls	r7, r3, r1, r5
 8002988:	5dc7      	ldrb	r7, [r0, r7]
 800298a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800298e:	462f      	mov	r7, r5
 8002990:	42bb      	cmp	r3, r7
 8002992:	460d      	mov	r5, r1
 8002994:	d9f4      	bls.n	8002980 <_printf_i+0x110>
 8002996:	2b08      	cmp	r3, #8
 8002998:	d10b      	bne.n	80029b2 <_printf_i+0x142>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	07df      	lsls	r7, r3, #31
 800299e:	d508      	bpl.n	80029b2 <_printf_i+0x142>
 80029a0:	6923      	ldr	r3, [r4, #16]
 80029a2:	6861      	ldr	r1, [r4, #4]
 80029a4:	4299      	cmp	r1, r3
 80029a6:	bfde      	ittt	le
 80029a8:	2330      	movle	r3, #48	@ 0x30
 80029aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029b2:	1b92      	subs	r2, r2, r6
 80029b4:	6122      	str	r2, [r4, #16]
 80029b6:	464b      	mov	r3, r9
 80029b8:	4621      	mov	r1, r4
 80029ba:	4640      	mov	r0, r8
 80029bc:	f8cd a000 	str.w	sl, [sp]
 80029c0:	aa03      	add	r2, sp, #12
 80029c2:	f7ff fee3 	bl	800278c <_printf_common>
 80029c6:	3001      	adds	r0, #1
 80029c8:	d14a      	bne.n	8002a60 <_printf_i+0x1f0>
 80029ca:	f04f 30ff 	mov.w	r0, #4294967295
 80029ce:	b004      	add	sp, #16
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	2778      	movs	r7, #120	@ 0x78
 80029de:	4832      	ldr	r0, [pc, #200]	@ (8002aa8 <_printf_i+0x238>)
 80029e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	6831      	ldr	r1, [r6, #0]
 80029e8:	061f      	lsls	r7, r3, #24
 80029ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80029ee:	d402      	bmi.n	80029f6 <_printf_i+0x186>
 80029f0:	065f      	lsls	r7, r3, #25
 80029f2:	bf48      	it	mi
 80029f4:	b2ad      	uxthmi	r5, r5
 80029f6:	6031      	str	r1, [r6, #0]
 80029f8:	07d9      	lsls	r1, r3, #31
 80029fa:	bf44      	itt	mi
 80029fc:	f043 0320 	orrmi.w	r3, r3, #32
 8002a00:	6023      	strmi	r3, [r4, #0]
 8002a02:	b11d      	cbz	r5, 8002a0c <_printf_i+0x19c>
 8002a04:	2310      	movs	r3, #16
 8002a06:	e7ad      	b.n	8002964 <_printf_i+0xf4>
 8002a08:	4826      	ldr	r0, [pc, #152]	@ (8002aa4 <_printf_i+0x234>)
 8002a0a:	e7e9      	b.n	80029e0 <_printf_i+0x170>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	f023 0320 	bic.w	r3, r3, #32
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	e7f6      	b.n	8002a04 <_printf_i+0x194>
 8002a16:	4616      	mov	r6, r2
 8002a18:	e7bd      	b.n	8002996 <_printf_i+0x126>
 8002a1a:	6833      	ldr	r3, [r6, #0]
 8002a1c:	6825      	ldr	r5, [r4, #0]
 8002a1e:	1d18      	adds	r0, r3, #4
 8002a20:	6961      	ldr	r1, [r4, #20]
 8002a22:	6030      	str	r0, [r6, #0]
 8002a24:	062e      	lsls	r6, r5, #24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	d501      	bpl.n	8002a2e <_printf_i+0x1be>
 8002a2a:	6019      	str	r1, [r3, #0]
 8002a2c:	e002      	b.n	8002a34 <_printf_i+0x1c4>
 8002a2e:	0668      	lsls	r0, r5, #25
 8002a30:	d5fb      	bpl.n	8002a2a <_printf_i+0x1ba>
 8002a32:	8019      	strh	r1, [r3, #0]
 8002a34:	2300      	movs	r3, #0
 8002a36:	4616      	mov	r6, r2
 8002a38:	6123      	str	r3, [r4, #16]
 8002a3a:	e7bc      	b.n	80029b6 <_printf_i+0x146>
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	1d1a      	adds	r2, r3, #4
 8002a42:	6032      	str	r2, [r6, #0]
 8002a44:	681e      	ldr	r6, [r3, #0]
 8002a46:	6862      	ldr	r2, [r4, #4]
 8002a48:	4630      	mov	r0, r6
 8002a4a:	f000 f859 	bl	8002b00 <memchr>
 8002a4e:	b108      	cbz	r0, 8002a54 <_printf_i+0x1e4>
 8002a50:	1b80      	subs	r0, r0, r6
 8002a52:	6060      	str	r0, [r4, #4]
 8002a54:	6863      	ldr	r3, [r4, #4]
 8002a56:	6123      	str	r3, [r4, #16]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a5e:	e7aa      	b.n	80029b6 <_printf_i+0x146>
 8002a60:	4632      	mov	r2, r6
 8002a62:	4649      	mov	r1, r9
 8002a64:	4640      	mov	r0, r8
 8002a66:	6923      	ldr	r3, [r4, #16]
 8002a68:	47d0      	blx	sl
 8002a6a:	3001      	adds	r0, #1
 8002a6c:	d0ad      	beq.n	80029ca <_printf_i+0x15a>
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	079b      	lsls	r3, r3, #30
 8002a72:	d413      	bmi.n	8002a9c <_printf_i+0x22c>
 8002a74:	68e0      	ldr	r0, [r4, #12]
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	4298      	cmp	r0, r3
 8002a7a:	bfb8      	it	lt
 8002a7c:	4618      	movlt	r0, r3
 8002a7e:	e7a6      	b.n	80029ce <_printf_i+0x15e>
 8002a80:	2301      	movs	r3, #1
 8002a82:	4632      	mov	r2, r6
 8002a84:	4649      	mov	r1, r9
 8002a86:	4640      	mov	r0, r8
 8002a88:	47d0      	blx	sl
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d09d      	beq.n	80029ca <_printf_i+0x15a>
 8002a8e:	3501      	adds	r5, #1
 8002a90:	68e3      	ldr	r3, [r4, #12]
 8002a92:	9903      	ldr	r1, [sp, #12]
 8002a94:	1a5b      	subs	r3, r3, r1
 8002a96:	42ab      	cmp	r3, r5
 8002a98:	dcf2      	bgt.n	8002a80 <_printf_i+0x210>
 8002a9a:	e7eb      	b.n	8002a74 <_printf_i+0x204>
 8002a9c:	2500      	movs	r5, #0
 8002a9e:	f104 0619 	add.w	r6, r4, #25
 8002aa2:	e7f5      	b.n	8002a90 <_printf_i+0x220>
 8002aa4:	08002c65 	.word	0x08002c65
 8002aa8:	08002c76 	.word	0x08002c76

08002aac <memmove>:
 8002aac:	4288      	cmp	r0, r1
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	eb01 0402 	add.w	r4, r1, r2
 8002ab4:	d902      	bls.n	8002abc <memmove+0x10>
 8002ab6:	4284      	cmp	r4, r0
 8002ab8:	4623      	mov	r3, r4
 8002aba:	d807      	bhi.n	8002acc <memmove+0x20>
 8002abc:	1e43      	subs	r3, r0, #1
 8002abe:	42a1      	cmp	r1, r4
 8002ac0:	d008      	beq.n	8002ad4 <memmove+0x28>
 8002ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002aca:	e7f8      	b.n	8002abe <memmove+0x12>
 8002acc:	4601      	mov	r1, r0
 8002ace:	4402      	add	r2, r0
 8002ad0:	428a      	cmp	r2, r1
 8002ad2:	d100      	bne.n	8002ad6 <memmove+0x2a>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ade:	e7f7      	b.n	8002ad0 <memmove+0x24>

08002ae0 <_sbrk_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	4d05      	ldr	r5, [pc, #20]	@ (8002afc <_sbrk_r+0x1c>)
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4608      	mov	r0, r1
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	f7fe ff28 	bl	8001940 <_sbrk>
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d102      	bne.n	8002afa <_sbrk_r+0x1a>
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	b103      	cbz	r3, 8002afa <_sbrk_r+0x1a>
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	200011fc 	.word	0x200011fc

08002b00 <memchr>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	b510      	push	{r4, lr}
 8002b04:	b2c9      	uxtb	r1, r1
 8002b06:	4402      	add	r2, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	d101      	bne.n	8002b12 <memchr+0x12>
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e003      	b.n	8002b1a <memchr+0x1a>
 8002b12:	7804      	ldrb	r4, [r0, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	428c      	cmp	r4, r1
 8002b18:	d1f6      	bne.n	8002b08 <memchr+0x8>
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <_realloc_r>:
 8002b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b20:	4607      	mov	r7, r0
 8002b22:	4614      	mov	r4, r2
 8002b24:	460d      	mov	r5, r1
 8002b26:	b921      	cbnz	r1, 8002b32 <_realloc_r+0x16>
 8002b28:	4611      	mov	r1, r2
 8002b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2e:	f7ff bc49 	b.w	80023c4 <_malloc_r>
 8002b32:	b92a      	cbnz	r2, 8002b40 <_realloc_r+0x24>
 8002b34:	f7ff fbdc 	bl	80022f0 <_free_r>
 8002b38:	4625      	mov	r5, r4
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b40:	f000 f81a 	bl	8002b78 <_malloc_usable_size_r>
 8002b44:	4284      	cmp	r4, r0
 8002b46:	4606      	mov	r6, r0
 8002b48:	d802      	bhi.n	8002b50 <_realloc_r+0x34>
 8002b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b4e:	d8f4      	bhi.n	8002b3a <_realloc_r+0x1e>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4638      	mov	r0, r7
 8002b54:	f7ff fc36 	bl	80023c4 <_malloc_r>
 8002b58:	4680      	mov	r8, r0
 8002b5a:	b908      	cbnz	r0, 8002b60 <_realloc_r+0x44>
 8002b5c:	4645      	mov	r5, r8
 8002b5e:	e7ec      	b.n	8002b3a <_realloc_r+0x1e>
 8002b60:	42b4      	cmp	r4, r6
 8002b62:	4622      	mov	r2, r4
 8002b64:	4629      	mov	r1, r5
 8002b66:	bf28      	it	cs
 8002b68:	4632      	movcs	r2, r6
 8002b6a:	f7ff fbb3 	bl	80022d4 <memcpy>
 8002b6e:	4629      	mov	r1, r5
 8002b70:	4638      	mov	r0, r7
 8002b72:	f7ff fbbd 	bl	80022f0 <_free_r>
 8002b76:	e7f1      	b.n	8002b5c <_realloc_r+0x40>

08002b78 <_malloc_usable_size_r>:
 8002b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b7c:	1f18      	subs	r0, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bfbc      	itt	lt
 8002b82:	580b      	ldrlt	r3, [r1, r0]
 8002b84:	18c0      	addlt	r0, r0, r3
 8002b86:	4770      	bx	lr

08002b88 <_init>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr

08002b94 <_fini>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr

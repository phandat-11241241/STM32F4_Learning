
build/debug/IWDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001160  08001160  00002160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001170  08001170  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001170  08001170  00002170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001178  08001178  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001178  08001178  00002178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800117c  0800117c  0000217c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001180  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          0000002c  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003eac  00000000  00000000  0000307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000010a9  00000000  00000000  00006f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000400  00000000  00000000  00007fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000002e7  00000000  00000000  000083d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002e7d  00000000  00000000  000086bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001736  00000000  00000000  0000b53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008c4  00000000  00000000  0000cc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000e7a  00000000  00000000  0000d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0000e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001148 	.word	0x08001148

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001148 	.word	0x08001148

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	2400      	movs	r4, #0
 80004fa:	9403      	str	r4, [sp, #12]
 80004fc:	9404      	str	r4, [sp, #16]
 80004fe:	9405      	str	r4, [sp, #20]
 8000500:	9406      	str	r4, [sp, #24]
 8000502:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000504:	9400      	str	r4, [sp, #0]
 8000506:	4b19      	ldr	r3, [pc, #100]	@ (800056c <MX_GPIO_Init+0x78>)
 8000508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800050a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800050e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000512:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051a:	9401      	str	r4, [sp, #4]
 800051c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800051e:	f042 0208 	orr.w	r2, r2, #8
 8000522:	631a      	str	r2, [r3, #48]	@ 0x30
 8000524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000526:	f002 0208 	and.w	r2, r2, #8
 800052a:	9201      	str	r2, [sp, #4]
 800052c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	9402      	str	r4, [sp, #8]
 8000530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	631a      	str	r2, [r3, #48]	@ 0x30
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000542:	4d0b      	ldr	r5, [pc, #44]	@ (8000570 <MX_GPIO_Init+0x7c>)
 8000544:	4622      	mov	r2, r4
 8000546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054a:	4628      	mov	r0, r5
 800054c:	f000 fa40 	bl	80009d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000554:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800055e:	a903      	add	r1, sp, #12
 8000560:	4628      	mov	r0, r5
 8000562:	f000 f93f 	bl	80007e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	b009      	add	sp, #36	@ 0x24
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020c00 	.word	0x40020c00

08000574 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x2>

08000578 <MX_IWDG_Init>:
{
 8000578:	b508      	push	{r3, lr}
  hiwdg.Instance = IWDG;
 800057a:	4807      	ldr	r0, [pc, #28]	@ (8000598 <MX_IWDG_Init+0x20>)
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <MX_IWDG_Init+0x24>)
 800057e:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000580:	2306      	movs	r3, #6
 8000582:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 8000584:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000588:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800058a:	f000 fa27 	bl	80009dc <HAL_IWDG_Init>
 800058e:	b900      	cbnz	r0, 8000592 <MX_IWDG_Init+0x1a>
}
 8000590:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000592:	f7ff ffef 	bl	8000574 <Error_Handler>
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028
 800059c:	40003000 	.word	0x40003000

080005a0 <SystemClock_Config>:
{
 80005a0:	b500      	push	{lr}
 80005a2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a4:	2230      	movs	r2, #48	@ 0x30
 80005a6:	2100      	movs	r1, #0
 80005a8:	a808      	add	r0, sp, #32
 80005aa:	f000 fda0 	bl	80010ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ae:	2300      	movs	r3, #0
 80005b0:	9303      	str	r3, [sp, #12]
 80005b2:	9304      	str	r3, [sp, #16]
 80005b4:	9305      	str	r3, [sp, #20]
 80005b6:	9306      	str	r3, [sp, #24]
 80005b8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <SystemClock_Config+0xa0>)
 80005be:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80005c0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80005c4:	6411      	str	r1, [r2, #64]	@ 0x40
 80005c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80005c8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	9302      	str	r3, [sp, #8]
 80005d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <SystemClock_Config+0xa4>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005e6:	2309      	movs	r3, #9
 80005e8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ee:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005fc:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005fe:	220c      	movs	r2, #12
 8000600:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000602:	2248      	movs	r2, #72	@ 0x48
 8000604:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	a808      	add	r0, sp, #32
 800060e:	f000 fa2f 	bl	8000a70 <HAL_RCC_OscConfig>
 8000612:	b980      	cbnz	r0, 8000636 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2102      	movs	r1, #2
 800061a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000624:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	a803      	add	r0, sp, #12
 800062a:	f000 fc71 	bl	8000f10 <HAL_RCC_ClockConfig>
 800062e:	b920      	cbnz	r0, 800063a <SystemClock_Config+0x9a>
}
 8000630:	b015      	add	sp, #84	@ 0x54
 8000632:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000636:	f7ff ff9d 	bl	8000574 <Error_Handler>
    Error_Handler();
 800063a:	f7ff ff9b 	bl	8000574 <Error_Handler>
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <main>:
{
 8000648:	b508      	push	{r3, lr}
  HAL_Init();
 800064a:	f000 f835 	bl	80006b8 <HAL_Init>
  SystemClock_Config();
 800064e:	f7ff ffa7 	bl	80005a0 <SystemClock_Config>
  MX_GPIO_Init();
 8000652:	f7ff ff4f 	bl	80004f4 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000656:	f7ff ff8f 	bl	8000578 <MX_IWDG_Init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000660:	4801      	ldr	r0, [pc, #4]	@ (8000668 <main+0x20>)
 8000662:	f000 f9b5 	bl	80009d0 <HAL_GPIO_WritePin>
  while (1)
 8000666:	e7f8      	b.n	800065a <main+0x12>
 8000668:	40020c00 	.word	0x40020c00

0800066c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800066c:	b510      	push	{r4, lr}
 800066e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_InitTick+0x40>)
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000678:	fbb3 f3f2 	udiv	r3, r3, r2
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <HAL_InitTick+0x44>)
 800067e:	6810      	ldr	r0, [r2, #0]
 8000680:	fbb0 f0f3 	udiv	r0, r0, r3
 8000684:	f000 f89a 	bl	80007bc <HAL_SYSTICK_Config>
 8000688:	b968      	cbnz	r0, 80006a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	2c0f      	cmp	r4, #15
 800068c:	d901      	bls.n	8000692 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800068e:	2001      	movs	r0, #1
 8000690:	e00a      	b.n	80006a8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000692:	2200      	movs	r2, #0
 8000694:	4621      	mov	r1, r4
 8000696:	f04f 30ff 	mov.w	r0, #4294967295
 800069a:	f000 f87f 	bl	800079c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HAL_InitTick+0x48>)
 80006a0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80006a2:	2000      	movs	r0, #0
 80006a4:	e000      	b.n	80006a8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	bf00      	nop
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000004 	.word	0x20000004

080006b8 <HAL_Init>:
{
 80006b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <HAL_Init+0x30>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80006ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f84f 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	200f      	movs	r0, #15
 80006dc:	f7ff ffc6 	bl	800066c <HAL_InitTick>
  HAL_MspInit();
 80006e0:	f000 f9aa 	bl	8000a38 <HAL_MspInit>
}
 80006e4:	2000      	movs	r0, #0
 80006e6:	bd08      	pop	{r3, pc}
 80006e8:	40023c00 	.word	0x40023c00

080006ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006ec:	4a03      	ldr	r2, [pc, #12]	@ (80006fc <HAL_IncTick+0x10>)
 80006ee:	6811      	ldr	r1, [r2, #0]
 80006f0:	4b03      	ldr	r3, [pc, #12]	@ (8000700 <HAL_IncTick+0x14>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	440b      	add	r3, r1
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000034 	.word	0x20000034
 8000700:	20000000 	.word	0x20000000

08000704 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000704:	4b01      	ldr	r3, [pc, #4]	@ (800070c <HAL_GetTick+0x8>)
 8000706:	6818      	ldr	r0, [r3, #0]
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000034 	.word	0x20000034

08000710 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000710:	2800      	cmp	r0, #0
 8000712:	db08      	blt.n	8000726 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	0109      	lsls	r1, r1, #4
 8000716:	b2c9      	uxtb	r1, r1
 8000718:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800071c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000720:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000724:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	f000 000f 	and.w	r0, r0, #15
 800072a:	0109      	lsls	r1, r1, #4
 800072c:	b2c9      	uxtb	r1, r1
 800072e:	4b01      	ldr	r3, [pc, #4]	@ (8000734 <__NVIC_SetPriority+0x24>)
 8000730:	5419      	strb	r1, [r3, r0]
  }
}
 8000732:	4770      	bx	lr
 8000734:	e000ed14 	.word	0xe000ed14

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073e:	f1c0 0c07 	rsb	ip, r0, #7
 8000742:	f1bc 0f04 	cmp.w	ip, #4
 8000746:	bf28      	it	cs
 8000748:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074c:	1d03      	adds	r3, r0, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d90f      	bls.n	8000772 <NVIC_EncodePriority+0x3a>
 8000752:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 3eff 	mov.w	lr, #4294967295
 8000758:	fa0e f00c 	lsl.w	r0, lr, ip
 800075c:	ea21 0100 	bic.w	r1, r1, r0
 8000760:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000762:	fa0e fe03 	lsl.w	lr, lr, r3
 8000766:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800076a:	ea41 0002 	orr.w	r0, r1, r2
 800076e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	2300      	movs	r3, #0
 8000774:	e7ee      	b.n	8000754 <NVIC_EncodePriority+0x1c>
	...

08000778 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800077a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000780:	041b      	lsls	r3, r3, #16
 8000782:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000784:	0200      	lsls	r0, r0, #8
 8000786:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000794:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079c:	b510      	push	{r4, lr}
 800079e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <HAL_NVIC_SetPriority+0x1c>)
 80007a2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80007a8:	f7ff ffc6 	bl	8000738 <NVIC_EncodePriority>
 80007ac:	4601      	mov	r1, r0
 80007ae:	4620      	mov	r0, r4
 80007b0:	f7ff ffae 	bl	8000710 <__NVIC_SetPriority>
}
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	3801      	subs	r0, #1
 80007be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007c2:	d20b      	bcs.n	80007dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80007c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ca:	4a05      	ldr	r2, [pc, #20]	@ (80007e0 <HAL_SYSTICK_Config+0x24>)
 80007cc:	21f0      	movs	r1, #240	@ 0xf0
 80007ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d2:	2000      	movs	r0, #0
 80007d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	2207      	movs	r2, #7
 80007d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	f200 80e9 	bhi.w	80009be <HAL_GPIO_Init+0x1da>
{
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	e065      	b.n	80008be <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007f2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80007f8:	2403      	movs	r4, #3
 80007fa:	fa04 f40e 	lsl.w	r4, r4, lr
 80007fe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000802:	68cc      	ldr	r4, [r1, #12]
 8000804:	fa04 f40e 	lsl.w	r4, r4, lr
 8000808:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800080a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800080c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800080e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000812:	684a      	ldr	r2, [r1, #4]
 8000814:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000818:	409a      	lsls	r2, r3
 800081a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800081c:	6042      	str	r2, [r0, #4]
 800081e:	e05c      	b.n	80008da <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000820:	08dc      	lsrs	r4, r3, #3
 8000822:	3408      	adds	r4, #8
 8000824:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000828:	f003 0507 	and.w	r5, r3, #7
 800082c:	00ad      	lsls	r5, r5, #2
 800082e:	f04f 0e0f 	mov.w	lr, #15
 8000832:	fa0e fe05 	lsl.w	lr, lr, r5
 8000836:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800083a:	690a      	ldr	r2, [r1, #16]
 800083c:	40aa      	lsls	r2, r5
 800083e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000842:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000846:	e05c      	b.n	8000902 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000848:	2207      	movs	r2, #7
 800084a:	e000      	b.n	800084e <HAL_GPIO_Init+0x6a>
 800084c:	2200      	movs	r2, #0
 800084e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000852:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000854:	3402      	adds	r4, #2
 8000856:	4d5a      	ldr	r5, [pc, #360]	@ (80009c0 <HAL_GPIO_Init+0x1dc>)
 8000858:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800085c:	4a59      	ldr	r2, [pc, #356]	@ (80009c4 <HAL_GPIO_Init+0x1e0>)
 800085e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000860:	ea6f 020c 	mvn.w	r2, ip
 8000864:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000868:	684e      	ldr	r6, [r1, #4]
 800086a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800086e:	d001      	beq.n	8000874 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000870:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000874:	4c53      	ldr	r4, [pc, #332]	@ (80009c4 <HAL_GPIO_Init+0x1e0>)
 8000876:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000878:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800087a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800087e:	684e      	ldr	r6, [r1, #4]
 8000880:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000884:	d001      	beq.n	800088a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000886:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800088a:	4c4e      	ldr	r4, [pc, #312]	@ (80009c4 <HAL_GPIO_Init+0x1e0>)
 800088c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800088e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000890:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000894:	684e      	ldr	r6, [r1, #4]
 8000896:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800089a:	d001      	beq.n	80008a0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800089c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80008a0:	4c48      	ldr	r4, [pc, #288]	@ (80009c4 <HAL_GPIO_Init+0x1e0>)
 80008a2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008a4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80008a6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80008a8:	684d      	ldr	r5, [r1, #4]
 80008aa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80008ae:	d001      	beq.n	80008b4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80008b0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80008b4:	4c43      	ldr	r4, [pc, #268]	@ (80009c4 <HAL_GPIO_Init+0x1e0>)
 80008b6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b8:	3301      	adds	r3, #1
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d87d      	bhi.n	80009ba <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80008be:	2201      	movs	r2, #1
 80008c0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c2:	680c      	ldr	r4, [r1, #0]
 80008c4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80008c8:	ea32 0404 	bics.w	r4, r2, r4
 80008cc:	d1f4      	bne.n	80008b8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80008ce:	684c      	ldr	r4, [r1, #4]
 80008d0:	f004 0403 	and.w	r4, r4, #3
 80008d4:	3c01      	subs	r4, #1
 80008d6:	2c01      	cmp	r4, #1
 80008d8:	d98b      	bls.n	80007f2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008da:	684a      	ldr	r2, [r1, #4]
 80008dc:	f002 0203 	and.w	r2, r2, #3
 80008e0:	2a03      	cmp	r2, #3
 80008e2:	d009      	beq.n	80008f8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80008e4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e6:	005d      	lsls	r5, r3, #1
 80008e8:	2203      	movs	r2, #3
 80008ea:	40aa      	lsls	r2, r5
 80008ec:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f0:	688a      	ldr	r2, [r1, #8]
 80008f2:	40aa      	lsls	r2, r5
 80008f4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80008f6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f8:	684a      	ldr	r2, [r1, #4]
 80008fa:	f002 0203 	and.w	r2, r2, #3
 80008fe:	2a02      	cmp	r2, #2
 8000900:	d08e      	beq.n	8000820 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000902:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000904:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f20e 	lsl.w	r2, r2, lr
 800090e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000912:	684a      	ldr	r2, [r1, #4]
 8000914:	f002 0203 	and.w	r2, r2, #3
 8000918:	fa02 f20e 	lsl.w	r2, r2, lr
 800091c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800091e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000920:	684a      	ldr	r2, [r1, #4]
 8000922:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000926:	d0c7      	beq.n	80008b8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000928:	2200      	movs	r2, #0
 800092a:	9201      	str	r2, [sp, #4]
 800092c:	4a26      	ldr	r2, [pc, #152]	@ (80009c8 <HAL_GPIO_Init+0x1e4>)
 800092e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000930:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000934:	6454      	str	r4, [r2, #68]	@ 0x44
 8000936:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000938:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800093c:	9201      	str	r2, [sp, #4]
 800093e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000940:	089c      	lsrs	r4, r3, #2
 8000942:	1ca5      	adds	r5, r4, #2
 8000944:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <HAL_GPIO_Init+0x1dc>)
 8000946:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800094a:	f003 0e03 	and.w	lr, r3, #3
 800094e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f20e 	lsl.w	r2, r2, lr
 8000958:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095c:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <HAL_GPIO_Init+0x1e8>)
 800095e:	4290      	cmp	r0, r2
 8000960:	f43f af74 	beq.w	800084c <HAL_GPIO_Init+0x68>
 8000964:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000968:	4290      	cmp	r0, r2
 800096a:	d01a      	beq.n	80009a2 <HAL_GPIO_Init+0x1be>
 800096c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000970:	4290      	cmp	r0, r2
 8000972:	d018      	beq.n	80009a6 <HAL_GPIO_Init+0x1c2>
 8000974:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000978:	4290      	cmp	r0, r2
 800097a:	d016      	beq.n	80009aa <HAL_GPIO_Init+0x1c6>
 800097c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000980:	4290      	cmp	r0, r2
 8000982:	d014      	beq.n	80009ae <HAL_GPIO_Init+0x1ca>
 8000984:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000988:	4290      	cmp	r0, r2
 800098a:	d012      	beq.n	80009b2 <HAL_GPIO_Init+0x1ce>
 800098c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000990:	4290      	cmp	r0, r2
 8000992:	d010      	beq.n	80009b6 <HAL_GPIO_Init+0x1d2>
 8000994:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000998:	4290      	cmp	r0, r2
 800099a:	f43f af55 	beq.w	8000848 <HAL_GPIO_Init+0x64>
 800099e:	2208      	movs	r2, #8
 80009a0:	e755      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009a2:	2201      	movs	r2, #1
 80009a4:	e753      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009a6:	2202      	movs	r2, #2
 80009a8:	e751      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009aa:	2203      	movs	r2, #3
 80009ac:	e74f      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009ae:	2204      	movs	r2, #4
 80009b0:	e74d      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009b2:	2205      	movs	r2, #5
 80009b4:	e74b      	b.n	800084e <HAL_GPIO_Init+0x6a>
 80009b6:	2206      	movs	r2, #6
 80009b8:	e749      	b.n	800084e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80009ba:	b002      	add	sp, #8
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	4770      	bx	lr
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40013c00 	.word	0x40013c00
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009d0:	b10a      	cbz	r2, 80009d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009d2:	6181      	str	r1, [r0, #24]
 80009d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80009d6:	0409      	lsls	r1, r1, #16
 80009d8:	6181      	str	r1, [r0, #24]
  }
}
 80009da:	4770      	bx	lr

080009dc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80009dc:	b350      	cbz	r0, 8000a34 <HAL_IWDG_Init+0x58>
{
 80009de:	b538      	push	{r3, r4, r5, lr}
 80009e0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80009e2:	6803      	ldr	r3, [r0, #0]
 80009e4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80009e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80009ea:	6803      	ldr	r3, [r0, #0]
 80009ec:	f245 5255 	movw	r2, #21845	@ 0x5555
 80009f0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80009f2:	6803      	ldr	r3, [r0, #0]
 80009f4:	6842      	ldr	r2, [r0, #4]
 80009f6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80009f8:	6803      	ldr	r3, [r0, #0]
 80009fa:	6882      	ldr	r2, [r0, #8]
 80009fc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80009fe:	f7ff fe81 	bl	8000704 <HAL_GetTick>
 8000a02:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	f012 0f03 	tst.w	r2, #3
 8000a0c:	d00d      	beq.n	8000a2a <HAL_IWDG_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000a0e:	f7ff fe79 	bl	8000704 <HAL_GetTick>
 8000a12:	1b40      	subs	r0, r0, r5
 8000a14:	f641 0301 	movw	r3, #6145	@ 0x1801
 8000a18:	4298      	cmp	r0, r3
 8000a1a:	d9f3      	bls.n	8000a04 <HAL_IWDG_Init+0x28>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f013 0f03 	tst.w	r3, #3
 8000a24:	d0ee      	beq.n	8000a04 <HAL_IWDG_Init+0x28>
      {
        return HAL_TIMEOUT;
 8000a26:	2003      	movs	r0, #3
 8000a28:	e003      	b.n	8000a32 <HAL_IWDG_Init+0x56>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000a2a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000a2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000a30:	2000      	movs	r0, #0
}
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a34:	2001      	movs	r0, #1
}
 8000a36:	4770      	bx	lr

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	9100      	str	r1, [sp, #0]
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_MspInit+0x34>)
 8000a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a46:	645a      	str	r2, [r3, #68]	@ 0x44
 8000a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000a4a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000a4e:	9200      	str	r2, [sp, #0]
 8000a50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	9101      	str	r1, [sp, #4]
 8000a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a56:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a70:	2800      	cmp	r0, #0
 8000a72:	f000 81e0 	beq.w	8000e36 <HAL_RCC_OscConfig+0x3c6>
{
 8000a76:	b570      	push	{r4, r5, r6, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a7c:	6803      	ldr	r3, [r0, #0]
 8000a7e:	f013 0f01 	tst.w	r3, #1
 8000a82:	d03b      	beq.n	8000afc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a84:	4b9f      	ldr	r3, [pc, #636]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	2b04      	cmp	r3, #4
 8000a8e:	d02c      	beq.n	8000aea <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a90:	4b9c      	ldr	r3, [pc, #624]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000a98:	2b08      	cmp	r3, #8
 8000a9a:	d021      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a9c:	6863      	ldr	r3, [r4, #4]
 8000a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000aa2:	d04f      	beq.n	8000b44 <HAL_RCC_OscConfig+0xd4>
 8000aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000aa8:	d052      	beq.n	8000b50 <HAL_RCC_OscConfig+0xe0>
 8000aaa:	4b96      	ldr	r3, [pc, #600]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000aba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000abc:	6863      	ldr	r3, [r4, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d050      	beq.n	8000b64 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fe1f 	bl	8000704 <HAL_GetTick>
 8000ac6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ad0:	d114      	bne.n	8000afc <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fe17 	bl	8000704 <HAL_GetTick>
 8000ad6:	1b40      	subs	r0, r0, r5
 8000ad8:	2864      	cmp	r0, #100	@ 0x64
 8000ada:	d9f5      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000adc:	2003      	movs	r0, #3
 8000ade:	e1b1      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ae0:	4b88      	ldr	r3, [pc, #544]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000ae8:	d0d8      	beq.n	8000a9c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aea:	4b86      	ldr	r3, [pc, #536]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000af2:	d003      	beq.n	8000afc <HAL_RCC_OscConfig+0x8c>
 8000af4:	6863      	ldr	r3, [r4, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 819f 	beq.w	8000e3a <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	f013 0f02 	tst.w	r3, #2
 8000b02:	d054      	beq.n	8000bae <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000b04:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	f013 0f0c 	tst.w	r3, #12
 8000b0c:	d03e      	beq.n	8000b8c <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d033      	beq.n	8000b82 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000b1a:	68e3      	ldr	r3, [r4, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d068      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b20:	4b79      	ldr	r3, [pc, #484]	@ (8000d08 <HAL_RCC_OscConfig+0x298>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b26:	f7ff fded 	bl	8000704 <HAL_GetTick>
 8000b2a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2c:	4b75      	ldr	r3, [pc, #468]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f013 0f02 	tst.w	r3, #2
 8000b34:	d154      	bne.n	8000be0 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b36:	f7ff fde5 	bl	8000704 <HAL_GetTick>
 8000b3a:	1b40      	subs	r0, r0, r5
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d9f5      	bls.n	8000b2c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
 8000b42:	e17f      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b44:	4a6f      	ldr	r2, [pc, #444]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e7b5      	b.n	8000abc <HAL_RCC_OscConfig+0x4c>
 8000b50:	4b6c      	ldr	r3, [pc, #432]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e7ab      	b.n	8000abc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000b64:	f7ff fdce 	bl	8000704 <HAL_GetTick>
 8000b68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b6a:	4b66      	ldr	r3, [pc, #408]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b72:	d0c3      	beq.n	8000afc <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fdc6 	bl	8000704 <HAL_GetTick>
 8000b78:	1b40      	subs	r0, r0, r5
 8000b7a:	2864      	cmp	r0, #100	@ 0x64
 8000b7c:	d9f5      	bls.n	8000b6a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000b7e:	2003      	movs	r0, #3
 8000b80:	e160      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b82:	4b60      	ldr	r3, [pc, #384]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000b8a:	d1c6      	bne.n	8000b1a <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f013 0f02 	tst.w	r3, #2
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_OscConfig+0x12e>
 8000b96:	68e3      	ldr	r3, [r4, #12]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	f040 8150 	bne.w	8000e3e <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9e:	4a59      	ldr	r2, [pc, #356]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000ba0:	6813      	ldr	r3, [r2, #0]
 8000ba2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ba6:	6921      	ldr	r1, [r4, #16]
 8000ba8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bac:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	f013 0f08 	tst.w	r3, #8
 8000bb4:	d042      	beq.n	8000c3c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000bb6:	6963      	ldr	r3, [r4, #20]
 8000bb8:	b36b      	cbz	r3, 8000c16 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bba:	4b53      	ldr	r3, [pc, #332]	@ (8000d08 <HAL_RCC_OscConfig+0x298>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bc2:	f7ff fd9f 	bl	8000704 <HAL_GetTick>
 8000bc6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000bcc:	f013 0f02 	tst.w	r3, #2
 8000bd0:	d134      	bne.n	8000c3c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bd2:	f7ff fd97 	bl	8000704 <HAL_GetTick>
 8000bd6:	1b40      	subs	r0, r0, r5
 8000bd8:	2802      	cmp	r0, #2
 8000bda:	d9f5      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000bdc:	2003      	movs	r0, #3
 8000bde:	e131      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be0:	4a48      	ldr	r2, [pc, #288]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000be8:	6921      	ldr	r1, [r4, #16]
 8000bea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e7dd      	b.n	8000bae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000bf2:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <HAL_RCC_OscConfig+0x298>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fd84 	bl	8000704 <HAL_GetTick>
 8000bfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bfe:	4b41      	ldr	r3, [pc, #260]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f013 0f02 	tst.w	r3, #2
 8000c06:	d0d2      	beq.n	8000bae <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fd7c 	bl	8000704 <HAL_GetTick>
 8000c0c:	1b40      	subs	r0, r0, r5
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9f5      	bls.n	8000bfe <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000c12:	2003      	movs	r0, #3
 8000c14:	e116      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c16:	4b3c      	ldr	r3, [pc, #240]	@ (8000d08 <HAL_RCC_OscConfig+0x298>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c1e:	f7ff fd71 	bl	8000704 <HAL_GetTick>
 8000c22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c24:	4b37      	ldr	r3, [pc, #220]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c28:	f013 0f02 	tst.w	r3, #2
 8000c2c:	d006      	beq.n	8000c3c <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fd69 	bl	8000704 <HAL_GetTick>
 8000c32:	1b40      	subs	r0, r0, r5
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d9f5      	bls.n	8000c24 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000c38:	2003      	movs	r0, #3
 8000c3a:	e103      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	f013 0f04 	tst.w	r3, #4
 8000c42:	d077      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c44:	4b2f      	ldr	r3, [pc, #188]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000c4c:	d133      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c56:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c66:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_RCC_OscConfig+0x29c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000c70:	d023      	beq.n	8000cba <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c72:	68a3      	ldr	r3, [r4, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d034      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x272>
 8000c78:	2b05      	cmp	r3, #5
 8000c7a:	d038      	beq.n	8000cee <HAL_RCC_OscConfig+0x27e>
 8000c7c:	4b21      	ldr	r3, [pc, #132]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000c80:	f022 0201 	bic.w	r2, r2, #1
 8000c84:	671a      	str	r2, [r3, #112]	@ 0x70
 8000c86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000c88:	f022 0204 	bic.w	r2, r2, #4
 8000c8c:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c8e:	68a3      	ldr	r3, [r4, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d03d      	beq.n	8000d10 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c94:	f7ff fd36 	bl	8000704 <HAL_GetTick>
 8000c98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c9e:	f013 0f02 	tst.w	r3, #2
 8000ca2:	d146      	bne.n	8000d32 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fd2e 	bl	8000704 <HAL_GetTick>
 8000ca8:	1b80      	subs	r0, r0, r6
 8000caa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d9f3      	bls.n	8000c9a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	e0c6      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	e7d6      	b.n	8000c68 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cba:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <HAL_RCC_OscConfig+0x29c>)
 8000cbc:	6813      	ldr	r3, [r2, #0]
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fd1e 	bl	8000704 <HAL_GetTick>
 8000cc8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_RCC_OscConfig+0x29c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000cd2:	d1ce      	bne.n	8000c72 <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cd4:	f7ff fd16 	bl	8000704 <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f5      	bls.n	8000cca <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000cde:	2003      	movs	r0, #3
 8000ce0:	e0b0      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce2:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000ce4:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8000cec:	e7cf      	b.n	8000c8e <HAL_RCC_OscConfig+0x21e>
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <HAL_RCC_OscConfig+0x294>)
 8000cf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000cf2:	f042 0204 	orr.w	r2, r2, #4
 8000cf6:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cf8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000cfa:	f042 0201 	orr.w	r2, r2, #1
 8000cfe:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d00:	e7c5      	b.n	8000c8e <HAL_RCC_OscConfig+0x21e>
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800
 8000d08:	42470000 	.word	0x42470000
 8000d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fcf8 	bl	8000704 <HAL_GetTick>
 8000d14:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d16:	4b52      	ldr	r3, [pc, #328]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d1a:	f013 0f02 	tst.w	r3, #2
 8000d1e:	d008      	beq.n	8000d32 <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d20:	f7ff fcf0 	bl	8000704 <HAL_GetTick>
 8000d24:	1b80      	subs	r0, r0, r6
 8000d26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d9f3      	bls.n	8000d16 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000d2e:	2003      	movs	r0, #3
 8000d30:	e088      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000d32:	b9ed      	cbnz	r5, 8000d70 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d34:	69a3      	ldr	r3, [r4, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 8083 	beq.w	8000e42 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d3c:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000d3e:	6892      	ldr	r2, [r2, #8]
 8000d40:	f002 020c 	and.w	r2, r2, #12
 8000d44:	2a08      	cmp	r2, #8
 8000d46:	d051      	beq.n	8000dec <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d017      	beq.n	8000d7c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d4c:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <HAL_RCC_OscConfig+0x3f4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d52:	f7ff fcd7 	bl	8000704 <HAL_GetTick>
 8000d56:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d58:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d60:	d042      	beq.n	8000de8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d62:	f7ff fccf 	bl	8000704 <HAL_GetTick>
 8000d66:	1b00      	subs	r0, r0, r4
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f5      	bls.n	8000d58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	e069      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d70:	4a3b      	ldr	r2, [pc, #236]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000d72:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000d74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7a:	e7db      	b.n	8000d34 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	4b39      	ldr	r3, [pc, #228]	@ (8000e64 <HAL_RCC_OscConfig+0x3f4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000d82:	f7ff fcbf 	bl	8000704 <HAL_GetTick>
 8000d86:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d88:	4b35      	ldr	r3, [pc, #212]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d90:	d006      	beq.n	8000da0 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d92:	f7ff fcb7 	bl	8000704 <HAL_GetTick>
 8000d96:	1b40      	subs	r0, r0, r5
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d9f5      	bls.n	8000d88 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	e051      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000da0:	69e3      	ldr	r3, [r4, #28]
 8000da2:	6a22      	ldr	r2, [r4, #32]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000da8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000dac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000dae:	0852      	lsrs	r2, r2, #1
 8000db0:	3a01      	subs	r2, #1
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000db8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dbc:	4a28      	ldr	r2, [pc, #160]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000dbe:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dc0:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <HAL_RCC_OscConfig+0x3f4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc9d 	bl	8000704 <HAL_GetTick>
 8000dca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000dd4:	d106      	bne.n	8000de4 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd6:	f7ff fc95 	bl	8000704 <HAL_GetTick>
 8000dda:	1b00      	subs	r0, r0, r4
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f5      	bls.n	8000dcc <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000de0:	2003      	movs	r0, #3
 8000de2:	e02f      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000de4:	2000      	movs	r0, #0
 8000de6:	e02d      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e02b      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d02b      	beq.n	8000e48 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <HAL_RCC_OscConfig+0x3f0>)
 8000df2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df4:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000df8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d126      	bne.n	8000e4c <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000dfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000e02:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e04:	428a      	cmp	r2, r1
 8000e06:	d123      	bne.n	8000e50 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e0a:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000e0e:	401a      	ands	r2, r3
 8000e10:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000e14:	d11e      	bne.n	8000e54 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e16:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000e1a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000e1c:	0852      	lsrs	r2, r2, #1
 8000e1e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e20:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000e24:	d118      	bne.n	8000e58 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e26:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000e2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e2c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000e30:	d114      	bne.n	8000e5c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8000e32:	2000      	movs	r0, #0
 8000e34:	e006      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8000e36:	2001      	movs	r0, #1
}
 8000e38:	4770      	bx	lr
        return HAL_ERROR;
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	e002      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	e000      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8000e42:	2000      	movs	r0, #0
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e7fb      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	e7f9      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000e50:	2001      	movs	r0, #1
 8000e52:	e7f7      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7f5      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e7f3      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	e7f1      	b.n	8000e44 <HAL_RCC_OscConfig+0x3d4>
 8000e60:	40023800 	.word	0x40023800
 8000e64:	42470000 	.word	0x42470000

08000e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e68:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	d041      	beq.n	8000efa <HAL_RCC_GetSysClockFreq+0x92>
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d141      	bne.n	8000efe <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000e88:	d012      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e92:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e94:	2300      	movs	r3, #0
 8000e96:	fba1 0100 	umull	r0, r1, r1, r0
 8000e9a:	f7ff f995 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000eaa:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000eae:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000eb2:	6858      	ldr	r0, [r3, #4]
 8000eb4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000eb8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000ebc:	ebbc 0c00 	subs.w	ip, ip, r0
 8000ec0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000ec4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000ec8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000ecc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000ed0:	ebb1 010c 	subs.w	r1, r1, ip
 8000ed4:	eb63 030e 	sbc.w	r3, r3, lr
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000ede:	00c9      	lsls	r1, r1, #3
 8000ee0:	eb11 0c00 	adds.w	ip, r1, r0
 8000ee4:	f143 0300 	adc.w	r3, r3, #0
 8000ee8:	0299      	lsls	r1, r3, #10
 8000eea:	2300      	movs	r3, #0
 8000eec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000ef0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000ef4:	f7ff f968 	bl	80001c8 <__aeabi_uldivmod>
 8000ef8:	e7d1      	b.n	8000e9e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000efc:	e7d7      	b.n	8000eae <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8000f00:	e7d5      	b.n	8000eae <HAL_RCC_GetSysClockFreq+0x46>
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	017d7840 	.word	0x017d7840
 8000f0c:	00f42400 	.word	0x00f42400

08000f10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000f10:	2800      	cmp	r0, #0
 8000f12:	f000 809b 	beq.w	800104c <HAL_RCC_ClockConfig+0x13c>
{
 8000f16:	b570      	push	{r4, r5, r6, lr}
 8000f18:	460d      	mov	r5, r1
 8000f1a:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800105c <HAL_RCC_ClockConfig+0x14c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d208      	bcs.n	8000f3a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f28:	b2cb      	uxtb	r3, r1
 8000f2a:	4a4c      	ldr	r2, [pc, #304]	@ (800105c <HAL_RCC_ClockConfig+0x14c>)
 8000f2c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	6813      	ldr	r3, [r2, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	428b      	cmp	r3, r1
 8000f36:	f040 808b 	bne.w	8001050 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	f013 0f02 	tst.w	r3, #2
 8000f40:	d017      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f42:	f013 0f04 	tst.w	r3, #4
 8000f46:	d004      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f48:	4a45      	ldr	r2, [pc, #276]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000f4a:	6893      	ldr	r3, [r2, #8]
 8000f4c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f50:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f013 0f08 	tst.w	r3, #8
 8000f58:	d004      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f5a:	4a41      	ldr	r2, [pc, #260]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000f5c:	6893      	ldr	r3, [r2, #8]
 8000f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f62:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f64:	4a3e      	ldr	r2, [pc, #248]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000f66:	6893      	ldr	r3, [r2, #8]
 8000f68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f6c:	68a1      	ldr	r1, [r4, #8]
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f013 0f01 	tst.w	r3, #1
 8000f78:	d032      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7a:	6863      	ldr	r3, [r4, #4]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d021      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f80:	1e9a      	subs	r2, r3, #2
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d925      	bls.n	8000fd2 <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f86:	4a36      	ldr	r2, [pc, #216]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000f88:	6812      	ldr	r2, [r2, #0]
 8000f8a:	f012 0f02 	tst.w	r2, #2
 8000f8e:	d061      	beq.n	8001054 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f90:	4933      	ldr	r1, [pc, #204]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000f92:	688a      	ldr	r2, [r1, #8]
 8000f94:	f022 0203 	bic.w	r2, r2, #3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fbb2 	bl	8000704 <HAL_GetTick>
 8000fa0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	6862      	ldr	r2, [r4, #4]
 8000fac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000fb0:	d016      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb2:	f7ff fba7 	bl	8000704 <HAL_GetTick>
 8000fb6:	1b80      	subs	r0, r0, r6
 8000fb8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d9f0      	bls.n	8000fa2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	e042      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc4:	4a26      	ldr	r2, [pc, #152]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000fcc:	d1e0      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e03b      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	4a23      	ldr	r2, [pc, #140]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000fda:	d1d9      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e034      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <HAL_RCC_ClockConfig+0x14c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	42ab      	cmp	r3, r5
 8000fea:	d907      	bls.n	8000ffc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fec:	b2ea      	uxtb	r2, r5
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_RCC_ClockConfig+0x14c>)
 8000ff0:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d12d      	bne.n	8001058 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	f013 0f04 	tst.w	r3, #4
 8001002:	d006      	beq.n	8001012 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001004:	4a16      	ldr	r2, [pc, #88]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8001006:	6893      	ldr	r3, [r2, #8]
 8001008:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800100c:	68e1      	ldr	r1, [r4, #12]
 800100e:	430b      	orrs	r3, r1
 8001010:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001012:	6823      	ldr	r3, [r4, #0]
 8001014:	f013 0f08 	tst.w	r3, #8
 8001018:	d007      	beq.n	800102a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001022:	6921      	ldr	r1, [r4, #16]
 8001024:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001028:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800102a:	f7ff ff1d 	bl	8000e68 <HAL_RCC_GetSysClockFreq>
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_RCC_ClockConfig+0x150>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_RCC_ClockConfig+0x154>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	40d8      	lsrs	r0, r3
 800103c:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_RCC_ClockConfig+0x158>)
 800103e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_RCC_ClockConfig+0x15c>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f7ff fb12 	bl	800066c <HAL_InitTick>
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
}
 800104a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
}
 800104e:	4770      	bx	lr
      return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
 8001052:	e7fa      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001054:	2001      	movs	r0, #1
 8001056:	e7f8      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001058:	2001      	movs	r0, #1
 800105a:	e7f6      	b.n	800104a <HAL_RCC_ClockConfig+0x13a>
 800105c:	40023c00 	.word	0x40023c00
 8001060:	40023800 	.word	0x40023800
 8001064:	08001160 	.word	0x08001160
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler>

08001072 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <HardFault_Handler>

08001074 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <MemManage_Handler>

08001076 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler>

08001078 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler>

0800107a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001082:	f7ff fb33 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001086:	bd08      	pop	{r3, pc}

08001088 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4a03      	ldr	r2, [pc, #12]	@ (8001098 <SystemInit+0x10>)
 800108a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800108e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001092:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a0:	f7ff fff2 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f000 f819 	bl	8001100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fabb 	bl	8000648 <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e0:	08001180 	.word	0x08001180
  ldr r2, =_sbss
 80010e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e8:	20000038 	.word	0x20000038

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>

080010ee <memset>:
 80010ee:	4402      	add	r2, r0
 80010f0:	4603      	mov	r3, r0
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d100      	bne.n	80010f8 <memset+0xa>
 80010f6:	4770      	bx	lr
 80010f8:	f803 1b01 	strb.w	r1, [r3], #1
 80010fc:	e7f9      	b.n	80010f2 <memset+0x4>
	...

08001100 <__libc_init_array>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	4d0d      	ldr	r5, [pc, #52]	@ (8001138 <__libc_init_array+0x38>)
 8001104:	4c0d      	ldr	r4, [pc, #52]	@ (800113c <__libc_init_array+0x3c>)
 8001106:	1b64      	subs	r4, r4, r5
 8001108:	10a4      	asrs	r4, r4, #2
 800110a:	2600      	movs	r6, #0
 800110c:	42a6      	cmp	r6, r4
 800110e:	d109      	bne.n	8001124 <__libc_init_array+0x24>
 8001110:	4d0b      	ldr	r5, [pc, #44]	@ (8001140 <__libc_init_array+0x40>)
 8001112:	4c0c      	ldr	r4, [pc, #48]	@ (8001144 <__libc_init_array+0x44>)
 8001114:	f000 f818 	bl	8001148 <_init>
 8001118:	1b64      	subs	r4, r4, r5
 800111a:	10a4      	asrs	r4, r4, #2
 800111c:	2600      	movs	r6, #0
 800111e:	42a6      	cmp	r6, r4
 8001120:	d105      	bne.n	800112e <__libc_init_array+0x2e>
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	f855 3b04 	ldr.w	r3, [r5], #4
 8001128:	4798      	blx	r3
 800112a:	3601      	adds	r6, #1
 800112c:	e7ee      	b.n	800110c <__libc_init_array+0xc>
 800112e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001132:	4798      	blx	r3
 8001134:	3601      	adds	r6, #1
 8001136:	e7f2      	b.n	800111e <__libc_init_array+0x1e>
 8001138:	08001178 	.word	0x08001178
 800113c:	08001178 	.word	0x08001178
 8001140:	08001178 	.word	0x08001178
 8001144:	0800117c 	.word	0x0800117c

08001148 <_init>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	bf00      	nop
 800114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114e:	bc08      	pop	{r3}
 8001150:	469e      	mov	lr, r3
 8001152:	4770      	bx	lr

08001154 <_fini>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr

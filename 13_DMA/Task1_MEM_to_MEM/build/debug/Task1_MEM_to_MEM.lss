
build/debug/Task1_MEM_to_MEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000acc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000bd8  08000bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bfc  08000bfc  00002014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000bfc  08000bfc  00002014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000bfc  08000bfc  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bfc  08000bfc  00001bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c00  08000c00  00001c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000c04  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000014  08000c18  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000c18  00002088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036d3  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011da  00000000  00000000  00005753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  00006930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002d7  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003196  00000000  00000000  00006ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000152a  00000000  00000000  0000a18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000082c  00000000  00000000  0000b6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000106f  00000000  00000000  0000bee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0000cf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08000bc0 	.word	0x08000bc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08000bc0 	.word	0x08000bc0

0800014c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 800014c:	b500      	push	{lr}
 800014e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000150:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000152:	695a      	ldr	r2, [r3, #20]
 8000154:	f042 0201 	orr.w	r2, r2, #1
 8000158:	615a      	str	r2, [r3, #20]
 800015a:	695b      	ldr	r3, [r3, #20]
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	9301      	str	r3, [sp, #4]
 8000162:	9b01      	ldr	r3, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000164:	480c      	ldr	r0, [pc, #48]	@ (8000198 <MX_DMA_Init+0x4c>)
 8000166:	4b0d      	ldr	r3, [pc, #52]	@ (800019c <MX_DMA_Init+0x50>)
 8000168:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800016a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800016e:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000170:	2340      	movs	r3, #64	@ 0x40
 8000172:	6083      	str	r3, [r0, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000174:	2380      	movs	r3, #128	@ 0x80
 8000176:	60c3      	str	r3, [r0, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000178:	2300      	movs	r3, #0
 800017a:	6103      	str	r3, [r0, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800017c:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800017e:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000180:	61c3      	str	r3, [r0, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000182:	f000 f93f 	bl	8000404 <HAL_DMA_Init>
 8000186:	b910      	cbnz	r0, 800018e <MX_DMA_Init+0x42>
  {
    Error_Handler();
  }

}
 8000188:	b003      	add	sp, #12
 800018a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800018e:	f000 f81f 	bl	80001d0 <Error_Handler>
}
 8000192:	e7f9      	b.n	8000188 <MX_DMA_Init+0x3c>
 8000194:	40021000 	.word	0x40021000
 8000198:	20000030 	.word	0x20000030
 800019c:	40020008 	.word	0x40020008

080001a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a0:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001a2:	4b0a      	ldr	r3, [pc, #40]	@ (80001cc <MX_GPIO_Init+0x2c>)
 80001a4:	699a      	ldr	r2, [r3, #24]
 80001a6:	f042 0220 	orr.w	r2, r2, #32
 80001aa:	619a      	str	r2, [r3, #24]
 80001ac:	699a      	ldr	r2, [r3, #24]
 80001ae:	f002 0220 	and.w	r2, r2, #32
 80001b2:	9200      	str	r2, [sp, #0]
 80001b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b6:	699a      	ldr	r2, [r3, #24]
 80001b8:	f042 0204 	orr.w	r2, r2, #4
 80001bc:	619a      	str	r2, [r3, #24]
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	f003 0304 	and.w	r3, r3, #4
 80001c4:	9301      	str	r3, [sp, #4]
 80001c6:	9b01      	ldr	r3, [sp, #4]

}
 80001c8:	b002      	add	sp, #8
 80001ca:	4770      	bx	lr
 80001cc:	40021000 	.word	0x40021000

080001d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <Error_Handler+0x2>

080001d4 <SystemClock_Config>:
{
 80001d4:	b500      	push	{lr}
 80001d6:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d8:	2228      	movs	r2, #40	@ 0x28
 80001da:	2100      	movs	r1, #0
 80001dc:	a806      	add	r0, sp, #24
 80001de:	f000 fcc2 	bl	8000b66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	9302      	str	r3, [sp, #8]
 80001e8:	9303      	str	r3, [sp, #12]
 80001ea:	9304      	str	r3, [sp, #16]
 80001ec:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2201      	movs	r2, #1
 80001f0:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2202      	movs	r2, #2
 80001fc:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fe:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000200:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000204:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	a806      	add	r0, sp, #24
 8000208:	f000 f992 	bl	8000530 <HAL_RCC_OscConfig>
 800020c:	b980      	cbnz	r0, 8000230 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020e:	230f      	movs	r3, #15
 8000210:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000212:	2102      	movs	r1, #2
 8000214:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800021e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000220:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	a801      	add	r0, sp, #4
 8000224:	f000 fbb6 	bl	8000994 <HAL_RCC_ClockConfig>
 8000228:	b920      	cbnz	r0, 8000234 <SystemClock_Config+0x60>
}
 800022a:	b011      	add	sp, #68	@ 0x44
 800022c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000230:	f7ff ffce 	bl	80001d0 <Error_Handler>
    Error_Handler();
 8000234:	f7ff ffcc 	bl	80001d0 <Error_Handler>

08000238 <main>:
{
 8000238:	b508      	push	{r3, lr}
  HAL_Init();
 800023a:	f000 f83f 	bl	80002bc <HAL_Init>
  SystemClock_Config();
 800023e:	f7ff ffc9 	bl	80001d4 <SystemClock_Config>
  MX_GPIO_Init();
 8000242:	f7ff ffad 	bl	80001a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f7ff ff81 	bl	800014c <MX_DMA_Init>
  HAL_DMA_Start(&hdma_memtomem_dma1_channel1, (uint32_t)&src, (uint32_t)&dst, 5);
 800024a:	2305      	movs	r3, #5
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <main+0x28>)
 800024e:	4905      	ldr	r1, [pc, #20]	@ (8000264 <main+0x2c>)
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <main+0x30>)
 8000252:	f000 f90b 	bl	800046c <HAL_DMA_Start>
    cnt++;
 8000256:	4a05      	ldr	r2, [pc, #20]	@ (800026c <main+0x34>)
 8000258:	7813      	ldrb	r3, [r2, #0]
 800025a:	3301      	adds	r3, #1
 800025c:	7013      	strb	r3, [r2, #0]
  while (1)
 800025e:	e7fa      	b.n	8000256 <main+0x1e>
 8000260:	20000078 	.word	0x20000078
 8000264:	20000000 	.word	0x20000000
 8000268:	20000030 	.word	0x20000030
 800026c:	20000074 	.word	0x20000074

08000270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b510      	push	{r4, lr}
 8000272:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000274:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <HAL_InitTick+0x40>)
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800027c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000280:	4a0c      	ldr	r2, [pc, #48]	@ (80002b4 <HAL_InitTick+0x44>)
 8000282:	6810      	ldr	r0, [r2, #0]
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 f892 	bl	80003b0 <HAL_SYSTICK_Config>
 800028c:	b968      	cbnz	r0, 80002aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800028e:	2c0f      	cmp	r4, #15
 8000290:	d901      	bls.n	8000296 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000292:	2001      	movs	r0, #1
 8000294:	e00a      	b.n	80002ac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000296:	2200      	movs	r2, #0
 8000298:	4621      	mov	r1, r4
 800029a:	f04f 30ff 	mov.w	r0, #4294967295
 800029e:	f000 f877 	bl	8000390 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a2:	4b05      	ldr	r3, [pc, #20]	@ (80002b8 <HAL_InitTick+0x48>)
 80002a4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80002a6:	2000      	movs	r0, #0
 80002a8:	e000      	b.n	80002ac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80002aa:	2001      	movs	r0, #1
}
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	bf00      	nop
 80002b0:	2000000a 	.word	0x2000000a
 80002b4:	20000010 	.word	0x20000010
 80002b8:	2000000c 	.word	0x2000000c

080002bc <HAL_Init>:
{
 80002bc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002be:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <HAL_Init+0x20>)
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f000 f84f 	bl	800036c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ce:	200f      	movs	r0, #15
 80002d0:	f7ff ffce 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002d4:	f000 f8f4 	bl	80004c0 <HAL_MspInit>
}
 80002d8:	2000      	movs	r0, #0
 80002da:	bd08      	pop	{r3, pc}
 80002dc:	40022000 	.word	0x40022000

080002e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002e0:	4a03      	ldr	r2, [pc, #12]	@ (80002f0 <HAL_IncTick+0x10>)
 80002e2:	6811      	ldr	r1, [r2, #0]
 80002e4:	4b03      	ldr	r3, [pc, #12]	@ (80002f4 <HAL_IncTick+0x14>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	440b      	add	r3, r1
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000084 	.word	0x20000084
 80002f4:	2000000a 	.word	0x2000000a

080002f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002f8:	4b01      	ldr	r3, [pc, #4]	@ (8000300 <HAL_GetTick+0x8>)
 80002fa:	6818      	ldr	r0, [r3, #0]
}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000084 	.word	0x20000084

08000304 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000304:	2800      	cmp	r0, #0
 8000306:	db08      	blt.n	800031a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	0109      	lsls	r1, r1, #4
 800030a:	b2c9      	uxtb	r1, r1
 800030c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000310:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000314:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000318:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	f000 000f 	and.w	r0, r0, #15
 800031e:	0109      	lsls	r1, r1, #4
 8000320:	b2c9      	uxtb	r1, r1
 8000322:	4b01      	ldr	r3, [pc, #4]	@ (8000328 <__NVIC_SetPriority+0x24>)
 8000324:	5419      	strb	r1, [r3, r0]
  }
}
 8000326:	4770      	bx	lr
 8000328:	e000ed14 	.word	0xe000ed14

0800032c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800032c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000332:	f1c0 0c07 	rsb	ip, r0, #7
 8000336:	f1bc 0f04 	cmp.w	ip, #4
 800033a:	bf28      	it	cs
 800033c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000340:	1d03      	adds	r3, r0, #4
 8000342:	2b06      	cmp	r3, #6
 8000344:	d90f      	bls.n	8000366 <NVIC_EncodePriority+0x3a>
 8000346:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	f04f 3eff 	mov.w	lr, #4294967295
 800034c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000350:	ea21 0100 	bic.w	r1, r1, r0
 8000354:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000356:	fa0e fe03 	lsl.w	lr, lr, r3
 800035a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800035e:	ea41 0002 	orr.w	r0, r1, r2
 8000362:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	2300      	movs	r3, #0
 8000368:	e7ee      	b.n	8000348 <NVIC_EncodePriority+0x1c>
	...

0800036c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800036c:	4a07      	ldr	r2, [pc, #28]	@ (800038c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800036e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000370:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000374:	041b      	lsls	r3, r3, #16
 8000376:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000378:	0200      	lsls	r0, r0, #8
 800037a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800037e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000388:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000390:	b510      	push	{r4, lr}
 8000392:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000394:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <HAL_NVIC_SetPriority+0x1c>)
 8000396:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000398:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800039c:	f7ff ffc6 	bl	800032c <NVIC_EncodePriority>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4620      	mov	r0, r4
 80003a4:	f7ff ffae 	bl	8000304 <__NVIC_SetPriority>
}
 80003a8:	bd10      	pop	{r4, pc}
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	3801      	subs	r0, #1
 80003b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80003b6:	d20b      	bcs.n	80003d0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80003bc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003be:	4a05      	ldr	r2, [pc, #20]	@ (80003d4 <HAL_SYSTICK_Config+0x24>)
 80003c0:	21f0      	movs	r1, #240	@ 0xf0
 80003c2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c6:	2000      	movs	r0, #0
 80003c8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ca:	2207      	movs	r2, #7
 80003cc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003d0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80003d8:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80003da:	2401      	movs	r4, #1
 80003dc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80003de:	40ac      	lsls	r4, r5
 80003e0:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80003e2:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80003e4:	6804      	ldr	r4, [r0, #0]
 80003e6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80003e8:	6843      	ldr	r3, [r0, #4]
 80003ea:	2b10      	cmp	r3, #16
 80003ec:	d005      	beq.n	80003fa <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80003ee:	6803      	ldr	r3, [r0, #0]
 80003f0:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80003f2:	6803      	ldr	r3, [r0, #0]
 80003f4:	60da      	str	r2, [r3, #12]
  }
}
 80003f6:	bc30      	pop	{r4, r5}
 80003f8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80003fa:	6803      	ldr	r3, [r0, #0]
 80003fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80003fe:	6803      	ldr	r3, [r0, #0]
 8000400:	60d9      	str	r1, [r3, #12]
 8000402:	e7f8      	b.n	80003f6 <DMA_SetConfig+0x1e>

08000404 <HAL_DMA_Init>:
  if(hdma == NULL)
 8000404:	b350      	cbz	r0, 800045c <HAL_DMA_Init+0x58>
{
 8000406:	b410      	push	{r4}
 8000408:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800040a:	6801      	ldr	r1, [r0, #0]
 800040c:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <HAL_DMA_Init+0x5c>)
 800040e:	440b      	add	r3, r1
 8000410:	4814      	ldr	r0, [pc, #80]	@ (8000464 <HAL_DMA_Init+0x60>)
 8000412:	fba0 0303 	umull	r0, r3, r0, r3
 8000416:	091b      	lsrs	r3, r3, #4
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800041c:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <HAL_DMA_Init+0x64>)
 800041e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8000420:	2302      	movs	r3, #2
 8000422:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8000426:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000428:	f36f 100d 	bfc	r0, #4, #10
  tmp |=  hdma->Init.Direction        |
 800042c:	6853      	ldr	r3, [r2, #4]
 800042e:	6894      	ldr	r4, [r2, #8]
 8000430:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000432:	68d4      	ldr	r4, [r2, #12]
 8000434:	4323      	orrs	r3, r4
 8000436:	6914      	ldr	r4, [r2, #16]
 8000438:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800043a:	6954      	ldr	r4, [r2, #20]
 800043c:	4323      	orrs	r3, r4
 800043e:	6994      	ldr	r4, [r2, #24]
 8000440:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000442:	69d4      	ldr	r4, [r2, #28]
 8000444:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000446:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8000448:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800044a:	2000      	movs	r0, #0
 800044c:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800044e:	2301      	movs	r3, #1
 8000450:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000454:	f882 0020 	strb.w	r0, [r2, #32]
}
 8000458:	bc10      	pop	{r4}
 800045a:	4770      	bx	lr
    return HAL_ERROR;
 800045c:	2001      	movs	r0, #1
}
 800045e:	4770      	bx	lr
 8000460:	bffdfff8 	.word	0xbffdfff8
 8000464:	cccccccd 	.word	0xcccccccd
 8000468:	40020000 	.word	0x40020000

0800046c <HAL_DMA_Start>:
{
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8000470:	f890 0020 	ldrb.w	r0, [r0, #32]
 8000474:	2801      	cmp	r0, #1
 8000476:	d020      	beq.n	80004ba <HAL_DMA_Start+0x4e>
 8000478:	2001      	movs	r0, #1
 800047a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800047e:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8000482:	b2c0      	uxtb	r0, r0
 8000484:	2801      	cmp	r0, #1
 8000486:	d004      	beq.n	8000492 <HAL_DMA_Start+0x26>
   __HAL_UNLOCK(hdma);  
 8000488:	2300      	movs	r3, #0
 800048a:	f884 3020 	strb.w	r3, [r4, #32]
   status = HAL_BUSY;
 800048e:	2002      	movs	r0, #2
}
 8000490:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000492:	2002      	movs	r0, #2
 8000494:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000498:	2500      	movs	r5, #0
 800049a:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 800049c:	6826      	ldr	r6, [r4, #0]
 800049e:	6830      	ldr	r0, [r6, #0]
 80004a0:	f020 0001 	bic.w	r0, r0, #1
 80004a4:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80004a6:	4620      	mov	r0, r4
 80004a8:	f7ff ff96 	bl	80003d8 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 80004ac:	6822      	ldr	r2, [r4, #0]
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7ea      	b.n	8000490 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 80004ba:	2002      	movs	r0, #2
 80004bc:	e7e8      	b.n	8000490 <HAL_DMA_Start+0x24>
	...

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <HAL_MspInit+0x3c>)
 80004c4:	699a      	ldr	r2, [r3, #24]
 80004c6:	f042 0201 	orr.w	r2, r2, #1
 80004ca:	619a      	str	r2, [r3, #24]
 80004cc:	699a      	ldr	r2, [r3, #24]
 80004ce:	f002 0201 	and.w	r2, r2, #1
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	69da      	ldr	r2, [r3, #28]
 80004d8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80004dc:	61da      	str	r2, [r3, #28]
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e8:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <HAL_MspInit+0x40>)
 80004ea:	6853      	ldr	r3, [r2, #4]
 80004ec:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	b002      	add	sp, #8
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000504:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000506:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <RCC_Delay+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <RCC_Delay+0x28>)
 800050c:	fba2 2303 	umull	r2, r3, r2, r3
 8000510:	0a5b      	lsrs	r3, r3, #9
 8000512:	fb00 f303 	mul.w	r3, r0, r3
 8000516:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000518:	bf00      	nop
  }
  while (Delay --);
 800051a:	9b01      	ldr	r3, [sp, #4]
 800051c:	1e5a      	subs	r2, r3, #1
 800051e:	9201      	str	r2, [sp, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1f9      	bne.n	8000518 <RCC_Delay+0x14>
}
 8000524:	b002      	add	sp, #8
 8000526:	4770      	bx	lr
 8000528:	20000010 	.word	0x20000010
 800052c:	10624dd3 	.word	0x10624dd3

08000530 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000530:	2800      	cmp	r0, #0
 8000532:	f000 81f1 	beq.w	8000918 <HAL_RCC_OscConfig+0x3e8>
{
 8000536:	b570      	push	{r4, r5, r6, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053c:	6803      	ldr	r3, [r0, #0]
 800053e:	f013 0f01 	tst.w	r3, #1
 8000542:	d02c      	beq.n	800059e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000544:	4b99      	ldr	r3, [pc, #612]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 030c 	and.w	r3, r3, #12
 800054c:	2b04      	cmp	r3, #4
 800054e:	d01d      	beq.n	800058c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000550:	4b96      	ldr	r3, [pc, #600]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 030c 	and.w	r3, r3, #12
 8000558:	2b08      	cmp	r3, #8
 800055a:	d012      	beq.n	8000582 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055c:	6863      	ldr	r3, [r4, #4]
 800055e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000562:	d041      	beq.n	80005e8 <HAL_RCC_OscConfig+0xb8>
 8000564:	2b00      	cmp	r3, #0
 8000566:	d155      	bne.n	8000614 <HAL_RCC_OscConfig+0xe4>
 8000568:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800056c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	e037      	b.n	80005f2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000582:	4b8a      	ldr	r3, [pc, #552]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800058a:	d0e7      	beq.n	800055c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800058c:	4b87      	ldr	r3, [pc, #540]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000594:	d003      	beq.n	800059e <HAL_RCC_OscConfig+0x6e>
 8000596:	6863      	ldr	r3, [r4, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	f000 81bf 	beq.w	800091c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	f013 0f02 	tst.w	r3, #2
 80005a4:	d075      	beq.n	8000692 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80005a6:	4b81      	ldr	r3, [pc, #516]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	f013 0f0c 	tst.w	r3, #12
 80005ae:	d05f      	beq.n	8000670 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005b0:	4b7e      	ldr	r3, [pc, #504]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f003 030c 	and.w	r3, r3, #12
 80005b8:	2b08      	cmp	r3, #8
 80005ba:	d054      	beq.n	8000666 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005bc:	6923      	ldr	r3, [r4, #16]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 808a 	beq.w	80006d8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80005c4:	4b7a      	ldr	r3, [pc, #488]	@ (80007b0 <HAL_RCC_OscConfig+0x280>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ca:	f7ff fe95 	bl	80002f8 <HAL_GetTick>
 80005ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005d0:	4b76      	ldr	r3, [pc, #472]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f013 0f02 	tst.w	r3, #2
 80005d8:	d175      	bne.n	80006c6 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005da:	f7ff fe8d 	bl	80002f8 <HAL_GetTick>
 80005de:	1b40      	subs	r0, r0, r5
 80005e0:	2802      	cmp	r0, #2
 80005e2:	d9f5      	bls.n	80005d0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80005e4:	2003      	movs	r0, #3
 80005e6:	e19e      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e8:	4a70      	ldr	r2, [pc, #448]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80005ea:	6813      	ldr	r3, [r2, #0]
 80005ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005f0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	b343      	cbz	r3, 8000648 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80005f6:	f7ff fe7f 	bl	80002f8 <HAL_GetTick>
 80005fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005fc:	4b6b      	ldr	r3, [pc, #428]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000604:	d1cb      	bne.n	800059e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000606:	f7ff fe77 	bl	80002f8 <HAL_GetTick>
 800060a:	1b40      	subs	r0, r0, r5
 800060c:	2864      	cmp	r0, #100	@ 0x64
 800060e:	d9f5      	bls.n	80005fc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000610:	2003      	movs	r0, #3
 8000612:	e188      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000618:	d009      	beq.n	800062e <HAL_RCC_OscConfig+0xfe>
 800061a:	4b64      	ldr	r3, [pc, #400]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	e7e1      	b.n	80005f2 <HAL_RCC_OscConfig+0xc2>
 800062e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000632:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e7d4      	b.n	80005f2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000648:	f7ff fe56 	bl	80002f8 <HAL_GetTick>
 800064c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800064e:	4b57      	ldr	r3, [pc, #348]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000656:	d0a2      	beq.n	800059e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000658:	f7ff fe4e 	bl	80002f8 <HAL_GetTick>
 800065c:	1b40      	subs	r0, r0, r5
 800065e:	2864      	cmp	r0, #100	@ 0x64
 8000660:	d9f5      	bls.n	800064e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000662:	2003      	movs	r0, #3
 8000664:	e15f      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000666:	4b51      	ldr	r3, [pc, #324]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800066e:	d1a5      	bne.n	80005bc <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000670:	4b4e      	ldr	r3, [pc, #312]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f013 0f02 	tst.w	r3, #2
 8000678:	d003      	beq.n	8000682 <HAL_RCC_OscConfig+0x152>
 800067a:	6923      	ldr	r3, [r4, #16]
 800067c:	2b01      	cmp	r3, #1
 800067e:	f040 814f 	bne.w	8000920 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000682:	4a4a      	ldr	r2, [pc, #296]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000684:	6813      	ldr	r3, [r2, #0]
 8000686:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800068a:	6961      	ldr	r1, [r4, #20]
 800068c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000690:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	f013 0f08 	tst.w	r3, #8
 8000698:	d033      	beq.n	8000702 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800069a:	69a3      	ldr	r3, [r4, #24]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d05c      	beq.n	800075a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80006a0:	4b43      	ldr	r3, [pc, #268]	@ (80007b0 <HAL_RCC_OscConfig+0x280>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80006a8:	f7ff fe26 	bl	80002f8 <HAL_GetTick>
 80006ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ae:	4b3f      	ldr	r3, [pc, #252]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	f013 0f02 	tst.w	r3, #2
 80006b6:	d121      	bne.n	80006fc <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80006b8:	f7ff fe1e 	bl	80002f8 <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9f5      	bls.n	80006ae <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80006c2:	2003      	movs	r0, #3
 80006c4:	e12f      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006c6:	4a39      	ldr	r2, [pc, #228]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80006c8:	6813      	ldr	r3, [r2, #0]
 80006ca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80006ce:	6961      	ldr	r1, [r4, #20]
 80006d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e7dc      	b.n	8000692 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80006d8:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <HAL_RCC_OscConfig+0x280>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006de:	f7ff fe0b 	bl	80002f8 <HAL_GetTick>
 80006e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e4:	4b31      	ldr	r3, [pc, #196]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f013 0f02 	tst.w	r3, #2
 80006ec:	d0d1      	beq.n	8000692 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006ee:	f7ff fe03 	bl	80002f8 <HAL_GetTick>
 80006f2:	1b40      	subs	r0, r0, r5
 80006f4:	2802      	cmp	r0, #2
 80006f6:	d9f5      	bls.n	80006e4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80006f8:	2003      	movs	r0, #3
 80006fa:	e114      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff01 	bl	8000504 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	f013 0f04 	tst.w	r3, #4
 8000708:	f000 8096 	beq.w	8000838 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800070c:	4b27      	ldr	r3, [pc, #156]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000714:	d134      	bne.n	8000780 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 8000718:	69da      	ldr	r2, [r3, #28]
 800071a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800071e:	61da      	str	r2, [r3, #28]
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800072a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_RCC_OscConfig+0x284>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000734:	d026      	beq.n	8000784 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000736:	68e3      	ldr	r3, [r4, #12]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d03d      	beq.n	80007b8 <HAL_RCC_OscConfig+0x288>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d153      	bne.n	80007e8 <HAL_RCC_OscConfig+0x2b8>
 8000740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000744:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000748:	6a1a      	ldr	r2, [r3, #32]
 800074a:	f022 0201 	bic.w	r2, r2, #1
 800074e:	621a      	str	r2, [r3, #32]
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	f022 0204 	bic.w	r2, r2, #4
 8000756:	621a      	str	r2, [r3, #32]
 8000758:	e033      	b.n	80007c2 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <HAL_RCC_OscConfig+0x280>)
 800075c:	2200      	movs	r2, #0
 800075e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000762:	f7ff fdc9 	bl	80002f8 <HAL_GetTick>
 8000766:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000768:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <HAL_RCC_OscConfig+0x27c>)
 800076a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800076c:	f013 0f02 	tst.w	r3, #2
 8000770:	d0c7      	beq.n	8000702 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000772:	f7ff fdc1 	bl	80002f8 <HAL_GetTick>
 8000776:	1b40      	subs	r0, r0, r5
 8000778:	2802      	cmp	r0, #2
 800077a:	d9f5      	bls.n	8000768 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800077c:	2003      	movs	r0, #3
 800077e:	e0d2      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000780:	2500      	movs	r5, #0
 8000782:	e7d3      	b.n	800072c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <HAL_RCC_OscConfig+0x284>)
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800078c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800078e:	f7ff fdb3 	bl	80002f8 <HAL_GetTick>
 8000792:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <HAL_RCC_OscConfig+0x284>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800079c:	d1cb      	bne.n	8000736 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800079e:	f7ff fdab 	bl	80002f8 <HAL_GetTick>
 80007a2:	1b80      	subs	r0, r0, r6
 80007a4:	2864      	cmp	r0, #100	@ 0x64
 80007a6:	d9f5      	bls.n	8000794 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80007a8:	2003      	movs	r0, #3
 80007aa:	e0bc      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
 80007ac:	40021000 	.word	0x40021000
 80007b0:	42420000 	.word	0x42420000
 80007b4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007b8:	4a5f      	ldr	r2, [pc, #380]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80007ba:	6a13      	ldr	r3, [r2, #32]
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007c2:	68e3      	ldr	r3, [r4, #12]
 80007c4:	b333      	cbz	r3, 8000814 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd97 	bl	80002f8 <HAL_GetTick>
 80007ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007cc:	4b5a      	ldr	r3, [pc, #360]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80007ce:	6a1b      	ldr	r3, [r3, #32]
 80007d0:	f013 0f02 	tst.w	r3, #2
 80007d4:	d12f      	bne.n	8000836 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80007d6:	f7ff fd8f 	bl	80002f8 <HAL_GetTick>
 80007da:	1b80      	subs	r0, r0, r6
 80007dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007e0:	4298      	cmp	r0, r3
 80007e2:	d9f3      	bls.n	80007cc <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80007e4:	2003      	movs	r0, #3
 80007e6:	e09e      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e8:	2b05      	cmp	r3, #5
 80007ea:	d009      	beq.n	8000800 <HAL_RCC_OscConfig+0x2d0>
 80007ec:	4b52      	ldr	r3, [pc, #328]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80007ee:	6a1a      	ldr	r2, [r3, #32]
 80007f0:	f022 0201 	bic.w	r2, r2, #1
 80007f4:	621a      	str	r2, [r3, #32]
 80007f6:	6a1a      	ldr	r2, [r3, #32]
 80007f8:	f022 0204 	bic.w	r2, r2, #4
 80007fc:	621a      	str	r2, [r3, #32]
 80007fe:	e7e0      	b.n	80007c2 <HAL_RCC_OscConfig+0x292>
 8000800:	4b4d      	ldr	r3, [pc, #308]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 8000802:	6a1a      	ldr	r2, [r3, #32]
 8000804:	f042 0204 	orr.w	r2, r2, #4
 8000808:	621a      	str	r2, [r3, #32]
 800080a:	6a1a      	ldr	r2, [r3, #32]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	621a      	str	r2, [r3, #32]
 8000812:	e7d6      	b.n	80007c2 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8000814:	f7ff fd70 	bl	80002f8 <HAL_GetTick>
 8000818:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800081a:	4b47      	ldr	r3, [pc, #284]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 800081c:	6a1b      	ldr	r3, [r3, #32]
 800081e:	f013 0f02 	tst.w	r3, #2
 8000822:	d008      	beq.n	8000836 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000824:	f7ff fd68 	bl	80002f8 <HAL_GetTick>
 8000828:	1b80      	subs	r0, r0, r6
 800082a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800082e:	4298      	cmp	r0, r3
 8000830:	d9f3      	bls.n	800081a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
 8000834:	e077      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8000836:	b9e5      	cbnz	r5, 8000872 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000838:	69e3      	ldr	r3, [r4, #28]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d072      	beq.n	8000924 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800083e:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 8000840:	6852      	ldr	r2, [r2, #4]
 8000842:	f002 020c 	and.w	r2, r2, #12
 8000846:	2a08      	cmp	r2, #8
 8000848:	d056      	beq.n	80008f8 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800084a:	2b02      	cmp	r3, #2
 800084c:	d017      	beq.n	800087e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <HAL_RCC_OscConfig+0x40c>)
 8000850:	2200      	movs	r2, #0
 8000852:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000854:	f7ff fd50 	bl	80002f8 <HAL_GetTick>
 8000858:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085a:	4b37      	ldr	r3, [pc, #220]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000862:	d047      	beq.n	80008f4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000864:	f7ff fd48 	bl	80002f8 <HAL_GetTick>
 8000868:	1b00      	subs	r0, r0, r4
 800086a:	2802      	cmp	r0, #2
 800086c:	d9f5      	bls.n	800085a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800086e:	2003      	movs	r0, #3
 8000870:	e059      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000872:	4a31      	ldr	r2, [pc, #196]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 8000874:	69d3      	ldr	r3, [r2, #28]
 8000876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	e7dc      	b.n	8000838 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <HAL_RCC_OscConfig+0x40c>)
 8000880:	2200      	movs	r2, #0
 8000882:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000884:	f7ff fd38 	bl	80002f8 <HAL_GetTick>
 8000888:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000892:	d006      	beq.n	80008a2 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000894:	f7ff fd30 	bl	80002f8 <HAL_GetTick>
 8000898:	1b40      	subs	r0, r0, r5
 800089a:	2802      	cmp	r0, #2
 800089c:	d9f5      	bls.n	800088a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800089e:	2003      	movs	r0, #3
 80008a0:	e041      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008a2:	6a23      	ldr	r3, [r4, #32]
 80008a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80008a8:	d01a      	beq.n	80008e0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008aa:	4923      	ldr	r1, [pc, #140]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80008ac:	684b      	ldr	r3, [r1, #4]
 80008ae:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80008b2:	6a22      	ldr	r2, [r4, #32]
 80008b4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80008b6:	4302      	orrs	r2, r0
 80008b8:	4313      	orrs	r3, r2
 80008ba:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80008bc:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <HAL_RCC_OscConfig+0x40c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80008c2:	f7ff fd19 	bl	80002f8 <HAL_GetTick>
 80008c6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80008d0:	d10e      	bne.n	80008f0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80008d2:	f7ff fd11 	bl	80002f8 <HAL_GetTick>
 80008d6:	1b00      	subs	r0, r0, r4
 80008d8:	2802      	cmp	r0, #2
 80008da:	d9f5      	bls.n	80008c8 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80008dc:	2003      	movs	r0, #3
 80008de:	e022      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008e0:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80008e2:	6853      	ldr	r3, [r2, #4]
 80008e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80008e8:	68a1      	ldr	r1, [r4, #8]
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6053      	str	r3, [r2, #4]
 80008ee:	e7dc      	b.n	80008aa <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80008f0:	2000      	movs	r0, #0
 80008f2:	e018      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
 80008f4:	2000      	movs	r0, #0
 80008f6:	e016      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d016      	beq.n	800092a <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_RCC_OscConfig+0x408>)
 80008fe:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000900:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8000904:	6a22      	ldr	r2, [r4, #32]
 8000906:	4291      	cmp	r1, r2
 8000908:	d111      	bne.n	800092e <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800090a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800090e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000910:	4293      	cmp	r3, r2
 8000912:	d10e      	bne.n	8000932 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e006      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8000918:	2001      	movs	r0, #1
}
 800091a:	4770      	bx	lr
        return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e002      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8000920:	2001      	movs	r0, #1
 8000922:	e000      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
}
 8000926:	b002      	add	sp, #8
 8000928:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
 800092c:	e7fb      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 800092e:	2001      	movs	r0, #1
 8000930:	e7f9      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
 8000932:	2001      	movs	r0, #1
 8000934:	e7f7      	b.n	8000926 <HAL_RCC_OscConfig+0x3f6>
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	42420000 	.word	0x42420000

08000940 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_RCC_GetSysClockFreq+0x40>)
 8000942:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000944:	f003 020c 	and.w	r2, r3, #12
 8000948:	2a08      	cmp	r2, #8
 800094a:	d001      	beq.n	8000950 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <HAL_RCC_GetSysClockFreq+0x44>)
}
 800094e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000950:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <HAL_RCC_GetSysClockFreq+0x48>)
 8000956:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000958:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800095c:	d00b      	beq.n	8000976 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_RCC_GetSysClockFreq+0x40>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000966:	4a09      	ldr	r2, [pc, #36]	@ (800098c <HAL_RCC_GetSysClockFreq+0x4c>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800096a:	4a06      	ldr	r2, [pc, #24]	@ (8000984 <HAL_RCC_GetSysClockFreq+0x44>)
 800096c:	fb02 f000 	mul.w	r0, r2, r0
 8000970:	fbb0 f0f3 	udiv	r0, r0, r3
 8000974:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_RCC_GetSysClockFreq+0x50>)
 8000978:	fb03 f000 	mul.w	r0, r3, r0
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000
 8000984:	007a1200 	.word	0x007a1200
 8000988:	08000bdc 	.word	0x08000bdc
 800098c:	08000bd8 	.word	0x08000bd8
 8000990:	003d0900 	.word	0x003d0900

08000994 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000994:	2800      	cmp	r0, #0
 8000996:	f000 80a0 	beq.w	8000ada <HAL_RCC_ClockConfig+0x146>
{
 800099a:	b570      	push	{r4, r5, r6, lr}
 800099c:	460d      	mov	r5, r1
 800099e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80009a0:	4b52      	ldr	r3, [pc, #328]	@ (8000aec <HAL_RCC_ClockConfig+0x158>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d20b      	bcs.n	80009c4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009ac:	4a4f      	ldr	r2, [pc, #316]	@ (8000aec <HAL_RCC_ClockConfig+0x158>)
 80009ae:	6813      	ldr	r3, [r2, #0]
 80009b0:	f023 0307 	bic.w	r3, r3, #7
 80009b4:	430b      	orrs	r3, r1
 80009b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80009b8:	6813      	ldr	r3, [r2, #0]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	428b      	cmp	r3, r1
 80009c0:	f040 808d 	bne.w	8000ade <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	f013 0f02 	tst.w	r3, #2
 80009ca:	d017      	beq.n	80009fc <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009cc:	f013 0f04 	tst.w	r3, #4
 80009d0:	d004      	beq.n	80009dc <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009d2:	4a47      	ldr	r2, [pc, #284]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 80009d4:	6853      	ldr	r3, [r2, #4]
 80009d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80009da:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	f013 0f08 	tst.w	r3, #8
 80009e2:	d004      	beq.n	80009ee <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009e4:	4a42      	ldr	r2, [pc, #264]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 80009e6:	6853      	ldr	r3, [r2, #4]
 80009e8:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80009ec:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009ee:	4a40      	ldr	r2, [pc, #256]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 80009f0:	6853      	ldr	r3, [r2, #4]
 80009f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80009f6:	68a1      	ldr	r1, [r4, #8]
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	f013 0f01 	tst.w	r3, #1
 8000a02:	d031      	beq.n	8000a68 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a04:	6863      	ldr	r3, [r4, #4]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d020      	beq.n	8000a4c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d025      	beq.n	8000a5a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a0e:	4a38      	ldr	r2, [pc, #224]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	f012 0f02 	tst.w	r2, #2
 8000a16:	d064      	beq.n	8000ae2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a18:	4935      	ldr	r1, [pc, #212]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a1a:	684a      	ldr	r2, [r1, #4]
 8000a1c:	f022 0203 	bic.w	r2, r2, #3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a24:	f7ff fc68 	bl	80002f8 <HAL_GetTick>
 8000a28:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a2a:	4b31      	ldr	r3, [pc, #196]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 030c 	and.w	r3, r3, #12
 8000a32:	6862      	ldr	r2, [r4, #4]
 8000a34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000a38:	d016      	beq.n	8000a68 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a3a:	f7ff fc5d 	bl	80002f8 <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a44:	4298      	cmp	r0, r3
 8000a46:	d9f0      	bls.n	8000a2a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000a48:	2003      	movs	r0, #3
 8000a4a:	e045      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a4c:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000a54:	d1e0      	bne.n	8000a18 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
 8000a58:	e03e      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a5a:	4a25      	ldr	r2, [pc, #148]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000a62:	d1d9      	bne.n	8000a18 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000a64:	2001      	movs	r0, #1
 8000a66:	e037      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <HAL_RCC_ClockConfig+0x158>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	42ab      	cmp	r3, r5
 8000a72:	d90a      	bls.n	8000a8a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a74:	4a1d      	ldr	r2, [pc, #116]	@ (8000aec <HAL_RCC_ClockConfig+0x158>)
 8000a76:	6813      	ldr	r3, [r2, #0]
 8000a78:	f023 0307 	bic.w	r3, r3, #7
 8000a7c:	432b      	orrs	r3, r5
 8000a7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a80:	6813      	ldr	r3, [r2, #0]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	42ab      	cmp	r3, r5
 8000a88:	d12d      	bne.n	8000ae6 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	f013 0f04 	tst.w	r3, #4
 8000a90:	d006      	beq.n	8000aa0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000a94:	6853      	ldr	r3, [r2, #4]
 8000a96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000a9a:	68e1      	ldr	r1, [r4, #12]
 8000a9c:	430b      	orrs	r3, r1
 8000a9e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	f013 0f08 	tst.w	r3, #8
 8000aa6:	d007      	beq.n	8000ab8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000aa8:	4a11      	ldr	r2, [pc, #68]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000aaa:	6853      	ldr	r3, [r2, #4]
 8000aac:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000ab0:	6921      	ldr	r1, [r4, #16]
 8000ab2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ab6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ab8:	f7ff ff42 	bl	8000940 <HAL_RCC_GetSysClockFreq>
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_RCC_ClockConfig+0x15c>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8000af4 <HAL_RCC_ClockConfig+0x160>)
 8000ac6:	5cd3      	ldrb	r3, [r2, r3]
 8000ac8:	40d8      	lsrs	r0, r3
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_RCC_ClockConfig+0x164>)
 8000acc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <HAL_RCC_ClockConfig+0x168>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f7ff fbcd 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 8000ad6:	2000      	movs	r0, #0
}
 8000ad8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ada:	2001      	movs	r0, #1
}
 8000adc:	4770      	bx	lr
    return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e7fa      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e7f8      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	e7f6      	b.n	8000ad8 <HAL_RCC_ClockConfig+0x144>
 8000aea:	bf00      	nop
 8000aec:	40022000 	.word	0x40022000
 8000af0:	40021000 	.word	0x40021000
 8000af4:	08000bec 	.word	0x08000bec
 8000af8:	20000010 	.word	0x20000010
 8000afc:	2000000c 	.word	0x2000000c

08000b00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler>

08000b02 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler>

08000b04 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler>

08000b06 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler>

08000b08 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler>

08000b0a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f7ff fbe5 	bl	80002e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bd08      	pop	{r3, pc}

08000b18 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	4770      	bx	lr
	...

08000b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff fffc 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b22:	490c      	ldr	r1, [pc, #48]	@ (8000b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b24:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b38:	4c09      	ldr	r4, [pc, #36]	@ (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f000 f817 	bl	8000b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fb75 	bl	8000238 <main>
  bx lr
 8000b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b58:	08000c04 	.word	0x08000c04
  ldr r2, =_sbss
 8000b5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b60:	20000088 	.word	0x20000088

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>

08000b66 <memset>:
 8000b66:	4603      	mov	r3, r0
 8000b68:	4402      	add	r2, r0
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d100      	bne.n	8000b70 <memset+0xa>
 8000b6e:	4770      	bx	lr
 8000b70:	f803 1b01 	strb.w	r1, [r3], #1
 8000b74:	e7f9      	b.n	8000b6a <memset+0x4>
	...

08000b78 <__libc_init_array>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8000bb0 <__libc_init_array+0x38>)
 8000b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8000bb4 <__libc_init_array+0x3c>)
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	10a4      	asrs	r4, r4, #2
 8000b84:	42a6      	cmp	r6, r4
 8000b86:	d109      	bne.n	8000b9c <__libc_init_array+0x24>
 8000b88:	f000 f81a 	bl	8000bc0 <_init>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8000bb8 <__libc_init_array+0x40>)
 8000b90:	4c0a      	ldr	r4, [pc, #40]	@ (8000bbc <__libc_init_array+0x44>)
 8000b92:	1b64      	subs	r4, r4, r5
 8000b94:	10a4      	asrs	r4, r4, #2
 8000b96:	42a6      	cmp	r6, r4
 8000b98:	d105      	bne.n	8000ba6 <__libc_init_array+0x2e>
 8000b9a:	bd70      	pop	{r4, r5, r6, pc}
 8000b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba0:	4798      	blx	r3
 8000ba2:	3601      	adds	r6, #1
 8000ba4:	e7ee      	b.n	8000b84 <__libc_init_array+0xc>
 8000ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000baa:	4798      	blx	r3
 8000bac:	3601      	adds	r6, #1
 8000bae:	e7f2      	b.n	8000b96 <__libc_init_array+0x1e>
 8000bb0:	08000bfc 	.word	0x08000bfc
 8000bb4:	08000bfc 	.word	0x08000bfc
 8000bb8:	08000bfc 	.word	0x08000bfc
 8000bbc:	08000c00 	.word	0x08000c00

08000bc0 <_init>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr

08000bcc <_fini>:
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bce:	bf00      	nop
 8000bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bd2:	bc08      	pop	{r3}
 8000bd4:	469e      	mov	lr, r3
 8000bd6:	4770      	bx	lr

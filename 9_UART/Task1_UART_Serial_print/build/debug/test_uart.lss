
build/debug/test_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080019fc  080019fc  000029fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a68  08001a68  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001a68  08001a68  00002a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a70  08001a70  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a70  08001a70  00002a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a74  08001a74  00002a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001a78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08001ad4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08001ad4  00003210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d6d  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001652  00000000  00000000  0000ae35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  0000c488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000047e  00000000  00000000  0000ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006565  00000000  00000000  0000cf0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001d7e  00000000  00000000  00013473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00001374  00000000  00000000  000151f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00003b71  00000000  00000000  00016568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  0001a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080019e4 	.word	0x080019e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080019e4 	.word	0x080019e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800015e:	4b0a      	ldr	r3, [pc, #40]	@ (8000188 <MX_GPIO_Init+0x2c>)
 8000160:	699a      	ldr	r2, [r3, #24]
 8000162:	f042 0220 	orr.w	r2, r2, #32
 8000166:	619a      	str	r2, [r3, #24]
 8000168:	699a      	ldr	r2, [r3, #24]
 800016a:	f002 0220 	and.w	r2, r2, #32
 800016e:	9200      	str	r2, [sp, #0]
 8000170:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000172:	699a      	ldr	r2, [r3, #24]
 8000174:	f042 0204 	orr.w	r2, r2, #4
 8000178:	619a      	str	r2, [r3, #24]
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	f003 0304 	and.w	r3, r3, #4
 8000180:	9301      	str	r3, [sp, #4]
 8000182:	9b01      	ldr	r3, [sp, #4]

}
 8000184:	b002      	add	sp, #8
 8000186:	4770      	bx	lr
 8000188:	40021000 	.word	0x40021000

0800018c <mPrint.0>:

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  void mPrint(const char *format, ...) {
 800018c:	b40f      	push	{r0, r1, r2, r3}
 800018e:	b500      	push	{lr}
 8000190:	b08d      	sub	sp, #52	@ 0x34
 8000192:	ab0e      	add	r3, sp, #56	@ 0x38
 8000194:	f853 2b04 	ldr.w	r2, [r3], #4
      char buffer[40]; 
      va_list args;    
      va_start(args, format);  
 8000198:	9301      	str	r3, [sp, #4]
      vsnprintf(buffer, sizeof(buffer), format, args);
 800019a:	2128      	movs	r1, #40	@ 0x28
 800019c:	a802      	add	r0, sp, #8
 800019e:	f000 ff85 	bl	80010ac <vsniprintf>
      va_end(args); 
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 1000); 
 80001a2:	a802      	add	r0, sp, #8
 80001a4:	f7ff ffd2 	bl	800014c <strlen>
 80001a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001ac:	b282      	uxth	r2, r0
 80001ae:	a902      	add	r1, sp, #8
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <mPrint.0+0x34>)
 80001b2:	f000 fe38 	bl	8000e26 <HAL_UART_Transmit>
  }
 80001b6:	b00d      	add	sp, #52	@ 0x34
 80001b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80001bc:	b004      	add	sp, #16
 80001be:	4770      	bx	lr
 80001c0:	20000080 	.word	0x20000080

080001c4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <Error_Handler+0x2>

080001c8 <SystemClock_Config>:
{
 80001c8:	b500      	push	{lr}
 80001ca:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001cc:	2228      	movs	r2, #40	@ 0x28
 80001ce:	2100      	movs	r1, #0
 80001d0:	a806      	add	r0, sp, #24
 80001d2:	f000 ff79 	bl	80010c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	2300      	movs	r3, #0
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	9304      	str	r3, [sp, #16]
 80001e0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e2:	2302      	movs	r3, #2
 80001e4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e6:	2201      	movs	r2, #1
 80001e8:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ea:	2210      	movs	r2, #16
 80001ec:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	a806      	add	r0, sp, #24
 80001f2:	f000 fa1f 	bl	8000634 <HAL_RCC_OscConfig>
 80001f6:	b970      	cbnz	r0, 8000216 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f8:	230f      	movs	r3, #15
 80001fa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001fc:	2302      	movs	r3, #2
 80001fe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000200:	2100      	movs	r1, #0
 8000202:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000204:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000208:	a801      	add	r0, sp, #4
 800020a:	f000 fc45 	bl	8000a98 <HAL_RCC_ClockConfig>
 800020e:	b920      	cbnz	r0, 800021a <SystemClock_Config+0x52>
}
 8000210:	b011      	add	sp, #68	@ 0x44
 8000212:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000216:	f7ff ffd5 	bl	80001c4 <Error_Handler>
    Error_Handler();
 800021a:	f7ff ffd3 	bl	80001c4 <Error_Handler>
	...

08000220 <main>:
{
 8000220:	b508      	push	{r3, lr}
  HAL_Init();
 8000222:	f000 f833 	bl	800028c <HAL_Init>
  SystemClock_Config();
 8000226:	f7ff ffcf 	bl	80001c8 <SystemClock_Config>
  MX_GPIO_Init();
 800022a:	f7ff ff97 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800022e:	f000 fe93 	bl	8000f58 <MX_USART1_UART_Init>
     mPrint("Phan dat %d", 32);
 8000232:	2120      	movs	r1, #32
 8000234:	4801      	ldr	r0, [pc, #4]	@ (800023c <main+0x1c>)
 8000236:	f7ff ffa9 	bl	800018c <mPrint.0>
  while (1)
 800023a:	e7fa      	b.n	8000232 <main+0x12>
 800023c:	080019fc 	.word	0x080019fc

08000240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000240:	b510      	push	{r4, lr}
 8000242:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000244:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <HAL_InitTick+0x40>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800024c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000250:	4a0c      	ldr	r2, [pc, #48]	@ (8000284 <HAL_InitTick+0x44>)
 8000252:	6810      	ldr	r0, [r2, #0]
 8000254:	fbb0 f0f3 	udiv	r0, r0, r3
 8000258:	f000 f892 	bl	8000380 <HAL_SYSTICK_Config>
 800025c:	b968      	cbnz	r0, 800027a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800025e:	2c0f      	cmp	r4, #15
 8000260:	d901      	bls.n	8000266 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000262:	2001      	movs	r0, #1
 8000264:	e00a      	b.n	800027c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000266:	2200      	movs	r2, #0
 8000268:	4621      	mov	r1, r4
 800026a:	f04f 30ff 	mov.w	r0, #4294967295
 800026e:	f000 f877 	bl	8000360 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000272:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <HAL_InitTick+0x48>)
 8000274:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000276:	2000      	movs	r0, #0
 8000278:	e000      	b.n	800027c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800027a:	2001      	movs	r0, #1
}
 800027c:	bd10      	pop	{r4, pc}
 800027e:	bf00      	nop
 8000280:	20000000 	.word	0x20000000
 8000284:	20000008 	.word	0x20000008
 8000288:	20000004 	.word	0x20000004

0800028c <HAL_Init>:
{
 800028c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <HAL_Init+0x20>)
 8000290:	6813      	ldr	r3, [r2, #0]
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000298:	2003      	movs	r0, #3
 800029a:	f000 f84f 	bl	800033c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800029e:	200f      	movs	r0, #15
 80002a0:	f7ff ffce 	bl	8000240 <HAL_InitTick>
  HAL_MspInit();
 80002a4:	f000 f98e 	bl	80005c4 <HAL_MspInit>
}
 80002a8:	2000      	movs	r0, #0
 80002aa:	bd08      	pop	{r3, pc}
 80002ac:	40022000 	.word	0x40022000

080002b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002b0:	4a03      	ldr	r2, [pc, #12]	@ (80002c0 <HAL_IncTick+0x10>)
 80002b2:	6811      	ldr	r1, [r2, #0]
 80002b4:	4b03      	ldr	r3, [pc, #12]	@ (80002c4 <HAL_IncTick+0x14>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	440b      	add	r3, r1
 80002ba:	6013      	str	r3, [r2, #0]
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	20000078 	.word	0x20000078
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002c8:	4b01      	ldr	r3, [pc, #4]	@ (80002d0 <HAL_GetTick+0x8>)
 80002ca:	6818      	ldr	r0, [r3, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20000078 	.word	0x20000078

080002d4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002d4:	2800      	cmp	r0, #0
 80002d6:	db08      	blt.n	80002ea <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	0109      	lsls	r1, r1, #4
 80002da:	b2c9      	uxtb	r1, r1
 80002dc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80002e0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80002e4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80002e8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	and.w	r0, r0, #15
 80002ee:	0109      	lsls	r1, r1, #4
 80002f0:	b2c9      	uxtb	r1, r1
 80002f2:	4b01      	ldr	r3, [pc, #4]	@ (80002f8 <__NVIC_SetPriority+0x24>)
 80002f4:	5419      	strb	r1, [r3, r0]
  }
}
 80002f6:	4770      	bx	lr
 80002f8:	e000ed14 	.word	0xe000ed14

080002fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002fc:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002fe:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000302:	f1c0 0c07 	rsb	ip, r0, #7
 8000306:	f1bc 0f04 	cmp.w	ip, #4
 800030a:	bf28      	it	cs
 800030c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000310:	1d03      	adds	r3, r0, #4
 8000312:	2b06      	cmp	r3, #6
 8000314:	d90f      	bls.n	8000336 <NVIC_EncodePriority+0x3a>
 8000316:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 3eff 	mov.w	lr, #4294967295
 800031c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000320:	ea21 0100 	bic.w	r1, r1, r0
 8000324:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000326:	fa0e fe03 	lsl.w	lr, lr, r3
 800032a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800032e:	ea41 0002 	orr.w	r0, r1, r2
 8000332:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	2300      	movs	r3, #0
 8000338:	e7ee      	b.n	8000318 <NVIC_EncodePriority+0x1c>
	...

0800033c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4a07      	ldr	r2, [pc, #28]	@ (800035c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800033e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000340:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000344:	041b      	lsls	r3, r3, #16
 8000346:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000348:	0200      	lsls	r0, r0, #8
 800034a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800034e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000350:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000358:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00

08000360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000360:	b510      	push	{r4, lr}
 8000362:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <HAL_NVIC_SetPriority+0x1c>)
 8000366:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000368:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800036c:	f7ff ffc6 	bl	80002fc <NVIC_EncodePriority>
 8000370:	4601      	mov	r1, r0
 8000372:	4620      	mov	r0, r4
 8000374:	f7ff ffae 	bl	80002d4 <__NVIC_SetPriority>
}
 8000378:	bd10      	pop	{r4, pc}
 800037a:	bf00      	nop
 800037c:	e000ed00 	.word	0xe000ed00

08000380 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000380:	3801      	subs	r0, #1
 8000382:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000386:	d20b      	bcs.n	80003a0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000388:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800038c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038e:	4a05      	ldr	r2, [pc, #20]	@ (80003a4 <HAL_SYSTICK_Config+0x24>)
 8000390:	21f0      	movs	r1, #240	@ 0xf0
 8000392:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000396:	2000      	movs	r0, #0
 8000398:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039a:	2207      	movs	r2, #7
 800039c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800039e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003a0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003a2:	4770      	bx	lr
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003ac:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80003ae:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80003b0:	e0a1      	b.n	80004f6 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003b2:	4d7e      	ldr	r5, [pc, #504]	@ (80005ac <HAL_GPIO_Init+0x204>)
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d014      	beq.n	80003e2 <HAL_GPIO_Init+0x3a>
 80003b8:	d80c      	bhi.n	80003d4 <HAL_GPIO_Init+0x2c>
 80003ba:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d00f      	beq.n	80003e2 <HAL_GPIO_Init+0x3a>
 80003c2:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d00b      	beq.n	80003e2 <HAL_GPIO_Init+0x3a>
 80003ca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d110      	bne.n	80003f4 <HAL_GPIO_Init+0x4c>
 80003d2:	e006      	b.n	80003e2 <HAL_GPIO_Init+0x3a>
 80003d4:	4d76      	ldr	r5, [pc, #472]	@ (80005b0 <HAL_GPIO_Init+0x208>)
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d003      	beq.n	80003e2 <HAL_GPIO_Init+0x3a>
 80003da:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d108      	bne.n	80003f4 <HAL_GPIO_Init+0x4c>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003e2:	688b      	ldr	r3, [r1, #8]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d050      	beq.n	800048a <HAL_GPIO_Init+0xe2>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d049      	beq.n	8000480 <HAL_GPIO_Init+0xd8>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80003ec:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003ee:	2408      	movs	r4, #8
 80003f0:	e000      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003f2:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80003f8:	d849      	bhi.n	800048e <HAL_GPIO_Init+0xe6>
 80003fa:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80003fc:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000400:	6833      	ldr	r3, [r6, #0]
 8000402:	250f      	movs	r5, #15
 8000404:	4095      	lsls	r5, r2
 8000406:	ea23 0305 	bic.w	r3, r3, r5
 800040a:	fa04 f202 	lsl.w	r2, r4, r2
 800040e:	4313      	orrs	r3, r2
 8000410:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000412:	684b      	ldr	r3, [r1, #4]
 8000414:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000418:	d06b      	beq.n	80004f2 <HAL_GPIO_Init+0x14a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b66      	ldr	r3, [pc, #408]	@ (80005b4 <HAL_GPIO_Init+0x20c>)
 800041c:	699a      	ldr	r2, [r3, #24]
 800041e:	f042 0201 	orr.w	r2, r2, #1
 8000422:	619a      	str	r2, [r3, #24]
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800042e:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000432:	1c95      	adds	r5, r2, #2
 8000434:	4b60      	ldr	r3, [pc, #384]	@ (80005b8 <HAL_GPIO_Init+0x210>)
 8000436:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800043a:	f00c 0503 	and.w	r5, ip, #3
 800043e:	00ad      	lsls	r5, r5, #2
 8000440:	230f      	movs	r3, #15
 8000442:	40ab      	lsls	r3, r5
 8000444:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000448:	4b5c      	ldr	r3, [pc, #368]	@ (80005bc <HAL_GPIO_Init+0x214>)
 800044a:	4298      	cmp	r0, r3
 800044c:	d026      	beq.n	800049c <HAL_GPIO_Init+0xf4>
 800044e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000452:	4298      	cmp	r0, r3
 8000454:	f000 808c 	beq.w	8000570 <HAL_GPIO_Init+0x1c8>
 8000458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800045c:	4298      	cmp	r0, r3
 800045e:	f000 8089 	beq.w	8000574 <HAL_GPIO_Init+0x1cc>
 8000462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000466:	4298      	cmp	r0, r3
 8000468:	d016      	beq.n	8000498 <HAL_GPIO_Init+0xf0>
 800046a:	2304      	movs	r3, #4
 800046c:	e017      	b.n	800049e <HAL_GPIO_Init+0xf6>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800046e:	68cc      	ldr	r4, [r1, #12]
 8000470:	3404      	adds	r4, #4
          break;
 8000472:	e7bf      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000474:	68cc      	ldr	r4, [r1, #12]
 8000476:	3408      	adds	r4, #8
          break;
 8000478:	e7bc      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800047a:	68cc      	ldr	r4, [r1, #12]
 800047c:	340c      	adds	r4, #12
          break;
 800047e:	e7b9      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
            GPIOx->BSRR = ioposition;
 8000480:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000482:	2408      	movs	r4, #8
 8000484:	e7b6      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000486:	2400      	movs	r4, #0
 8000488:	e7b4      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800048a:	2404      	movs	r4, #4
 800048c:	e7b2      	b.n	80003f4 <HAL_GPIO_Init+0x4c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800048e:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000490:	f1ac 0208 	sub.w	r2, ip, #8
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	e7b3      	b.n	8000400 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000498:	2303      	movs	r3, #3
 800049a:	e000      	b.n	800049e <HAL_GPIO_Init+0xf6>
 800049c:	2300      	movs	r3, #0
 800049e:	40ab      	lsls	r3, r5
 80004a0:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80004a2:	3202      	adds	r2, #2
 80004a4:	4d44      	ldr	r5, [pc, #272]	@ (80005b8 <HAL_GPIO_Init+0x210>)
 80004a6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004aa:	684b      	ldr	r3, [r1, #4]
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	d062      	beq.n	8000578 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004b2:	4a43      	ldr	r2, [pc, #268]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 80004b4:	6893      	ldr	r3, [r2, #8]
 80004b6:	ea43 030e 	orr.w	r3, r3, lr
 80004ba:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004bc:	684b      	ldr	r3, [r1, #4]
 80004be:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 80004c2:	d05f      	beq.n	8000584 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004c4:	4a3e      	ldr	r2, [pc, #248]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 80004c6:	68d3      	ldr	r3, [r2, #12]
 80004c8:	ea43 030e 	orr.w	r3, r3, lr
 80004cc:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ce:	684b      	ldr	r3, [r1, #4]
 80004d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80004d4:	d05c      	beq.n	8000590 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80004d6:	4a3a      	ldr	r2, [pc, #232]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 80004d8:	6853      	ldr	r3, [r2, #4]
 80004da:	ea43 030e 	orr.w	r3, r3, lr
 80004de:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e0:	684b      	ldr	r3, [r1, #4]
 80004e2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80004e6:	d059      	beq.n	800059c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80004e8:	4a35      	ldr	r2, [pc, #212]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 80004ea:	6813      	ldr	r3, [r2, #0]
 80004ec:	ea43 030e 	orr.w	r3, r3, lr
 80004f0:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80004f2:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f6:	680b      	ldr	r3, [r1, #0]
 80004f8:	fa33 f20c 	lsrs.w	r2, r3, ip
 80004fc:	d054      	beq.n	80005a8 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80004fe:	2201      	movs	r2, #1
 8000500:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000504:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000508:	ea32 0303 	bics.w	r3, r2, r3
 800050c:	d1f1      	bne.n	80004f2 <HAL_GPIO_Init+0x14a>
      switch (GPIO_Init->Mode)
 800050e:	684b      	ldr	r3, [r1, #4]
 8000510:	2b12      	cmp	r3, #18
 8000512:	f63f af4e 	bhi.w	80003b2 <HAL_GPIO_Init+0xa>
 8000516:	2b12      	cmp	r3, #18
 8000518:	f63f af6c 	bhi.w	80003f4 <HAL_GPIO_Init+0x4c>
 800051c:	a501      	add	r5, pc, #4	@ (adr r5, 8000524 <HAL_GPIO_Init+0x17c>)
 800051e:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	080003e3 	.word	0x080003e3
 8000528:	080003f3 	.word	0x080003f3
 800052c:	08000475 	.word	0x08000475
 8000530:	08000487 	.word	0x08000487
 8000534:	080003f5 	.word	0x080003f5
 8000538:	080003f5 	.word	0x080003f5
 800053c:	080003f5 	.word	0x080003f5
 8000540:	080003f5 	.word	0x080003f5
 8000544:	080003f5 	.word	0x080003f5
 8000548:	080003f5 	.word	0x080003f5
 800054c:	080003f5 	.word	0x080003f5
 8000550:	080003f5 	.word	0x080003f5
 8000554:	080003f5 	.word	0x080003f5
 8000558:	080003f5 	.word	0x080003f5
 800055c:	080003f5 	.word	0x080003f5
 8000560:	080003f5 	.word	0x080003f5
 8000564:	080003f5 	.word	0x080003f5
 8000568:	0800046f 	.word	0x0800046f
 800056c:	0800047b 	.word	0x0800047b
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000570:	2301      	movs	r3, #1
 8000572:	e794      	b.n	800049e <HAL_GPIO_Init+0xf6>
 8000574:	2302      	movs	r3, #2
 8000576:	e792      	b.n	800049e <HAL_GPIO_Init+0xf6>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000578:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 800057a:	6893      	ldr	r3, [r2, #8]
 800057c:	ea23 030e 	bic.w	r3, r3, lr
 8000580:	6093      	str	r3, [r2, #8]
 8000582:	e79b      	b.n	80004bc <HAL_GPIO_Init+0x114>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000584:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 8000586:	68d3      	ldr	r3, [r2, #12]
 8000588:	ea23 030e 	bic.w	r3, r3, lr
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	e79e      	b.n	80004ce <HAL_GPIO_Init+0x126>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000590:	4a0b      	ldr	r2, [pc, #44]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 8000592:	6853      	ldr	r3, [r2, #4]
 8000594:	ea23 030e 	bic.w	r3, r3, lr
 8000598:	6053      	str	r3, [r2, #4]
 800059a:	e7a1      	b.n	80004e0 <HAL_GPIO_Init+0x138>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800059c:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_GPIO_Init+0x218>)
 800059e:	6813      	ldr	r3, [r2, #0]
 80005a0:	ea23 030e 	bic.w	r3, r3, lr
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	e7a4      	b.n	80004f2 <HAL_GPIO_Init+0x14a>
  }
}
 80005a8:	b002      	add	sp, #8
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	10220000 	.word	0x10220000
 80005b0:	10310000 	.word	0x10310000
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000
 80005bc:	40010800 	.word	0x40010800
 80005c0:	40010400 	.word	0x40010400

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <HAL_MspInit+0x3c>)
 80005c8:	699a      	ldr	r2, [r3, #24]
 80005ca:	f042 0201 	orr.w	r2, r2, #1
 80005ce:	619a      	str	r2, [r3, #24]
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	f002 0201 	and.w	r2, r2, #1
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	69da      	ldr	r2, [r3, #28]
 80005dc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80005e0:	61da      	str	r2, [r3, #28]
 80005e2:	69db      	ldr	r3, [r3, #28]
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ec:	4a05      	ldr	r2, [pc, #20]	@ (8000604 <HAL_MspInit+0x40>)
 80005ee:	6853      	ldr	r3, [r2, #4]
 80005f0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	b002      	add	sp, #8
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40010000 	.word	0x40010000

08000608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000608:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <RCC_Delay+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a08      	ldr	r2, [pc, #32]	@ (8000630 <RCC_Delay+0x28>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	0a5b      	lsrs	r3, r3, #9
 8000616:	fb00 f303 	mul.w	r3, r0, r3
 800061a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800061c:	bf00      	nop
  }
  while (Delay --);
 800061e:	9b01      	ldr	r3, [sp, #4]
 8000620:	1e5a      	subs	r2, r3, #1
 8000622:	9201      	str	r2, [sp, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f9      	bne.n	800061c <RCC_Delay+0x14>
}
 8000628:	b002      	add	sp, #8
 800062a:	4770      	bx	lr
 800062c:	20000008 	.word	0x20000008
 8000630:	10624dd3 	.word	0x10624dd3

08000634 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000634:	2800      	cmp	r0, #0
 8000636:	f000 81f1 	beq.w	8000a1c <HAL_RCC_OscConfig+0x3e8>
{
 800063a:	b570      	push	{r4, r5, r6, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000640:	6803      	ldr	r3, [r0, #0]
 8000642:	f013 0f01 	tst.w	r3, #1
 8000646:	d02c      	beq.n	80006a2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000648:	4b99      	ldr	r3, [pc, #612]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f003 030c 	and.w	r3, r3, #12
 8000650:	2b04      	cmp	r3, #4
 8000652:	d01d      	beq.n	8000690 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000654:	4b96      	ldr	r3, [pc, #600]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f003 030c 	and.w	r3, r3, #12
 800065c:	2b08      	cmp	r3, #8
 800065e:	d012      	beq.n	8000686 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000660:	6863      	ldr	r3, [r4, #4]
 8000662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000666:	d041      	beq.n	80006ec <HAL_RCC_OscConfig+0xb8>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d155      	bne.n	8000718 <HAL_RCC_OscConfig+0xe4>
 800066c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000670:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e037      	b.n	80006f6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000686:	4b8a      	ldr	r3, [pc, #552]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800068e:	d0e7      	beq.n	8000660 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000690:	4b87      	ldr	r3, [pc, #540]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000698:	d003      	beq.n	80006a2 <HAL_RCC_OscConfig+0x6e>
 800069a:	6863      	ldr	r3, [r4, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	f000 81bf 	beq.w	8000a20 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	f013 0f02 	tst.w	r3, #2
 80006a8:	d075      	beq.n	8000796 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80006aa:	4b81      	ldr	r3, [pc, #516]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	f013 0f0c 	tst.w	r3, #12
 80006b2:	d05f      	beq.n	8000774 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006b4:	4b7e      	ldr	r3, [pc, #504]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 030c 	and.w	r3, r3, #12
 80006bc:	2b08      	cmp	r3, #8
 80006be:	d054      	beq.n	800076a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006c0:	6923      	ldr	r3, [r4, #16]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f000 808a 	beq.w	80007dc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80006c8:	4b7a      	ldr	r3, [pc, #488]	@ (80008b4 <HAL_RCC_OscConfig+0x280>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006ce:	f7ff fdfb 	bl	80002c8 <HAL_GetTick>
 80006d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006d4:	4b76      	ldr	r3, [pc, #472]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f013 0f02 	tst.w	r3, #2
 80006dc:	d175      	bne.n	80007ca <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80006de:	f7ff fdf3 	bl	80002c8 <HAL_GetTick>
 80006e2:	1b40      	subs	r0, r0, r5
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9f5      	bls.n	80006d4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80006e8:	2003      	movs	r0, #3
 80006ea:	e19e      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ec:	4a70      	ldr	r2, [pc, #448]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80006ee:	6813      	ldr	r3, [r2, #0]
 80006f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006f4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	b343      	cbz	r3, 800074c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80006fa:	f7ff fde5 	bl	80002c8 <HAL_GetTick>
 80006fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000700:	4b6b      	ldr	r3, [pc, #428]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000708:	d1cb      	bne.n	80006a2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800070a:	f7ff fddd 	bl	80002c8 <HAL_GetTick>
 800070e:	1b40      	subs	r0, r0, r5
 8000710:	2864      	cmp	r0, #100	@ 0x64
 8000712:	d9f5      	bls.n	8000700 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000714:	2003      	movs	r0, #3
 8000716:	e188      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800071c:	d009      	beq.n	8000732 <HAL_RCC_OscConfig+0xfe>
 800071e:	4b64      	ldr	r3, [pc, #400]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e7e1      	b.n	80006f6 <HAL_RCC_OscConfig+0xc2>
 8000732:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000736:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e7d4      	b.n	80006f6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800074c:	f7ff fdbc 	bl	80002c8 <HAL_GetTick>
 8000750:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000752:	4b57      	ldr	r3, [pc, #348]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800075a:	d0a2      	beq.n	80006a2 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800075c:	f7ff fdb4 	bl	80002c8 <HAL_GetTick>
 8000760:	1b40      	subs	r0, r0, r5
 8000762:	2864      	cmp	r0, #100	@ 0x64
 8000764:	d9f5      	bls.n	8000752 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000766:	2003      	movs	r0, #3
 8000768:	e15f      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800076a:	4b51      	ldr	r3, [pc, #324]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000772:	d1a5      	bne.n	80006c0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000774:	4b4e      	ldr	r3, [pc, #312]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f013 0f02 	tst.w	r3, #2
 800077c:	d003      	beq.n	8000786 <HAL_RCC_OscConfig+0x152>
 800077e:	6923      	ldr	r3, [r4, #16]
 8000780:	2b01      	cmp	r3, #1
 8000782:	f040 814f 	bne.w	8000a24 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000786:	4a4a      	ldr	r2, [pc, #296]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000788:	6813      	ldr	r3, [r2, #0]
 800078a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800078e:	6961      	ldr	r1, [r4, #20]
 8000790:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000794:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	f013 0f08 	tst.w	r3, #8
 800079c:	d033      	beq.n	8000806 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800079e:	69a3      	ldr	r3, [r4, #24]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d05c      	beq.n	800085e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80007a4:	4b43      	ldr	r3, [pc, #268]	@ (80008b4 <HAL_RCC_OscConfig+0x280>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80007ac:	f7ff fd8c 	bl	80002c8 <HAL_GetTick>
 80007b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007b2:	4b3f      	ldr	r3, [pc, #252]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80007b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b6:	f013 0f02 	tst.w	r3, #2
 80007ba:	d121      	bne.n	8000800 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007bc:	f7ff fd84 	bl	80002c8 <HAL_GetTick>
 80007c0:	1b40      	subs	r0, r0, r5
 80007c2:	2802      	cmp	r0, #2
 80007c4:	d9f5      	bls.n	80007b2 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 80007c6:	2003      	movs	r0, #3
 80007c8:	e12f      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007ca:	4a39      	ldr	r2, [pc, #228]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80007d2:	6961      	ldr	r1, [r4, #20]
 80007d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	e7dc      	b.n	8000796 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80007dc:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <HAL_RCC_OscConfig+0x280>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e2:	f7ff fd71 	bl	80002c8 <HAL_GetTick>
 80007e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007e8:	4b31      	ldr	r3, [pc, #196]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f013 0f02 	tst.w	r3, #2
 80007f0:	d0d1      	beq.n	8000796 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80007f2:	f7ff fd69 	bl	80002c8 <HAL_GetTick>
 80007f6:	1b40      	subs	r0, r0, r5
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9f5      	bls.n	80007e8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80007fc:	2003      	movs	r0, #3
 80007fe:	e114      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff01 	bl	8000608 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	f013 0f04 	tst.w	r3, #4
 800080c:	f000 8096 	beq.w	800093c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000818:	d134      	bne.n	8000884 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 800081c:	69da      	ldr	r2, [r3, #28]
 800081e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000822:	61da      	str	r2, [r3, #28]
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800082e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <HAL_RCC_OscConfig+0x284>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000838:	d026      	beq.n	8000888 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800083a:	68e3      	ldr	r3, [r4, #12]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d03d      	beq.n	80008bc <HAL_RCC_OscConfig+0x288>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d153      	bne.n	80008ec <HAL_RCC_OscConfig+0x2b8>
 8000844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000848:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800084c:	6a1a      	ldr	r2, [r3, #32]
 800084e:	f022 0201 	bic.w	r2, r2, #1
 8000852:	621a      	str	r2, [r3, #32]
 8000854:	6a1a      	ldr	r2, [r3, #32]
 8000856:	f022 0204 	bic.w	r2, r2, #4
 800085a:	621a      	str	r2, [r3, #32]
 800085c:	e033      	b.n	80008c6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_RCC_OscConfig+0x280>)
 8000860:	2200      	movs	r2, #0
 8000862:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000866:	f7ff fd2f 	bl	80002c8 <HAL_GetTick>
 800086a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <HAL_RCC_OscConfig+0x27c>)
 800086e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000870:	f013 0f02 	tst.w	r3, #2
 8000874:	d0c7      	beq.n	8000806 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000876:	f7ff fd27 	bl	80002c8 <HAL_GetTick>
 800087a:	1b40      	subs	r0, r0, r5
 800087c:	2802      	cmp	r0, #2
 800087e:	d9f5      	bls.n	800086c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8000880:	2003      	movs	r0, #3
 8000882:	e0d2      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8000884:	2500      	movs	r5, #0
 8000886:	e7d3      	b.n	8000830 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000888:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <HAL_RCC_OscConfig+0x284>)
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000890:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000892:	f7ff fd19 	bl	80002c8 <HAL_GetTick>
 8000896:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <HAL_RCC_OscConfig+0x284>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80008a0:	d1cb      	bne.n	800083a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008a2:	f7ff fd11 	bl	80002c8 <HAL_GetTick>
 80008a6:	1b80      	subs	r0, r0, r6
 80008a8:	2864      	cmp	r0, #100	@ 0x64
 80008aa:	d9f5      	bls.n	8000898 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80008ac:	2003      	movs	r0, #3
 80008ae:	e0bc      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
 80008b0:	40021000 	.word	0x40021000
 80008b4:	42420000 	.word	0x42420000
 80008b8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008bc:	4a5f      	ldr	r2, [pc, #380]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80008be:	6a13      	ldr	r3, [r2, #32]
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80008c6:	68e3      	ldr	r3, [r4, #12]
 80008c8:	b333      	cbz	r3, 8000918 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80008ca:	f7ff fcfd 	bl	80002c8 <HAL_GetTick>
 80008ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008d0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	f013 0f02 	tst.w	r3, #2
 80008d8:	d12f      	bne.n	800093a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008da:	f7ff fcf5 	bl	80002c8 <HAL_GetTick>
 80008de:	1b80      	subs	r0, r0, r6
 80008e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008e4:	4298      	cmp	r0, r3
 80008e6:	d9f3      	bls.n	80008d0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80008e8:	2003      	movs	r0, #3
 80008ea:	e09e      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ec:	2b05      	cmp	r3, #5
 80008ee:	d009      	beq.n	8000904 <HAL_RCC_OscConfig+0x2d0>
 80008f0:	4b52      	ldr	r3, [pc, #328]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80008f2:	6a1a      	ldr	r2, [r3, #32]
 80008f4:	f022 0201 	bic.w	r2, r2, #1
 80008f8:	621a      	str	r2, [r3, #32]
 80008fa:	6a1a      	ldr	r2, [r3, #32]
 80008fc:	f022 0204 	bic.w	r2, r2, #4
 8000900:	621a      	str	r2, [r3, #32]
 8000902:	e7e0      	b.n	80008c6 <HAL_RCC_OscConfig+0x292>
 8000904:	4b4d      	ldr	r3, [pc, #308]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	f042 0204 	orr.w	r2, r2, #4
 800090c:	621a      	str	r2, [r3, #32]
 800090e:	6a1a      	ldr	r2, [r3, #32]
 8000910:	f042 0201 	orr.w	r2, r2, #1
 8000914:	621a      	str	r2, [r3, #32]
 8000916:	e7d6      	b.n	80008c6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8000918:	f7ff fcd6 	bl	80002c8 <HAL_GetTick>
 800091c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800091e:	4b47      	ldr	r3, [pc, #284]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000920:	6a1b      	ldr	r3, [r3, #32]
 8000922:	f013 0f02 	tst.w	r3, #2
 8000926:	d008      	beq.n	800093a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000928:	f7ff fcce 	bl	80002c8 <HAL_GetTick>
 800092c:	1b80      	subs	r0, r0, r6
 800092e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000932:	4298      	cmp	r0, r3
 8000934:	d9f3      	bls.n	800091e <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8000936:	2003      	movs	r0, #3
 8000938:	e077      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800093a:	b9e5      	cbnz	r5, 8000976 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800093c:	69e3      	ldr	r3, [r4, #28]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d072      	beq.n	8000a28 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000942:	4a3e      	ldr	r2, [pc, #248]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000944:	6852      	ldr	r2, [r2, #4]
 8000946:	f002 020c 	and.w	r2, r2, #12
 800094a:	2a08      	cmp	r2, #8
 800094c:	d056      	beq.n	80009fc <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800094e:	2b02      	cmp	r3, #2
 8000950:	d017      	beq.n	8000982 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8000952:	4b3b      	ldr	r3, [pc, #236]	@ (8000a40 <HAL_RCC_OscConfig+0x40c>)
 8000954:	2200      	movs	r2, #0
 8000956:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000958:	f7ff fcb6 	bl	80002c8 <HAL_GetTick>
 800095c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095e:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000966:	d047      	beq.n	80009f8 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000968:	f7ff fcae 	bl	80002c8 <HAL_GetTick>
 800096c:	1b00      	subs	r0, r0, r4
 800096e:	2802      	cmp	r0, #2
 8000970:	d9f5      	bls.n	800095e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8000972:	2003      	movs	r0, #3
 8000974:	e059      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000976:	4a31      	ldr	r2, [pc, #196]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000978:	69d3      	ldr	r3, [r2, #28]
 800097a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800097e:	61d3      	str	r3, [r2, #28]
 8000980:	e7dc      	b.n	800093c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8000982:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_RCC_OscConfig+0x40c>)
 8000984:	2200      	movs	r2, #0
 8000986:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000988:	f7ff fc9e 	bl	80002c8 <HAL_GetTick>
 800098c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800098e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000996:	d006      	beq.n	80009a6 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000998:	f7ff fc96 	bl	80002c8 <HAL_GetTick>
 800099c:	1b40      	subs	r0, r0, r5
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f5      	bls.n	800098e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80009a2:	2003      	movs	r0, #3
 80009a4:	e041      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009a6:	6a23      	ldr	r3, [r4, #32]
 80009a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009ac:	d01a      	beq.n	80009e4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009ae:	4923      	ldr	r1, [pc, #140]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80009b0:	684b      	ldr	r3, [r1, #4]
 80009b2:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80009b6:	6a22      	ldr	r2, [r4, #32]
 80009b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80009ba:	4302      	orrs	r2, r0
 80009bc:	4313      	orrs	r3, r2
 80009be:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <HAL_RCC_OscConfig+0x40c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80009c6:	f7ff fc7f 	bl	80002c8 <HAL_GetTick>
 80009ca:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80009d4:	d10e      	bne.n	80009f4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80009d6:	f7ff fc77 	bl	80002c8 <HAL_GetTick>
 80009da:	1b00      	subs	r0, r0, r4
 80009dc:	2802      	cmp	r0, #2
 80009de:	d9f5      	bls.n	80009cc <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80009e0:	2003      	movs	r0, #3
 80009e2:	e022      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009e4:	4a15      	ldr	r2, [pc, #84]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 80009e6:	6853      	ldr	r3, [r2, #4]
 80009e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80009ec:	68a1      	ldr	r1, [r4, #8]
 80009ee:	430b      	orrs	r3, r1
 80009f0:	6053      	str	r3, [r2, #4]
 80009f2:	e7dc      	b.n	80009ae <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80009f4:	2000      	movs	r0, #0
 80009f6:	e018      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
 80009f8:	2000      	movs	r0, #0
 80009fa:	e016      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d016      	beq.n	8000a2e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_RCC_OscConfig+0x408>)
 8000a02:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a04:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8000a08:	6a22      	ldr	r2, [r4, #32]
 8000a0a:	4291      	cmp	r1, r2
 8000a0c:	d111      	bne.n	8000a32 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a0e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000a12:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d10e      	bne.n	8000a36 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
 8000a1a:	e006      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8000a1c:	2001      	movs	r0, #1
}
 8000a1e:	4770      	bx	lr
        return HAL_ERROR;
 8000a20:	2001      	movs	r0, #1
 8000a22:	e002      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	e000      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8000a28:	2000      	movs	r0, #0
}
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000a2e:	2001      	movs	r0, #1
 8000a30:	e7fb      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8000a32:	2001      	movs	r0, #1
 8000a34:	e7f9      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
 8000a36:	2001      	movs	r0, #1
 8000a38:	e7f7      	b.n	8000a2a <HAL_RCC_OscConfig+0x3f6>
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	42420000 	.word	0x42420000

08000a44 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_RCC_GetSysClockFreq+0x40>)
 8000a46:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a48:	f003 020c 	and.w	r2, r3, #12
 8000a4c:	2a08      	cmp	r2, #8
 8000a4e:	d001      	beq.n	8000a54 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8000a50:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8000a52:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a54:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <HAL_RCC_GetSysClockFreq+0x48>)
 8000a5a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a5c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000a60:	d00b      	beq.n	8000a7a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_RCC_GetSysClockFreq+0x40>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000a6a:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <HAL_RCC_GetSysClockFreq+0x4c>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000a6e:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <HAL_RCC_GetSysClockFreq+0x44>)
 8000a70:	fb02 f000 	mul.w	r0, r2, r0
 8000a74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a78:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a7c:	fb03 f000 	mul.w	r0, r3, r0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	007a1200 	.word	0x007a1200
 8000a8c:	08001a0c 	.word	0x08001a0c
 8000a90:	08001a08 	.word	0x08001a08
 8000a94:	003d0900 	.word	0x003d0900

08000a98 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	f000 80a0 	beq.w	8000bde <HAL_RCC_ClockConfig+0x146>
{
 8000a9e:	b570      	push	{r4, r5, r6, lr}
 8000aa0:	460d      	mov	r5, r1
 8000aa2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000aa4:	4b52      	ldr	r3, [pc, #328]	@ (8000bf0 <HAL_RCC_ClockConfig+0x158>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d20b      	bcs.n	8000ac8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf0 <HAL_RCC_ClockConfig+0x158>)
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	f023 0307 	bic.w	r3, r3, #7
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000abc:	6813      	ldr	r3, [r2, #0]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	f040 808d 	bne.w	8000be2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	f013 0f02 	tst.w	r3, #2
 8000ace:	d017      	beq.n	8000b00 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ad0:	f013 0f04 	tst.w	r3, #4
 8000ad4:	d004      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ad6:	4a47      	ldr	r2, [pc, #284]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000ad8:	6853      	ldr	r3, [r2, #4]
 8000ada:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000ade:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	f013 0f08 	tst.w	r3, #8
 8000ae6:	d004      	beq.n	8000af2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ae8:	4a42      	ldr	r2, [pc, #264]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000aea:	6853      	ldr	r3, [r2, #4]
 8000aec:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000af0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000af2:	4a40      	ldr	r2, [pc, #256]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000af4:	6853      	ldr	r3, [r2, #4]
 8000af6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000afa:	68a1      	ldr	r1, [r4, #8]
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	f013 0f01 	tst.w	r3, #1
 8000b06:	d031      	beq.n	8000b6c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d020      	beq.n	8000b50 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d025      	beq.n	8000b5e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b12:	4a38      	ldr	r2, [pc, #224]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	f012 0f02 	tst.w	r2, #2
 8000b1a:	d064      	beq.n	8000be6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b1c:	4935      	ldr	r1, [pc, #212]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b1e:	684a      	ldr	r2, [r1, #4]
 8000b20:	f022 0203 	bic.w	r2, r2, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000b28:	f7ff fbce 	bl	80002c8 <HAL_GetTick>
 8000b2c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b2e:	4b31      	ldr	r3, [pc, #196]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	6862      	ldr	r2, [r4, #4]
 8000b38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b3c:	d016      	beq.n	8000b6c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3e:	f7ff fbc3 	bl	80002c8 <HAL_GetTick>
 8000b42:	1b80      	subs	r0, r0, r6
 8000b44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d9f0      	bls.n	8000b2e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e045      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b50:	4a28      	ldr	r2, [pc, #160]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000b58:	d1e0      	bne.n	8000b1c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	e03e      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b5e:	4a25      	ldr	r2, [pc, #148]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8000b66:	d1d9      	bne.n	8000b1c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8000b68:	2001      	movs	r0, #1
 8000b6a:	e037      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_RCC_ClockConfig+0x158>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	d90a      	bls.n	8000b8e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b78:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf0 <HAL_RCC_ClockConfig+0x158>)
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f023 0307 	bic.w	r3, r3, #7
 8000b80:	432b      	orrs	r3, r5
 8000b82:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b84:	6813      	ldr	r3, [r2, #0]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	42ab      	cmp	r3, r5
 8000b8c:	d12d      	bne.n	8000bea <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b8e:	6823      	ldr	r3, [r4, #0]
 8000b90:	f013 0f04 	tst.w	r3, #4
 8000b94:	d006      	beq.n	8000ba4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000b98:	6853      	ldr	r3, [r2, #4]
 8000b9a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000b9e:	68e1      	ldr	r1, [r4, #12]
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	f013 0f08 	tst.w	r3, #8
 8000baa:	d007      	beq.n	8000bbc <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bac:	4a11      	ldr	r2, [pc, #68]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000bae:	6853      	ldr	r3, [r2, #4]
 8000bb0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8000bb4:	6921      	ldr	r1, [r4, #16]
 8000bb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000bba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000bbc:	f7ff ff42 	bl	8000a44 <HAL_RCC_GetSysClockFreq>
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_RCC_ClockConfig+0x15c>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf8 <HAL_RCC_ClockConfig+0x160>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	40d8      	lsrs	r0, r3
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_RCC_ClockConfig+0x164>)
 8000bd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_RCC_ClockConfig+0x168>)
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f7ff fb33 	bl	8000240 <HAL_InitTick>
  return HAL_OK;
 8000bda:	2000      	movs	r0, #0
}
 8000bdc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000bde:	2001      	movs	r0, #1
}
 8000be0:	4770      	bx	lr
    return HAL_ERROR;
 8000be2:	2001      	movs	r0, #1
 8000be4:	e7fa      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8000be6:	2001      	movs	r0, #1
 8000be8:	e7f8      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8000bea:	2001      	movs	r0, #1
 8000bec:	e7f6      	b.n	8000bdc <HAL_RCC_ClockConfig+0x144>
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	08001a24 	.word	0x08001a24
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_RCC_GetHCLKFreq>:
}
 8000c04:	4b01      	ldr	r3, [pc, #4]	@ (8000c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <HAL_RCC_GetPCLK1Freq>:
{
 8000c10:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c12:	f7ff fff7 	bl	8000c04 <HAL_RCC_GetHCLKFreq>
 8000c16:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000c1e:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c20:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c22:	40d8      	lsrs	r0, r3
 8000c24:	bd08      	pop	{r3, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	08001a1c 	.word	0x08001a1c

08000c30 <HAL_RCC_GetPCLK2Freq>:
{
 8000c30:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c32:	f7ff ffe7 	bl	8000c04 <HAL_RCC_GetHCLKFreq>
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c3e:	4a03      	ldr	r2, [pc, #12]	@ (8000c4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000c40:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c42:	40d8      	lsrs	r0, r3
 8000c44:	bd08      	pop	{r3, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	08001a1c 	.word	0x08001a1c

08000c50 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c50:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c52:	f102 030c 	add.w	r3, r2, #12
 8000c56:	e853 3f00 	ldrex	r3, [r3]
 8000c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c5e:	320c      	adds	r2, #12
 8000c60:	e842 3100 	strex	r1, r3, [r2]
 8000c64:	2900      	cmp	r1, #0
 8000c66:	d1f3      	bne.n	8000c50 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c68:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c6a:	f102 0314 	add.w	r3, r2, #20
 8000c6e:	e853 3f00 	ldrex	r3, [r3]
 8000c72:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c76:	3214      	adds	r2, #20
 8000c78:	e842 3100 	strex	r1, r3, [r2]
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d1f3      	bne.n	8000c68 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000c80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d005      	beq.n	8000c92 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c86:	2320      	movs	r3, #32
 8000c88:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8000c90:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000c92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c94:	f102 030c 	add.w	r3, r2, #12
 8000c98:	e853 3f00 	ldrex	r3, [r3]
 8000c9c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ca0:	320c      	adds	r2, #12
 8000ca2:	e842 3100 	strex	r1, r3, [r2]
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d1f3      	bne.n	8000c92 <UART_EndRxTransfer+0x42>
 8000caa:	e7ec      	b.n	8000c86 <UART_EndRxTransfer+0x36>

08000cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cb0:	6802      	ldr	r2, [r0, #0]
 8000cb2:	6913      	ldr	r3, [r2, #16]
 8000cb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cb8:	68c1      	ldr	r1, [r0, #12]
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000cbe:	6883      	ldr	r3, [r0, #8]
 8000cc0:	6902      	ldr	r2, [r0, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	6942      	ldr	r2, [r0, #20]
 8000cc6:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8000cc8:	6801      	ldr	r1, [r0, #0]
 8000cca:	68cb      	ldr	r3, [r1, #12]
 8000ccc:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000cd0:	f023 030c 	bic.w	r3, r3, #12
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000cd8:	6802      	ldr	r2, [r0, #0]
 8000cda:	6953      	ldr	r3, [r2, #20]
 8000cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ce0:	6981      	ldr	r1, [r0, #24]
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8000ce6:	6802      	ldr	r2, [r0, #0]
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <UART_SetConfig+0x8c>)
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d020      	beq.n	8000d30 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8000cee:	f7ff ff8f 	bl	8000c10 <HAL_RCC_GetPCLK1Freq>
 8000cf2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000cf4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000cfc:	6863      	ldr	r3, [r4, #4]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d04:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <UART_SetConfig+0x90>)
 8000d06:	fba0 3102 	umull	r3, r1, r0, r2
 8000d0a:	0949      	lsrs	r1, r1, #5
 8000d0c:	2364      	movs	r3, #100	@ 0x64
 8000d0e:	fb03 2311 	mls	r3, r3, r1, r2
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	3332      	adds	r3, #50	@ 0x32
 8000d16:	fba0 0303 	umull	r0, r3, r0, r3
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000d20:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000d24:	f003 030f 	and.w	r3, r3, #15
 8000d28:	6821      	ldr	r1, [r4, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8000d2e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8000d30:	f7ff ff7e 	bl	8000c30 <HAL_RCC_GetPCLK2Freq>
 8000d34:	4602      	mov	r2, r0
 8000d36:	e7dd      	b.n	8000cf4 <UART_SetConfig+0x48>
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	51eb851f 	.word	0x51eb851f

08000d40 <UART_WaitOnFlagUntilTimeout>:
{
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	b083      	sub	sp, #12
 8000d46:	4605      	mov	r5, r0
 8000d48:	460e      	mov	r6, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	4699      	mov	r9, r3
 8000d4e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	681c      	ldr	r4, [r3, #0]
 8000d56:	ea36 0404 	bics.w	r4, r6, r4
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2401      	moveq	r4, #1
 8000d5e:	2400      	movne	r4, #0
 8000d60:	42bc      	cmp	r4, r7
 8000d62:	d128      	bne.n	8000db6 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8000d64:	f1b8 3fff 	cmp.w	r8, #4294967295
 8000d68:	d0f3      	beq.n	8000d52 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000d6a:	f7ff faad 	bl	80002c8 <HAL_GetTick>
 8000d6e:	eba0 0009 	sub.w	r0, r0, r9
 8000d72:	4540      	cmp	r0, r8
 8000d74:	d823      	bhi.n	8000dbe <UART_WaitOnFlagUntilTimeout+0x7e>
 8000d76:	f1b8 0f00 	cmp.w	r8, #0
 8000d7a:	d022      	beq.n	8000dc2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	f012 0f04 	tst.w	r2, #4
 8000d84:	d0e5      	beq.n	8000d52 <UART_WaitOnFlagUntilTimeout+0x12>
 8000d86:	2e80      	cmp	r6, #128	@ 0x80
 8000d88:	d0e3      	beq.n	8000d52 <UART_WaitOnFlagUntilTimeout+0x12>
 8000d8a:	2e40      	cmp	r6, #64	@ 0x40
 8000d8c:	d0e1      	beq.n	8000d52 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	f012 0f08 	tst.w	r2, #8
 8000d94:	d0dd      	beq.n	8000d52 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8000d96:	2400      	movs	r4, #0
 8000d98:	9401      	str	r4, [sp, #4]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	9201      	str	r2, [sp, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8000da4:	4628      	mov	r0, r5
 8000da6:	f7ff ff53 	bl	8000c50 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8000daa:	2308      	movs	r3, #8
 8000dac:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8000dae:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
 8000db4:	e000      	b.n	8000db8 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8000db6:	2000      	movs	r0, #0
}
 8000db8:	b003      	add	sp, #12
 8000dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	e7fa      	b.n	8000db8 <UART_WaitOnFlagUntilTimeout+0x78>
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	e7f8      	b.n	8000db8 <UART_WaitOnFlagUntilTimeout+0x78>

08000dc6 <HAL_UART_Init>:
  if (huart == NULL)
 8000dc6:	b360      	cbz	r0, 8000e22 <HAL_UART_Init+0x5c>
{
 8000dc8:	b510      	push	{r4, lr}
 8000dca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8000dcc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8000dd0:	b313      	cbz	r3, 8000e18 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8000dd2:	2324      	movs	r3, #36	@ 0x24
 8000dd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8000dd8:	6822      	ldr	r2, [r4, #0]
 8000dda:	68d3      	ldr	r3, [r2, #12]
 8000ddc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000de0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff ff62 	bl	8000cac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	6913      	ldr	r3, [r2, #16]
 8000dec:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8000df0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	6953      	ldr	r3, [r2, #20]
 8000df6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8000dfa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8000dfc:	6822      	ldr	r2, [r4, #0]
 8000dfe:	68d3      	ldr	r3, [r2, #12]
 8000e00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e04:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e06:	2000      	movs	r0, #0
 8000e08:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000e14:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8000e16:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8000e18:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8000e1c:	f000 f8b6 	bl	8000f8c <HAL_UART_MspInit>
 8000e20:	e7d7      	b.n	8000dd2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
}
 8000e24:	4770      	bx	lr

08000e26 <HAL_UART_Transmit>:
{
 8000e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000e2e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b20      	cmp	r3, #32
 8000e36:	d156      	bne.n	8000ee6 <HAL_UART_Transmit+0xc0>
 8000e38:	4604      	mov	r4, r0
 8000e3a:	460d      	mov	r5, r1
 8000e3c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d055      	beq.n	8000eee <HAL_UART_Transmit+0xc8>
 8000e42:	b90a      	cbnz	r2, 8000e48 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8000e44:	2001      	movs	r0, #1
 8000e46:	e04f      	b.n	8000ee8 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e4c:	2321      	movs	r3, #33	@ 0x21
 8000e4e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8000e52:	f7ff fa39 	bl	80002c8 <HAL_GetTick>
 8000e56:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8000e58:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000e5c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e60:	68a3      	ldr	r3, [r4, #8]
 8000e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e66:	d002      	beq.n	8000e6e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8000e68:	f04f 0800 	mov.w	r8, #0
 8000e6c:	e014      	b.n	8000e98 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e6e:	6923      	ldr	r3, [r4, #16]
 8000e70:	b32b      	cbz	r3, 8000ebe <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8000e72:	f04f 0800 	mov.w	r8, #0
 8000e76:	e00f      	b.n	8000e98 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8000e78:	2320      	movs	r3, #32
 8000e7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8000e7e:	2003      	movs	r0, #3
 8000e80:	e032      	b.n	8000ee8 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000e82:	f838 3b02 	ldrh.w	r3, [r8], #2
 8000e86:	6822      	ldr	r2, [r4, #0]
 8000e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e8c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8000e8e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8000e90:	b292      	uxth	r2, r2
 8000e92:	3a01      	subs	r2, #1
 8000e94:	b292      	uxth	r2, r2
 8000e96:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000e98:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b193      	cbz	r3, 8000ec4 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e9e:	9600      	str	r6, [sp, #0]
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff4a 	bl	8000d40 <UART_WaitOnFlagUntilTimeout>
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d1e3      	bne.n	8000e78 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d0e6      	beq.n	8000e82 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000eb4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000ebc:	e7e7      	b.n	8000e8e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8000ebe:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8000ec0:	2500      	movs	r5, #0
 8000ec2:	e7e9      	b.n	8000e98 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000ec4:	9600      	str	r6, [sp, #0]
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	@ 0x40
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f7ff ff37 	bl	8000d40 <UART_WaitOnFlagUntilTimeout>
 8000ed2:	b918      	cbnz	r0, 8000edc <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8000eda:	e005      	b.n	8000ee8 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8000edc:	2320      	movs	r3, #32
 8000ede:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	e000      	b.n	8000ee8 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8000ee6:	2002      	movs	r0, #2
}
 8000ee8:	b002      	add	sp, #8
 8000eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8000eee:	2001      	movs	r0, #1
 8000ef0:	e7fa      	b.n	8000ee8 <HAL_UART_Transmit+0xc2>

08000ef2 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <NMI_Handler>

08000ef4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <HardFault_Handler>

08000ef6 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <MemManage_Handler>

08000ef8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <BusFault_Handler>

08000efa <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <UsageFault_Handler>

08000efc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f7ff f9d4 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bd08      	pop	{r3, pc}
	...

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b510      	push	{r4, lr}
 8000f0e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a0c      	ldr	r2, [pc, #48]	@ (8000f44 <_sbrk+0x38>)
 8000f12:	490d      	ldr	r1, [pc, #52]	@ (8000f48 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <_sbrk+0x40>)
 8000f16:	6800      	ldr	r0, [r0, #0]
 8000f18:	b140      	cbz	r0, 8000f2c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <_sbrk+0x40>)
 8000f1c:	6800      	ldr	r0, [r0, #0]
 8000f1e:	4403      	add	r3, r0
 8000f20:	1a52      	subs	r2, r2, r1
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d806      	bhi.n	8000f34 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f26:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <_sbrk+0x40>)
 8000f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f2a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f2c:	4807      	ldr	r0, [pc, #28]	@ (8000f4c <_sbrk+0x40>)
 8000f2e:	4c08      	ldr	r4, [pc, #32]	@ (8000f50 <_sbrk+0x44>)
 8000f30:	6004      	str	r4, [r0, #0]
 8000f32:	e7f2      	b.n	8000f1a <_sbrk+0xe>
    errno = ENOMEM;
 8000f34:	f000 f8d0 	bl	80010d8 <__errno>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	e7f3      	b.n	8000f2a <_sbrk+0x1e>
 8000f42:	bf00      	nop
 8000f44:	20005000 	.word	0x20005000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	2000007c 	.word	0x2000007c
 8000f50:	20000210 	.word	0x20000210

08000f54 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	4770      	bx	lr
	...

08000f58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f58:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f5a:	480a      	ldr	r0, [pc, #40]	@ (8000f84 <MX_USART1_UART_Init+0x2c>)
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <MX_USART1_UART_Init+0x30>)
 8000f5e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000f60:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f64:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	2300      	movs	r3, #0
 8000f68:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f6a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f6e:	220c      	movs	r2, #12
 8000f70:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	f7ff ff26 	bl	8000dc6 <HAL_UART_Init>
 8000f7a:	b900      	cbnz	r0, 8000f7e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f7c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f7e:	f7ff f921 	bl	80001c4 <Error_Handler>
}
 8000f82:	e7fb      	b.n	8000f7c <MX_USART1_UART_Init+0x24>
 8000f84:	20000080 	.word	0x20000080
 8000f88:	40013800 	.word	0x40013800

08000f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	2300      	movs	r3, #0
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	9303      	str	r3, [sp, #12]
 8000f96:	9304      	str	r3, [sp, #16]
 8000f98:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8000f9a:	6802      	ldr	r2, [r0, #0]
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <HAL_UART_MspInit+0x70>)
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x1a>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fa2:	b006      	add	sp, #24
 8000fa4:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa6:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fb0:	619a      	str	r2, [r3, #24]
 8000fb2:	699a      	ldr	r2, [r3, #24]
 8000fb4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	699a      	ldr	r2, [r3, #24]
 8000fbe:	f042 0204 	orr.w	r2, r2, #4
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fd2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	4c08      	ldr	r4, [pc, #32]	@ (8001000 <HAL_UART_MspInit+0x74>)
 8000fde:	a902      	add	r1, sp, #8
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	f7ff f9e1 	bl	80003a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	a902      	add	r1, sp, #8
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f7ff f9d7 	bl	80003a8 <HAL_GPIO_Init>
}
 8000ffa:	e7d2      	b.n	8000fa2 <HAL_UART_MspInit+0x16>
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40010800 	.word	0x40010800

08001004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffa6 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480b      	ldr	r0, [pc, #44]	@ (8001038 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100a:	490c      	ldr	r1, [pc, #48]	@ (800103c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800100c:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <LoopFillZerobss+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001020:	4c09      	ldr	r4, [pc, #36]	@ (8001048 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f000 f859 	bl	80010e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff f8f5 	bl	8000220 <main>
  bx lr
 8001036:	4770      	bx	lr
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001040:	08001a78 	.word	0x08001a78
  ldr r2, =_sbss
 8001044:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001048:	20000210 	.word	0x20000210

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <_vsniprintf_r>:
 800104e:	b530      	push	{r4, r5, lr}
 8001050:	4614      	mov	r4, r2
 8001052:	2c00      	cmp	r4, #0
 8001054:	4605      	mov	r5, r0
 8001056:	461a      	mov	r2, r3
 8001058:	b09b      	sub	sp, #108	@ 0x6c
 800105a:	da05      	bge.n	8001068 <_vsniprintf_r+0x1a>
 800105c:	238b      	movs	r3, #139	@ 0x8b
 800105e:	6003      	str	r3, [r0, #0]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	b01b      	add	sp, #108	@ 0x6c
 8001066:	bd30      	pop	{r4, r5, pc}
 8001068:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800106c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	9319      	str	r3, [sp, #100]	@ 0x64
 8001076:	bf0c      	ite	eq
 8001078:	4623      	moveq	r3, r4
 800107a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	9305      	str	r3, [sp, #20]
 8001082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001086:	9100      	str	r1, [sp, #0]
 8001088:	9104      	str	r1, [sp, #16]
 800108a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800108e:	4669      	mov	r1, sp
 8001090:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001092:	f000 f99f 	bl	80013d4 <_svfiprintf_r>
 8001096:	1c43      	adds	r3, r0, #1
 8001098:	bfbc      	itt	lt
 800109a:	238b      	movlt	r3, #139	@ 0x8b
 800109c:	602b      	strlt	r3, [r5, #0]
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d0e0      	beq.n	8001064 <_vsniprintf_r+0x16>
 80010a2:	2200      	movs	r2, #0
 80010a4:	9b00      	ldr	r3, [sp, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e7dc      	b.n	8001064 <_vsniprintf_r+0x16>
	...

080010ac <vsniprintf>:
 80010ac:	b507      	push	{r0, r1, r2, lr}
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	460a      	mov	r2, r1
 80010b4:	4601      	mov	r1, r0
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <vsniprintf+0x18>)
 80010b8:	6800      	ldr	r0, [r0, #0]
 80010ba:	f7ff ffc8 	bl	800104e <_vsniprintf_r>
 80010be:	b003      	add	sp, #12
 80010c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80010c4:	2000000c 	.word	0x2000000c

080010c8 <memset>:
 80010c8:	4603      	mov	r3, r0
 80010ca:	4402      	add	r2, r0
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d100      	bne.n	80010d2 <memset+0xa>
 80010d0:	4770      	bx	lr
 80010d2:	f803 1b01 	strb.w	r1, [r3], #1
 80010d6:	e7f9      	b.n	80010cc <memset+0x4>

080010d8 <__errno>:
 80010d8:	4b01      	ldr	r3, [pc, #4]	@ (80010e0 <__errno+0x8>)
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000000c 	.word	0x2000000c

080010e4 <__libc_init_array>:
 80010e4:	b570      	push	{r4, r5, r6, lr}
 80010e6:	2600      	movs	r6, #0
 80010e8:	4d0c      	ldr	r5, [pc, #48]	@ (800111c <__libc_init_array+0x38>)
 80010ea:	4c0d      	ldr	r4, [pc, #52]	@ (8001120 <__libc_init_array+0x3c>)
 80010ec:	1b64      	subs	r4, r4, r5
 80010ee:	10a4      	asrs	r4, r4, #2
 80010f0:	42a6      	cmp	r6, r4
 80010f2:	d109      	bne.n	8001108 <__libc_init_array+0x24>
 80010f4:	f000 fc76 	bl	80019e4 <_init>
 80010f8:	2600      	movs	r6, #0
 80010fa:	4d0a      	ldr	r5, [pc, #40]	@ (8001124 <__libc_init_array+0x40>)
 80010fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001128 <__libc_init_array+0x44>)
 80010fe:	1b64      	subs	r4, r4, r5
 8001100:	10a4      	asrs	r4, r4, #2
 8001102:	42a6      	cmp	r6, r4
 8001104:	d105      	bne.n	8001112 <__libc_init_array+0x2e>
 8001106:	bd70      	pop	{r4, r5, r6, pc}
 8001108:	f855 3b04 	ldr.w	r3, [r5], #4
 800110c:	4798      	blx	r3
 800110e:	3601      	adds	r6, #1
 8001110:	e7ee      	b.n	80010f0 <__libc_init_array+0xc>
 8001112:	f855 3b04 	ldr.w	r3, [r5], #4
 8001116:	4798      	blx	r3
 8001118:	3601      	adds	r6, #1
 800111a:	e7f2      	b.n	8001102 <__libc_init_array+0x1e>
 800111c:	08001a70 	.word	0x08001a70
 8001120:	08001a70 	.word	0x08001a70
 8001124:	08001a70 	.word	0x08001a70
 8001128:	08001a74 	.word	0x08001a74

0800112c <__retarget_lock_acquire_recursive>:
 800112c:	4770      	bx	lr

0800112e <__retarget_lock_release_recursive>:
 800112e:	4770      	bx	lr

08001130 <_free_r>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	4605      	mov	r5, r0
 8001134:	2900      	cmp	r1, #0
 8001136:	d040      	beq.n	80011ba <_free_r+0x8a>
 8001138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800113c:	1f0c      	subs	r4, r1, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfb8      	it	lt
 8001142:	18e4      	addlt	r4, r4, r3
 8001144:	f000 f8de 	bl	8001304 <__malloc_lock>
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <_free_r+0x8c>)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	b933      	cbnz	r3, 800115c <_free_r+0x2c>
 800114e:	6063      	str	r3, [r4, #4]
 8001150:	6014      	str	r4, [r2, #0]
 8001152:	4628      	mov	r0, r5
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b8da 	b.w	8001310 <__malloc_unlock>
 800115c:	42a3      	cmp	r3, r4
 800115e:	d908      	bls.n	8001172 <_free_r+0x42>
 8001160:	6820      	ldr	r0, [r4, #0]
 8001162:	1821      	adds	r1, r4, r0
 8001164:	428b      	cmp	r3, r1
 8001166:	bf01      	itttt	eq
 8001168:	6819      	ldreq	r1, [r3, #0]
 800116a:	685b      	ldreq	r3, [r3, #4]
 800116c:	1809      	addeq	r1, r1, r0
 800116e:	6021      	streq	r1, [r4, #0]
 8001170:	e7ed      	b.n	800114e <_free_r+0x1e>
 8001172:	461a      	mov	r2, r3
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	b10b      	cbz	r3, 800117c <_free_r+0x4c>
 8001178:	42a3      	cmp	r3, r4
 800117a:	d9fa      	bls.n	8001172 <_free_r+0x42>
 800117c:	6811      	ldr	r1, [r2, #0]
 800117e:	1850      	adds	r0, r2, r1
 8001180:	42a0      	cmp	r0, r4
 8001182:	d10b      	bne.n	800119c <_free_r+0x6c>
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	4401      	add	r1, r0
 8001188:	1850      	adds	r0, r2, r1
 800118a:	4283      	cmp	r3, r0
 800118c:	6011      	str	r1, [r2, #0]
 800118e:	d1e0      	bne.n	8001152 <_free_r+0x22>
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4408      	add	r0, r1
 8001196:	6010      	str	r0, [r2, #0]
 8001198:	6053      	str	r3, [r2, #4]
 800119a:	e7da      	b.n	8001152 <_free_r+0x22>
 800119c:	d902      	bls.n	80011a4 <_free_r+0x74>
 800119e:	230c      	movs	r3, #12
 80011a0:	602b      	str	r3, [r5, #0]
 80011a2:	e7d6      	b.n	8001152 <_free_r+0x22>
 80011a4:	6820      	ldr	r0, [r4, #0]
 80011a6:	1821      	adds	r1, r4, r0
 80011a8:	428b      	cmp	r3, r1
 80011aa:	bf01      	itttt	eq
 80011ac:	6819      	ldreq	r1, [r3, #0]
 80011ae:	685b      	ldreq	r3, [r3, #4]
 80011b0:	1809      	addeq	r1, r1, r0
 80011b2:	6021      	streq	r1, [r4, #0]
 80011b4:	6063      	str	r3, [r4, #4]
 80011b6:	6054      	str	r4, [r2, #4]
 80011b8:	e7cb      	b.n	8001152 <_free_r+0x22>
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
 80011bc:	2000020c 	.word	0x2000020c

080011c0 <sbrk_aligned>:
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	4e0f      	ldr	r6, [pc, #60]	@ (8001200 <sbrk_aligned+0x40>)
 80011c4:	460c      	mov	r4, r1
 80011c6:	6831      	ldr	r1, [r6, #0]
 80011c8:	4605      	mov	r5, r0
 80011ca:	b911      	cbnz	r1, 80011d2 <sbrk_aligned+0x12>
 80011cc:	f000 fba8 	bl	8001920 <_sbrk_r>
 80011d0:	6030      	str	r0, [r6, #0]
 80011d2:	4621      	mov	r1, r4
 80011d4:	4628      	mov	r0, r5
 80011d6:	f000 fba3 	bl	8001920 <_sbrk_r>
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	d103      	bne.n	80011e6 <sbrk_aligned+0x26>
 80011de:	f04f 34ff 	mov.w	r4, #4294967295
 80011e2:	4620      	mov	r0, r4
 80011e4:	bd70      	pop	{r4, r5, r6, pc}
 80011e6:	1cc4      	adds	r4, r0, #3
 80011e8:	f024 0403 	bic.w	r4, r4, #3
 80011ec:	42a0      	cmp	r0, r4
 80011ee:	d0f8      	beq.n	80011e2 <sbrk_aligned+0x22>
 80011f0:	1a21      	subs	r1, r4, r0
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 fb94 	bl	8001920 <_sbrk_r>
 80011f8:	3001      	adds	r0, #1
 80011fa:	d1f2      	bne.n	80011e2 <sbrk_aligned+0x22>
 80011fc:	e7ef      	b.n	80011de <sbrk_aligned+0x1e>
 80011fe:	bf00      	nop
 8001200:	20000208 	.word	0x20000208

08001204 <_malloc_r>:
 8001204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001208:	1ccd      	adds	r5, r1, #3
 800120a:	f025 0503 	bic.w	r5, r5, #3
 800120e:	3508      	adds	r5, #8
 8001210:	2d0c      	cmp	r5, #12
 8001212:	bf38      	it	cc
 8001214:	250c      	movcc	r5, #12
 8001216:	2d00      	cmp	r5, #0
 8001218:	4606      	mov	r6, r0
 800121a:	db01      	blt.n	8001220 <_malloc_r+0x1c>
 800121c:	42a9      	cmp	r1, r5
 800121e:	d904      	bls.n	800122a <_malloc_r+0x26>
 8001220:	230c      	movs	r3, #12
 8001222:	6033      	str	r3, [r6, #0]
 8001224:	2000      	movs	r0, #0
 8001226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800122a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001300 <_malloc_r+0xfc>
 800122e:	f000 f869 	bl	8001304 <__malloc_lock>
 8001232:	f8d8 3000 	ldr.w	r3, [r8]
 8001236:	461c      	mov	r4, r3
 8001238:	bb44      	cbnz	r4, 800128c <_malloc_r+0x88>
 800123a:	4629      	mov	r1, r5
 800123c:	4630      	mov	r0, r6
 800123e:	f7ff ffbf 	bl	80011c0 <sbrk_aligned>
 8001242:	1c43      	adds	r3, r0, #1
 8001244:	4604      	mov	r4, r0
 8001246:	d158      	bne.n	80012fa <_malloc_r+0xf6>
 8001248:	f8d8 4000 	ldr.w	r4, [r8]
 800124c:	4627      	mov	r7, r4
 800124e:	2f00      	cmp	r7, #0
 8001250:	d143      	bne.n	80012da <_malloc_r+0xd6>
 8001252:	2c00      	cmp	r4, #0
 8001254:	d04b      	beq.n	80012ee <_malloc_r+0xea>
 8001256:	6823      	ldr	r3, [r4, #0]
 8001258:	4639      	mov	r1, r7
 800125a:	4630      	mov	r0, r6
 800125c:	eb04 0903 	add.w	r9, r4, r3
 8001260:	f000 fb5e 	bl	8001920 <_sbrk_r>
 8001264:	4581      	cmp	r9, r0
 8001266:	d142      	bne.n	80012ee <_malloc_r+0xea>
 8001268:	6821      	ldr	r1, [r4, #0]
 800126a:	4630      	mov	r0, r6
 800126c:	1a6d      	subs	r5, r5, r1
 800126e:	4629      	mov	r1, r5
 8001270:	f7ff ffa6 	bl	80011c0 <sbrk_aligned>
 8001274:	3001      	adds	r0, #1
 8001276:	d03a      	beq.n	80012ee <_malloc_r+0xea>
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	442b      	add	r3, r5
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	f8d8 3000 	ldr.w	r3, [r8]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	bb62      	cbnz	r2, 80012e0 <_malloc_r+0xdc>
 8001286:	f8c8 7000 	str.w	r7, [r8]
 800128a:	e00f      	b.n	80012ac <_malloc_r+0xa8>
 800128c:	6822      	ldr	r2, [r4, #0]
 800128e:	1b52      	subs	r2, r2, r5
 8001290:	d420      	bmi.n	80012d4 <_malloc_r+0xd0>
 8001292:	2a0b      	cmp	r2, #11
 8001294:	d917      	bls.n	80012c6 <_malloc_r+0xc2>
 8001296:	1961      	adds	r1, r4, r5
 8001298:	42a3      	cmp	r3, r4
 800129a:	6025      	str	r5, [r4, #0]
 800129c:	bf18      	it	ne
 800129e:	6059      	strne	r1, [r3, #4]
 80012a0:	6863      	ldr	r3, [r4, #4]
 80012a2:	bf08      	it	eq
 80012a4:	f8c8 1000 	streq.w	r1, [r8]
 80012a8:	5162      	str	r2, [r4, r5]
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	4630      	mov	r0, r6
 80012ae:	f000 f82f 	bl	8001310 <__malloc_unlock>
 80012b2:	f104 000b 	add.w	r0, r4, #11
 80012b6:	1d23      	adds	r3, r4, #4
 80012b8:	f020 0007 	bic.w	r0, r0, #7
 80012bc:	1ac2      	subs	r2, r0, r3
 80012be:	bf1c      	itt	ne
 80012c0:	1a1b      	subne	r3, r3, r0
 80012c2:	50a3      	strne	r3, [r4, r2]
 80012c4:	e7af      	b.n	8001226 <_malloc_r+0x22>
 80012c6:	6862      	ldr	r2, [r4, #4]
 80012c8:	42a3      	cmp	r3, r4
 80012ca:	bf0c      	ite	eq
 80012cc:	f8c8 2000 	streq.w	r2, [r8]
 80012d0:	605a      	strne	r2, [r3, #4]
 80012d2:	e7eb      	b.n	80012ac <_malloc_r+0xa8>
 80012d4:	4623      	mov	r3, r4
 80012d6:	6864      	ldr	r4, [r4, #4]
 80012d8:	e7ae      	b.n	8001238 <_malloc_r+0x34>
 80012da:	463c      	mov	r4, r7
 80012dc:	687f      	ldr	r7, [r7, #4]
 80012de:	e7b6      	b.n	800124e <_malloc_r+0x4a>
 80012e0:	461a      	mov	r2, r3
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	42a3      	cmp	r3, r4
 80012e6:	d1fb      	bne.n	80012e0 <_malloc_r+0xdc>
 80012e8:	2300      	movs	r3, #0
 80012ea:	6053      	str	r3, [r2, #4]
 80012ec:	e7de      	b.n	80012ac <_malloc_r+0xa8>
 80012ee:	230c      	movs	r3, #12
 80012f0:	4630      	mov	r0, r6
 80012f2:	6033      	str	r3, [r6, #0]
 80012f4:	f000 f80c 	bl	8001310 <__malloc_unlock>
 80012f8:	e794      	b.n	8001224 <_malloc_r+0x20>
 80012fa:	6005      	str	r5, [r0, #0]
 80012fc:	e7d6      	b.n	80012ac <_malloc_r+0xa8>
 80012fe:	bf00      	nop
 8001300:	2000020c 	.word	0x2000020c

08001304 <__malloc_lock>:
 8001304:	4801      	ldr	r0, [pc, #4]	@ (800130c <__malloc_lock+0x8>)
 8001306:	f7ff bf11 	b.w	800112c <__retarget_lock_acquire_recursive>
 800130a:	bf00      	nop
 800130c:	20000204 	.word	0x20000204

08001310 <__malloc_unlock>:
 8001310:	4801      	ldr	r0, [pc, #4]	@ (8001318 <__malloc_unlock+0x8>)
 8001312:	f7ff bf0c 	b.w	800112e <__retarget_lock_release_recursive>
 8001316:	bf00      	nop
 8001318:	20000204 	.word	0x20000204

0800131c <__ssputs_r>:
 800131c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001320:	461f      	mov	r7, r3
 8001322:	688e      	ldr	r6, [r1, #8]
 8001324:	4682      	mov	sl, r0
 8001326:	42be      	cmp	r6, r7
 8001328:	460c      	mov	r4, r1
 800132a:	4690      	mov	r8, r2
 800132c:	680b      	ldr	r3, [r1, #0]
 800132e:	d82d      	bhi.n	800138c <__ssputs_r+0x70>
 8001330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001334:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001338:	d026      	beq.n	8001388 <__ssputs_r+0x6c>
 800133a:	6965      	ldr	r5, [r4, #20]
 800133c:	6909      	ldr	r1, [r1, #16]
 800133e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001342:	eba3 0901 	sub.w	r9, r3, r1
 8001346:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800134a:	1c7b      	adds	r3, r7, #1
 800134c:	444b      	add	r3, r9
 800134e:	106d      	asrs	r5, r5, #1
 8001350:	429d      	cmp	r5, r3
 8001352:	bf38      	it	cc
 8001354:	461d      	movcc	r5, r3
 8001356:	0553      	lsls	r3, r2, #21
 8001358:	d527      	bpl.n	80013aa <__ssputs_r+0x8e>
 800135a:	4629      	mov	r1, r5
 800135c:	f7ff ff52 	bl	8001204 <_malloc_r>
 8001360:	4606      	mov	r6, r0
 8001362:	b360      	cbz	r0, 80013be <__ssputs_r+0xa2>
 8001364:	464a      	mov	r2, r9
 8001366:	6921      	ldr	r1, [r4, #16]
 8001368:	f000 faf8 	bl	800195c <memcpy>
 800136c:	89a3      	ldrh	r3, [r4, #12]
 800136e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001376:	81a3      	strh	r3, [r4, #12]
 8001378:	6126      	str	r6, [r4, #16]
 800137a:	444e      	add	r6, r9
 800137c:	6026      	str	r6, [r4, #0]
 800137e:	463e      	mov	r6, r7
 8001380:	6165      	str	r5, [r4, #20]
 8001382:	eba5 0509 	sub.w	r5, r5, r9
 8001386:	60a5      	str	r5, [r4, #8]
 8001388:	42be      	cmp	r6, r7
 800138a:	d900      	bls.n	800138e <__ssputs_r+0x72>
 800138c:	463e      	mov	r6, r7
 800138e:	4632      	mov	r2, r6
 8001390:	4641      	mov	r1, r8
 8001392:	6820      	ldr	r0, [r4, #0]
 8001394:	f000 faaa 	bl	80018ec <memmove>
 8001398:	2000      	movs	r0, #0
 800139a:	68a3      	ldr	r3, [r4, #8]
 800139c:	1b9b      	subs	r3, r3, r6
 800139e:	60a3      	str	r3, [r4, #8]
 80013a0:	6823      	ldr	r3, [r4, #0]
 80013a2:	4433      	add	r3, r6
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013aa:	462a      	mov	r2, r5
 80013ac:	f000 fae4 	bl	8001978 <_realloc_r>
 80013b0:	4606      	mov	r6, r0
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1e0      	bne.n	8001378 <__ssputs_r+0x5c>
 80013b6:	4650      	mov	r0, sl
 80013b8:	6921      	ldr	r1, [r4, #16]
 80013ba:	f7ff feb9 	bl	8001130 <_free_r>
 80013be:	230c      	movs	r3, #12
 80013c0:	f8ca 3000 	str.w	r3, [sl]
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ce:	81a3      	strh	r3, [r4, #12]
 80013d0:	e7e9      	b.n	80013a6 <__ssputs_r+0x8a>
	...

080013d4 <_svfiprintf_r>:
 80013d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d8:	4698      	mov	r8, r3
 80013da:	898b      	ldrh	r3, [r1, #12]
 80013dc:	4607      	mov	r7, r0
 80013de:	061b      	lsls	r3, r3, #24
 80013e0:	460d      	mov	r5, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	b09d      	sub	sp, #116	@ 0x74
 80013e6:	d510      	bpl.n	800140a <_svfiprintf_r+0x36>
 80013e8:	690b      	ldr	r3, [r1, #16]
 80013ea:	b973      	cbnz	r3, 800140a <_svfiprintf_r+0x36>
 80013ec:	2140      	movs	r1, #64	@ 0x40
 80013ee:	f7ff ff09 	bl	8001204 <_malloc_r>
 80013f2:	6028      	str	r0, [r5, #0]
 80013f4:	6128      	str	r0, [r5, #16]
 80013f6:	b930      	cbnz	r0, 8001406 <_svfiprintf_r+0x32>
 80013f8:	230c      	movs	r3, #12
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	b01d      	add	sp, #116	@ 0x74
 8001402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001406:	2340      	movs	r3, #64	@ 0x40
 8001408:	616b      	str	r3, [r5, #20]
 800140a:	2300      	movs	r3, #0
 800140c:	9309      	str	r3, [sp, #36]	@ 0x24
 800140e:	2320      	movs	r3, #32
 8001410:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001414:	2330      	movs	r3, #48	@ 0x30
 8001416:	f04f 0901 	mov.w	r9, #1
 800141a:	f8cd 800c 	str.w	r8, [sp, #12]
 800141e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80015b8 <_svfiprintf_r+0x1e4>
 8001422:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001426:	4623      	mov	r3, r4
 8001428:	469a      	mov	sl, r3
 800142a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800142e:	b10a      	cbz	r2, 8001434 <_svfiprintf_r+0x60>
 8001430:	2a25      	cmp	r2, #37	@ 0x25
 8001432:	d1f9      	bne.n	8001428 <_svfiprintf_r+0x54>
 8001434:	ebba 0b04 	subs.w	fp, sl, r4
 8001438:	d00b      	beq.n	8001452 <_svfiprintf_r+0x7e>
 800143a:	465b      	mov	r3, fp
 800143c:	4622      	mov	r2, r4
 800143e:	4629      	mov	r1, r5
 8001440:	4638      	mov	r0, r7
 8001442:	f7ff ff6b 	bl	800131c <__ssputs_r>
 8001446:	3001      	adds	r0, #1
 8001448:	f000 80a7 	beq.w	800159a <_svfiprintf_r+0x1c6>
 800144c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800144e:	445a      	add	r2, fp
 8001450:	9209      	str	r2, [sp, #36]	@ 0x24
 8001452:	f89a 3000 	ldrb.w	r3, [sl]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 809f 	beq.w	800159a <_svfiprintf_r+0x1c6>
 800145c:	2300      	movs	r3, #0
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001466:	f10a 0a01 	add.w	sl, sl, #1
 800146a:	9304      	str	r3, [sp, #16]
 800146c:	9307      	str	r3, [sp, #28]
 800146e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001472:	931a      	str	r3, [sp, #104]	@ 0x68
 8001474:	4654      	mov	r4, sl
 8001476:	2205      	movs	r2, #5
 8001478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147c:	484e      	ldr	r0, [pc, #312]	@ (80015b8 <_svfiprintf_r+0x1e4>)
 800147e:	f000 fa5f 	bl	8001940 <memchr>
 8001482:	9a04      	ldr	r2, [sp, #16]
 8001484:	b9d8      	cbnz	r0, 80014be <_svfiprintf_r+0xea>
 8001486:	06d0      	lsls	r0, r2, #27
 8001488:	bf44      	itt	mi
 800148a:	2320      	movmi	r3, #32
 800148c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001490:	0711      	lsls	r1, r2, #28
 8001492:	bf44      	itt	mi
 8001494:	232b      	movmi	r3, #43	@ 0x2b
 8001496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800149a:	f89a 3000 	ldrb.w	r3, [sl]
 800149e:	2b2a      	cmp	r3, #42	@ 0x2a
 80014a0:	d015      	beq.n	80014ce <_svfiprintf_r+0xfa>
 80014a2:	4654      	mov	r4, sl
 80014a4:	2000      	movs	r0, #0
 80014a6:	f04f 0c0a 	mov.w	ip, #10
 80014aa:	9a07      	ldr	r2, [sp, #28]
 80014ac:	4621      	mov	r1, r4
 80014ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014b2:	3b30      	subs	r3, #48	@ 0x30
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d94b      	bls.n	8001550 <_svfiprintf_r+0x17c>
 80014b8:	b1b0      	cbz	r0, 80014e8 <_svfiprintf_r+0x114>
 80014ba:	9207      	str	r2, [sp, #28]
 80014bc:	e014      	b.n	80014e8 <_svfiprintf_r+0x114>
 80014be:	eba0 0308 	sub.w	r3, r0, r8
 80014c2:	fa09 f303 	lsl.w	r3, r9, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	46a2      	mov	sl, r4
 80014ca:	9304      	str	r3, [sp, #16]
 80014cc:	e7d2      	b.n	8001474 <_svfiprintf_r+0xa0>
 80014ce:	9b03      	ldr	r3, [sp, #12]
 80014d0:	1d19      	adds	r1, r3, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	9103      	str	r1, [sp, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfbb      	ittet	lt
 80014da:	425b      	neglt	r3, r3
 80014dc:	f042 0202 	orrlt.w	r2, r2, #2
 80014e0:	9307      	strge	r3, [sp, #28]
 80014e2:	9307      	strlt	r3, [sp, #28]
 80014e4:	bfb8      	it	lt
 80014e6:	9204      	strlt	r2, [sp, #16]
 80014e8:	7823      	ldrb	r3, [r4, #0]
 80014ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ec:	d10a      	bne.n	8001504 <_svfiprintf_r+0x130>
 80014ee:	7863      	ldrb	r3, [r4, #1]
 80014f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80014f2:	d132      	bne.n	800155a <_svfiprintf_r+0x186>
 80014f4:	9b03      	ldr	r3, [sp, #12]
 80014f6:	3402      	adds	r4, #2
 80014f8:	1d1a      	adds	r2, r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	9203      	str	r2, [sp, #12]
 80014fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001502:	9305      	str	r3, [sp, #20]
 8001504:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80015bc <_svfiprintf_r+0x1e8>
 8001508:	2203      	movs	r2, #3
 800150a:	4650      	mov	r0, sl
 800150c:	7821      	ldrb	r1, [r4, #0]
 800150e:	f000 fa17 	bl	8001940 <memchr>
 8001512:	b138      	cbz	r0, 8001524 <_svfiprintf_r+0x150>
 8001514:	2240      	movs	r2, #64	@ 0x40
 8001516:	9b04      	ldr	r3, [sp, #16]
 8001518:	eba0 000a 	sub.w	r0, r0, sl
 800151c:	4082      	lsls	r2, r0
 800151e:	4313      	orrs	r3, r2
 8001520:	3401      	adds	r4, #1
 8001522:	9304      	str	r3, [sp, #16]
 8001524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001528:	2206      	movs	r2, #6
 800152a:	4825      	ldr	r0, [pc, #148]	@ (80015c0 <_svfiprintf_r+0x1ec>)
 800152c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001530:	f000 fa06 	bl	8001940 <memchr>
 8001534:	2800      	cmp	r0, #0
 8001536:	d036      	beq.n	80015a6 <_svfiprintf_r+0x1d2>
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <_svfiprintf_r+0x1f0>)
 800153a:	bb1b      	cbnz	r3, 8001584 <_svfiprintf_r+0x1b0>
 800153c:	9b03      	ldr	r3, [sp, #12]
 800153e:	3307      	adds	r3, #7
 8001540:	f023 0307 	bic.w	r3, r3, #7
 8001544:	3308      	adds	r3, #8
 8001546:	9303      	str	r3, [sp, #12]
 8001548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800154a:	4433      	add	r3, r6
 800154c:	9309      	str	r3, [sp, #36]	@ 0x24
 800154e:	e76a      	b.n	8001426 <_svfiprintf_r+0x52>
 8001550:	460c      	mov	r4, r1
 8001552:	2001      	movs	r0, #1
 8001554:	fb0c 3202 	mla	r2, ip, r2, r3
 8001558:	e7a8      	b.n	80014ac <_svfiprintf_r+0xd8>
 800155a:	2300      	movs	r3, #0
 800155c:	f04f 0c0a 	mov.w	ip, #10
 8001560:	4619      	mov	r1, r3
 8001562:	3401      	adds	r4, #1
 8001564:	9305      	str	r3, [sp, #20]
 8001566:	4620      	mov	r0, r4
 8001568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800156c:	3a30      	subs	r2, #48	@ 0x30
 800156e:	2a09      	cmp	r2, #9
 8001570:	d903      	bls.n	800157a <_svfiprintf_r+0x1a6>
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0c6      	beq.n	8001504 <_svfiprintf_r+0x130>
 8001576:	9105      	str	r1, [sp, #20]
 8001578:	e7c4      	b.n	8001504 <_svfiprintf_r+0x130>
 800157a:	4604      	mov	r4, r0
 800157c:	2301      	movs	r3, #1
 800157e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001582:	e7f0      	b.n	8001566 <_svfiprintf_r+0x192>
 8001584:	ab03      	add	r3, sp, #12
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	462a      	mov	r2, r5
 800158a:	4638      	mov	r0, r7
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <_svfiprintf_r+0x1f4>)
 800158e:	a904      	add	r1, sp, #16
 8001590:	f3af 8000 	nop.w
 8001594:	1c42      	adds	r2, r0, #1
 8001596:	4606      	mov	r6, r0
 8001598:	d1d6      	bne.n	8001548 <_svfiprintf_r+0x174>
 800159a:	89ab      	ldrh	r3, [r5, #12]
 800159c:	065b      	lsls	r3, r3, #25
 800159e:	f53f af2d 	bmi.w	80013fc <_svfiprintf_r+0x28>
 80015a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80015a4:	e72c      	b.n	8001400 <_svfiprintf_r+0x2c>
 80015a6:	ab03      	add	r3, sp, #12
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	462a      	mov	r2, r5
 80015ac:	4638      	mov	r0, r7
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <_svfiprintf_r+0x1f4>)
 80015b0:	a904      	add	r1, sp, #16
 80015b2:	f000 f87d 	bl	80016b0 <_printf_i>
 80015b6:	e7ed      	b.n	8001594 <_svfiprintf_r+0x1c0>
 80015b8:	08001a34 	.word	0x08001a34
 80015bc:	08001a3a 	.word	0x08001a3a
 80015c0:	08001a3e 	.word	0x08001a3e
 80015c4:	00000000 	.word	0x00000000
 80015c8:	0800131d 	.word	0x0800131d

080015cc <_printf_common>:
 80015cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015d0:	4616      	mov	r6, r2
 80015d2:	4698      	mov	r8, r3
 80015d4:	688a      	ldr	r2, [r1, #8]
 80015d6:	690b      	ldr	r3, [r1, #16]
 80015d8:	4607      	mov	r7, r0
 80015da:	4293      	cmp	r3, r2
 80015dc:	bfb8      	it	lt
 80015de:	4613      	movlt	r3, r2
 80015e0:	6033      	str	r3, [r6, #0]
 80015e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80015e6:	460c      	mov	r4, r1
 80015e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80015ec:	b10a      	cbz	r2, 80015f2 <_printf_common+0x26>
 80015ee:	3301      	adds	r3, #1
 80015f0:	6033      	str	r3, [r6, #0]
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	0699      	lsls	r1, r3, #26
 80015f6:	bf42      	ittt	mi
 80015f8:	6833      	ldrmi	r3, [r6, #0]
 80015fa:	3302      	addmi	r3, #2
 80015fc:	6033      	strmi	r3, [r6, #0]
 80015fe:	6825      	ldr	r5, [r4, #0]
 8001600:	f015 0506 	ands.w	r5, r5, #6
 8001604:	d106      	bne.n	8001614 <_printf_common+0x48>
 8001606:	f104 0a19 	add.w	sl, r4, #25
 800160a:	68e3      	ldr	r3, [r4, #12]
 800160c:	6832      	ldr	r2, [r6, #0]
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	42ab      	cmp	r3, r5
 8001612:	dc2b      	bgt.n	800166c <_printf_common+0xa0>
 8001614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	3b00      	subs	r3, #0
 800161c:	bf18      	it	ne
 800161e:	2301      	movne	r3, #1
 8001620:	0692      	lsls	r2, r2, #26
 8001622:	d430      	bmi.n	8001686 <_printf_common+0xba>
 8001624:	4641      	mov	r1, r8
 8001626:	4638      	mov	r0, r7
 8001628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800162c:	47c8      	blx	r9
 800162e:	3001      	adds	r0, #1
 8001630:	d023      	beq.n	800167a <_printf_common+0xae>
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	6922      	ldr	r2, [r4, #16]
 8001636:	f003 0306 	and.w	r3, r3, #6
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf14      	ite	ne
 800163e:	2500      	movne	r5, #0
 8001640:	6833      	ldreq	r3, [r6, #0]
 8001642:	f04f 0600 	mov.w	r6, #0
 8001646:	bf08      	it	eq
 8001648:	68e5      	ldreq	r5, [r4, #12]
 800164a:	f104 041a 	add.w	r4, r4, #26
 800164e:	bf08      	it	eq
 8001650:	1aed      	subeq	r5, r5, r3
 8001652:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001656:	bf08      	it	eq
 8001658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800165c:	4293      	cmp	r3, r2
 800165e:	bfc4      	itt	gt
 8001660:	1a9b      	subgt	r3, r3, r2
 8001662:	18ed      	addgt	r5, r5, r3
 8001664:	42b5      	cmp	r5, r6
 8001666:	d11a      	bne.n	800169e <_printf_common+0xd2>
 8001668:	2000      	movs	r0, #0
 800166a:	e008      	b.n	800167e <_printf_common+0xb2>
 800166c:	2301      	movs	r3, #1
 800166e:	4652      	mov	r2, sl
 8001670:	4641      	mov	r1, r8
 8001672:	4638      	mov	r0, r7
 8001674:	47c8      	blx	r9
 8001676:	3001      	adds	r0, #1
 8001678:	d103      	bne.n	8001682 <_printf_common+0xb6>
 800167a:	f04f 30ff 	mov.w	r0, #4294967295
 800167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001682:	3501      	adds	r5, #1
 8001684:	e7c1      	b.n	800160a <_printf_common+0x3e>
 8001686:	2030      	movs	r0, #48	@ 0x30
 8001688:	18e1      	adds	r1, r4, r3
 800168a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001694:	4422      	add	r2, r4
 8001696:	3302      	adds	r3, #2
 8001698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800169c:	e7c2      	b.n	8001624 <_printf_common+0x58>
 800169e:	2301      	movs	r3, #1
 80016a0:	4622      	mov	r2, r4
 80016a2:	4641      	mov	r1, r8
 80016a4:	4638      	mov	r0, r7
 80016a6:	47c8      	blx	r9
 80016a8:	3001      	adds	r0, #1
 80016aa:	d0e6      	beq.n	800167a <_printf_common+0xae>
 80016ac:	3601      	adds	r6, #1
 80016ae:	e7d9      	b.n	8001664 <_printf_common+0x98>

080016b0 <_printf_i>:
 80016b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016b4:	7e0f      	ldrb	r7, [r1, #24]
 80016b6:	4691      	mov	r9, r2
 80016b8:	2f78      	cmp	r7, #120	@ 0x78
 80016ba:	4680      	mov	r8, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	469a      	mov	sl, r3
 80016c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80016c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80016c6:	d807      	bhi.n	80016d8 <_printf_i+0x28>
 80016c8:	2f62      	cmp	r7, #98	@ 0x62
 80016ca:	d80a      	bhi.n	80016e2 <_printf_i+0x32>
 80016cc:	2f00      	cmp	r7, #0
 80016ce:	f000 80d1 	beq.w	8001874 <_printf_i+0x1c4>
 80016d2:	2f58      	cmp	r7, #88	@ 0x58
 80016d4:	f000 80b8 	beq.w	8001848 <_printf_i+0x198>
 80016d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80016e0:	e03a      	b.n	8001758 <_printf_i+0xa8>
 80016e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80016e6:	2b15      	cmp	r3, #21
 80016e8:	d8f6      	bhi.n	80016d8 <_printf_i+0x28>
 80016ea:	a101      	add	r1, pc, #4	@ (adr r1, 80016f0 <_printf_i+0x40>)
 80016ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016f0:	08001749 	.word	0x08001749
 80016f4:	0800175d 	.word	0x0800175d
 80016f8:	080016d9 	.word	0x080016d9
 80016fc:	080016d9 	.word	0x080016d9
 8001700:	080016d9 	.word	0x080016d9
 8001704:	080016d9 	.word	0x080016d9
 8001708:	0800175d 	.word	0x0800175d
 800170c:	080016d9 	.word	0x080016d9
 8001710:	080016d9 	.word	0x080016d9
 8001714:	080016d9 	.word	0x080016d9
 8001718:	080016d9 	.word	0x080016d9
 800171c:	0800185b 	.word	0x0800185b
 8001720:	08001787 	.word	0x08001787
 8001724:	08001815 	.word	0x08001815
 8001728:	080016d9 	.word	0x080016d9
 800172c:	080016d9 	.word	0x080016d9
 8001730:	0800187d 	.word	0x0800187d
 8001734:	080016d9 	.word	0x080016d9
 8001738:	08001787 	.word	0x08001787
 800173c:	080016d9 	.word	0x080016d9
 8001740:	080016d9 	.word	0x080016d9
 8001744:	0800181d 	.word	0x0800181d
 8001748:	6833      	ldr	r3, [r6, #0]
 800174a:	1d1a      	adds	r2, r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6032      	str	r2, [r6, #0]
 8001750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001758:	2301      	movs	r3, #1
 800175a:	e09c      	b.n	8001896 <_printf_i+0x1e6>
 800175c:	6833      	ldr	r3, [r6, #0]
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	1d19      	adds	r1, r3, #4
 8001762:	6031      	str	r1, [r6, #0]
 8001764:	0606      	lsls	r6, r0, #24
 8001766:	d501      	bpl.n	800176c <_printf_i+0xbc>
 8001768:	681d      	ldr	r5, [r3, #0]
 800176a:	e003      	b.n	8001774 <_printf_i+0xc4>
 800176c:	0645      	lsls	r5, r0, #25
 800176e:	d5fb      	bpl.n	8001768 <_printf_i+0xb8>
 8001770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001774:	2d00      	cmp	r5, #0
 8001776:	da03      	bge.n	8001780 <_printf_i+0xd0>
 8001778:	232d      	movs	r3, #45	@ 0x2d
 800177a:	426d      	negs	r5, r5
 800177c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001780:	230a      	movs	r3, #10
 8001782:	4858      	ldr	r0, [pc, #352]	@ (80018e4 <_printf_i+0x234>)
 8001784:	e011      	b.n	80017aa <_printf_i+0xfa>
 8001786:	6821      	ldr	r1, [r4, #0]
 8001788:	6833      	ldr	r3, [r6, #0]
 800178a:	0608      	lsls	r0, r1, #24
 800178c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001790:	d402      	bmi.n	8001798 <_printf_i+0xe8>
 8001792:	0649      	lsls	r1, r1, #25
 8001794:	bf48      	it	mi
 8001796:	b2ad      	uxthmi	r5, r5
 8001798:	2f6f      	cmp	r7, #111	@ 0x6f
 800179a:	6033      	str	r3, [r6, #0]
 800179c:	bf14      	ite	ne
 800179e:	230a      	movne	r3, #10
 80017a0:	2308      	moveq	r3, #8
 80017a2:	4850      	ldr	r0, [pc, #320]	@ (80018e4 <_printf_i+0x234>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80017aa:	6866      	ldr	r6, [r4, #4]
 80017ac:	2e00      	cmp	r6, #0
 80017ae:	60a6      	str	r6, [r4, #8]
 80017b0:	db05      	blt.n	80017be <_printf_i+0x10e>
 80017b2:	6821      	ldr	r1, [r4, #0]
 80017b4:	432e      	orrs	r6, r5
 80017b6:	f021 0104 	bic.w	r1, r1, #4
 80017ba:	6021      	str	r1, [r4, #0]
 80017bc:	d04b      	beq.n	8001856 <_printf_i+0x1a6>
 80017be:	4616      	mov	r6, r2
 80017c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80017c4:	fb03 5711 	mls	r7, r3, r1, r5
 80017c8:	5dc7      	ldrb	r7, [r0, r7]
 80017ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80017ce:	462f      	mov	r7, r5
 80017d0:	42bb      	cmp	r3, r7
 80017d2:	460d      	mov	r5, r1
 80017d4:	d9f4      	bls.n	80017c0 <_printf_i+0x110>
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d10b      	bne.n	80017f2 <_printf_i+0x142>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	07df      	lsls	r7, r3, #31
 80017de:	d508      	bpl.n	80017f2 <_printf_i+0x142>
 80017e0:	6923      	ldr	r3, [r4, #16]
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	4299      	cmp	r1, r3
 80017e6:	bfde      	ittt	le
 80017e8:	2330      	movle	r3, #48	@ 0x30
 80017ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80017ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80017f2:	1b92      	subs	r2, r2, r6
 80017f4:	6122      	str	r2, [r4, #16]
 80017f6:	464b      	mov	r3, r9
 80017f8:	4621      	mov	r1, r4
 80017fa:	4640      	mov	r0, r8
 80017fc:	f8cd a000 	str.w	sl, [sp]
 8001800:	aa03      	add	r2, sp, #12
 8001802:	f7ff fee3 	bl	80015cc <_printf_common>
 8001806:	3001      	adds	r0, #1
 8001808:	d14a      	bne.n	80018a0 <_printf_i+0x1f0>
 800180a:	f04f 30ff 	mov.w	r0, #4294967295
 800180e:	b004      	add	sp, #16
 8001810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	f043 0320 	orr.w	r3, r3, #32
 800181a:	6023      	str	r3, [r4, #0]
 800181c:	2778      	movs	r7, #120	@ 0x78
 800181e:	4832      	ldr	r0, [pc, #200]	@ (80018e8 <_printf_i+0x238>)
 8001820:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	6831      	ldr	r1, [r6, #0]
 8001828:	061f      	lsls	r7, r3, #24
 800182a:	f851 5b04 	ldr.w	r5, [r1], #4
 800182e:	d402      	bmi.n	8001836 <_printf_i+0x186>
 8001830:	065f      	lsls	r7, r3, #25
 8001832:	bf48      	it	mi
 8001834:	b2ad      	uxthmi	r5, r5
 8001836:	6031      	str	r1, [r6, #0]
 8001838:	07d9      	lsls	r1, r3, #31
 800183a:	bf44      	itt	mi
 800183c:	f043 0320 	orrmi.w	r3, r3, #32
 8001840:	6023      	strmi	r3, [r4, #0]
 8001842:	b11d      	cbz	r5, 800184c <_printf_i+0x19c>
 8001844:	2310      	movs	r3, #16
 8001846:	e7ad      	b.n	80017a4 <_printf_i+0xf4>
 8001848:	4826      	ldr	r0, [pc, #152]	@ (80018e4 <_printf_i+0x234>)
 800184a:	e7e9      	b.n	8001820 <_printf_i+0x170>
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	f023 0320 	bic.w	r3, r3, #32
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	e7f6      	b.n	8001844 <_printf_i+0x194>
 8001856:	4616      	mov	r6, r2
 8001858:	e7bd      	b.n	80017d6 <_printf_i+0x126>
 800185a:	6833      	ldr	r3, [r6, #0]
 800185c:	6825      	ldr	r5, [r4, #0]
 800185e:	1d18      	adds	r0, r3, #4
 8001860:	6961      	ldr	r1, [r4, #20]
 8001862:	6030      	str	r0, [r6, #0]
 8001864:	062e      	lsls	r6, r5, #24
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	d501      	bpl.n	800186e <_printf_i+0x1be>
 800186a:	6019      	str	r1, [r3, #0]
 800186c:	e002      	b.n	8001874 <_printf_i+0x1c4>
 800186e:	0668      	lsls	r0, r5, #25
 8001870:	d5fb      	bpl.n	800186a <_printf_i+0x1ba>
 8001872:	8019      	strh	r1, [r3, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	4616      	mov	r6, r2
 8001878:	6123      	str	r3, [r4, #16]
 800187a:	e7bc      	b.n	80017f6 <_printf_i+0x146>
 800187c:	6833      	ldr	r3, [r6, #0]
 800187e:	2100      	movs	r1, #0
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	6032      	str	r2, [r6, #0]
 8001884:	681e      	ldr	r6, [r3, #0]
 8001886:	6862      	ldr	r2, [r4, #4]
 8001888:	4630      	mov	r0, r6
 800188a:	f000 f859 	bl	8001940 <memchr>
 800188e:	b108      	cbz	r0, 8001894 <_printf_i+0x1e4>
 8001890:	1b80      	subs	r0, r0, r6
 8001892:	6060      	str	r0, [r4, #4]
 8001894:	6863      	ldr	r3, [r4, #4]
 8001896:	6123      	str	r3, [r4, #16]
 8001898:	2300      	movs	r3, #0
 800189a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800189e:	e7aa      	b.n	80017f6 <_printf_i+0x146>
 80018a0:	4632      	mov	r2, r6
 80018a2:	4649      	mov	r1, r9
 80018a4:	4640      	mov	r0, r8
 80018a6:	6923      	ldr	r3, [r4, #16]
 80018a8:	47d0      	blx	sl
 80018aa:	3001      	adds	r0, #1
 80018ac:	d0ad      	beq.n	800180a <_printf_i+0x15a>
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	079b      	lsls	r3, r3, #30
 80018b2:	d413      	bmi.n	80018dc <_printf_i+0x22c>
 80018b4:	68e0      	ldr	r0, [r4, #12]
 80018b6:	9b03      	ldr	r3, [sp, #12]
 80018b8:	4298      	cmp	r0, r3
 80018ba:	bfb8      	it	lt
 80018bc:	4618      	movlt	r0, r3
 80018be:	e7a6      	b.n	800180e <_printf_i+0x15e>
 80018c0:	2301      	movs	r3, #1
 80018c2:	4632      	mov	r2, r6
 80018c4:	4649      	mov	r1, r9
 80018c6:	4640      	mov	r0, r8
 80018c8:	47d0      	blx	sl
 80018ca:	3001      	adds	r0, #1
 80018cc:	d09d      	beq.n	800180a <_printf_i+0x15a>
 80018ce:	3501      	adds	r5, #1
 80018d0:	68e3      	ldr	r3, [r4, #12]
 80018d2:	9903      	ldr	r1, [sp, #12]
 80018d4:	1a5b      	subs	r3, r3, r1
 80018d6:	42ab      	cmp	r3, r5
 80018d8:	dcf2      	bgt.n	80018c0 <_printf_i+0x210>
 80018da:	e7eb      	b.n	80018b4 <_printf_i+0x204>
 80018dc:	2500      	movs	r5, #0
 80018de:	f104 0619 	add.w	r6, r4, #25
 80018e2:	e7f5      	b.n	80018d0 <_printf_i+0x220>
 80018e4:	08001a45 	.word	0x08001a45
 80018e8:	08001a56 	.word	0x08001a56

080018ec <memmove>:
 80018ec:	4288      	cmp	r0, r1
 80018ee:	b510      	push	{r4, lr}
 80018f0:	eb01 0402 	add.w	r4, r1, r2
 80018f4:	d902      	bls.n	80018fc <memmove+0x10>
 80018f6:	4284      	cmp	r4, r0
 80018f8:	4623      	mov	r3, r4
 80018fa:	d807      	bhi.n	800190c <memmove+0x20>
 80018fc:	1e43      	subs	r3, r0, #1
 80018fe:	42a1      	cmp	r1, r4
 8001900:	d008      	beq.n	8001914 <memmove+0x28>
 8001902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800190a:	e7f8      	b.n	80018fe <memmove+0x12>
 800190c:	4601      	mov	r1, r0
 800190e:	4402      	add	r2, r0
 8001910:	428a      	cmp	r2, r1
 8001912:	d100      	bne.n	8001916 <memmove+0x2a>
 8001914:	bd10      	pop	{r4, pc}
 8001916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800191a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800191e:	e7f7      	b.n	8001910 <memmove+0x24>

08001920 <_sbrk_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	2300      	movs	r3, #0
 8001924:	4d05      	ldr	r5, [pc, #20]	@ (800193c <_sbrk_r+0x1c>)
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	602b      	str	r3, [r5, #0]
 800192c:	f7ff faee 	bl	8000f0c <_sbrk>
 8001930:	1c43      	adds	r3, r0, #1
 8001932:	d102      	bne.n	800193a <_sbrk_r+0x1a>
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	b103      	cbz	r3, 800193a <_sbrk_r+0x1a>
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	bd38      	pop	{r3, r4, r5, pc}
 800193c:	20000200 	.word	0x20000200

08001940 <memchr>:
 8001940:	4603      	mov	r3, r0
 8001942:	b510      	push	{r4, lr}
 8001944:	b2c9      	uxtb	r1, r1
 8001946:	4402      	add	r2, r0
 8001948:	4293      	cmp	r3, r2
 800194a:	4618      	mov	r0, r3
 800194c:	d101      	bne.n	8001952 <memchr+0x12>
 800194e:	2000      	movs	r0, #0
 8001950:	e003      	b.n	800195a <memchr+0x1a>
 8001952:	7804      	ldrb	r4, [r0, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	428c      	cmp	r4, r1
 8001958:	d1f6      	bne.n	8001948 <memchr+0x8>
 800195a:	bd10      	pop	{r4, pc}

0800195c <memcpy>:
 800195c:	440a      	add	r2, r1
 800195e:	4291      	cmp	r1, r2
 8001960:	f100 33ff 	add.w	r3, r0, #4294967295
 8001964:	d100      	bne.n	8001968 <memcpy+0xc>
 8001966:	4770      	bx	lr
 8001968:	b510      	push	{r4, lr}
 800196a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800196e:	4291      	cmp	r1, r2
 8001970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001974:	d1f9      	bne.n	800196a <memcpy+0xe>
 8001976:	bd10      	pop	{r4, pc}

08001978 <_realloc_r>:
 8001978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197c:	4607      	mov	r7, r0
 800197e:	4614      	mov	r4, r2
 8001980:	460d      	mov	r5, r1
 8001982:	b921      	cbnz	r1, 800198e <_realloc_r+0x16>
 8001984:	4611      	mov	r1, r2
 8001986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800198a:	f7ff bc3b 	b.w	8001204 <_malloc_r>
 800198e:	b92a      	cbnz	r2, 800199c <_realloc_r+0x24>
 8001990:	f7ff fbce 	bl	8001130 <_free_r>
 8001994:	4625      	mov	r5, r4
 8001996:	4628      	mov	r0, r5
 8001998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800199c:	f000 f81a 	bl	80019d4 <_malloc_usable_size_r>
 80019a0:	4284      	cmp	r4, r0
 80019a2:	4606      	mov	r6, r0
 80019a4:	d802      	bhi.n	80019ac <_realloc_r+0x34>
 80019a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80019aa:	d8f4      	bhi.n	8001996 <_realloc_r+0x1e>
 80019ac:	4621      	mov	r1, r4
 80019ae:	4638      	mov	r0, r7
 80019b0:	f7ff fc28 	bl	8001204 <_malloc_r>
 80019b4:	4680      	mov	r8, r0
 80019b6:	b908      	cbnz	r0, 80019bc <_realloc_r+0x44>
 80019b8:	4645      	mov	r5, r8
 80019ba:	e7ec      	b.n	8001996 <_realloc_r+0x1e>
 80019bc:	42b4      	cmp	r4, r6
 80019be:	4622      	mov	r2, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	bf28      	it	cs
 80019c4:	4632      	movcs	r2, r6
 80019c6:	f7ff ffc9 	bl	800195c <memcpy>
 80019ca:	4629      	mov	r1, r5
 80019cc:	4638      	mov	r0, r7
 80019ce:	f7ff fbaf 	bl	8001130 <_free_r>
 80019d2:	e7f1      	b.n	80019b8 <_realloc_r+0x40>

080019d4 <_malloc_usable_size_r>:
 80019d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d8:	1f18      	subs	r0, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bfbc      	itt	lt
 80019de:	580b      	ldrlt	r3, [r1, r0]
 80019e0:	18c0      	addlt	r0, r0, r3
 80019e2:	4770      	bx	lr

080019e4 <_init>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr

080019f0 <_fini>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	bf00      	nop
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr

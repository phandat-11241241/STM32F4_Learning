
build/debug/Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001110  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001298  08001298  00002298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012a8  080012a8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080012a8  080012a8  000022a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012b0  080012b0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012b0  080012b0  000022b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012b4  080012b4  000022b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080012b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000044  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00004608  00000000  00000000  0000307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000013ca  00000000  00000000  00007687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000010e9  00000000  00000000  00008a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000500  00000000  00000000  00009b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000003a3  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000034b1  00000000  00000000  0000a3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00001aec  00000000  00000000  0000d894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ae8  00000000  00000000  0000f380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  0000fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001280 	.word	0x08001280

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001280 	.word	0x08001280

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Flash_Erase>:
#include "flash.h"
#include <stdint.h>
#include "stm32f4xx.h"
void Flash_Erase(uint32_t adrress){
 80004f4:	b500      	push	{lr}
 80004f6:	b087      	sub	sp, #28
    HAL_FLASH_Unlock();
 80004f8:	f000 f9f8 	bl	80008ec <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.Banks = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	9302      	str	r3, [sp, #8]
    EraseInitStruct.NbSectors = 1;
 8000500:	9304      	str	r3, [sp, #16]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000502:	2300      	movs	r3, #0
 8000504:	9301      	str	r3, [sp, #4]
    uint32_t page_status;
    HAL_FLASHEx_Erase(&EraseInitStruct, &page_status);
 8000506:	4669      	mov	r1, sp
 8000508:	a801      	add	r0, sp, #4
 800050a:	f000 fae7 	bl	8000adc <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 800050e:	f000 fa05 	bl	800091c <HAL_FLASH_Lock>
}
 8000512:	b007      	add	sp, #28
 8000514:	f85d fb04 	ldr.w	pc, [sp], #4

08000518 <Flash_Write_Int>:
void Flash_Write_Int(uint32_t address, int Data){
 8000518:	b538      	push	{r3, r4, r5, lr}
 800051a:	4605      	mov	r5, r0
 800051c:	460c      	mov	r4, r1
    HAL_FLASH_Unlock();
 800051e:	f000 f9e5 	bl	80008ec <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address,  Data);
 8000522:	4622      	mov	r2, r4
 8000524:	17e3      	asrs	r3, r4, #31
 8000526:	4629      	mov	r1, r5
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fa31 	bl	8000990 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 800052e:	f000 f9f5 	bl	800091c <HAL_FLASH_Lock>
}
 8000532:	bd38      	pop	{r3, r4, r5, pc}

08000534 <Flash_Read_Int>:
}
void Flash_Write_Array(uint32_t address, uint8_t *arr, uint16_t len){

}
int Flash_Read_Int(uint32_t address){
    return *(__IO uint16_t *)(address);
 8000534:	8800      	ldrh	r0, [r0, #0]
}
 8000536:	b280      	uxth	r0, r0
 8000538:	4770      	bx	lr
	...

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053e:	2100      	movs	r1, #0
 8000540:	9100      	str	r1, [sp, #0]
 8000542:	4b0b      	ldr	r3, [pc, #44]	@ (8000570 <MX_GPIO_Init+0x34>)
 8000544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800054a:	631a      	str	r2, [r3, #48]	@ 0x30
 800054c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800054e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000552:	9200      	str	r2, [sp, #0]
 8000554:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800055a:	f042 0201 	orr.w	r2, r2, #1
 800055e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	b002      	add	sp, #8
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000576:	e7fe      	b.n	8000576 <Error_Handler+0x2>

08000578 <SystemClock_Config>:
{
 8000578:	b500      	push	{lr}
 800057a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057c:	2230      	movs	r2, #48	@ 0x30
 800057e:	2100      	movs	r1, #0
 8000580:	a808      	add	r0, sp, #32
 8000582:	f000 fe50 	bl	8001226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2300      	movs	r3, #0
 8000588:	9303      	str	r3, [sp, #12]
 800058a:	9304      	str	r3, [sp, #16]
 800058c:	9305      	str	r3, [sp, #20]
 800058e:	9306      	str	r3, [sp, #24]
 8000590:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <SystemClock_Config+0x9c>)
 8000596:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000598:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800059c:	6411      	str	r1, [r2, #64]	@ 0x40
 800059e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80005a0:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 80005a4:	9201      	str	r2, [sp, #4]
 80005a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	9302      	str	r3, [sp, #8]
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <SystemClock_Config+0xa0>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005be:	2301      	movs	r3, #1
 80005c0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005d0:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005d2:	2219      	movs	r2, #25
 80005d4:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005d6:	2290      	movs	r2, #144	@ 0x90
 80005d8:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	a808      	add	r0, sp, #32
 80005e2:	f000 fae1 	bl	8000ba8 <HAL_RCC_OscConfig>
 80005e6:	b980      	cbnz	r0, 800060a <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2102      	movs	r1, #2
 80005ee:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005f8:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	a803      	add	r0, sp, #12
 80005fe:	f000 fd23 	bl	8001048 <HAL_RCC_ClockConfig>
 8000602:	b920      	cbnz	r0, 800060e <SystemClock_Config+0x96>
}
 8000604:	b015      	add	sp, #84	@ 0x54
 8000606:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800060a:	f7ff ffb3 	bl	8000574 <Error_Handler>
    Error_Handler();
 800060e:	f7ff ffb1 	bl	8000574 <Error_Handler>
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <main>:
{
 800061c:	b508      	push	{r3, lr}
  HAL_Init();
 800061e:	f000 f83d 	bl	800069c <HAL_Init>
  SystemClock_Config();
 8000622:	f7ff ffa9 	bl	8000578 <SystemClock_Config>
  MX_GPIO_Init();
 8000626:	f7ff ff89 	bl	800053c <MX_GPIO_Init>
  Flash_Erase(ADDRESS_DATA_STORAGE);
 800062a:	4c07      	ldr	r4, [pc, #28]	@ (8000648 <main+0x2c>)
 800062c:	4620      	mov	r0, r4
 800062e:	f7ff ff61 	bl	80004f4 <Flash_Erase>
  Flash_Write_Int(ADDRESS_DATA_STORAGE, 2002);
 8000632:	f240 71d2 	movw	r1, #2002	@ 0x7d2
 8000636:	4620      	mov	r0, r4
 8000638:	f7ff ff6e 	bl	8000518 <Flash_Write_Int>
  data = Flash_Read_Int(ADDRESS_DATA_STORAGE);
 800063c:	4620      	mov	r0, r4
 800063e:	f7ff ff79 	bl	8000534 <Flash_Read_Int>
 8000642:	4b02      	ldr	r3, [pc, #8]	@ (800064c <main+0x30>)
 8000644:	6018      	str	r0, [r3, #0]
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x2a>
 8000648:	08020000 	.word	0x08020000
 800064c:	20000028 	.word	0x20000028

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <HAL_InitTick+0x40>)
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <HAL_InitTick+0x44>)
 8000662:	6810      	ldr	r0, [r2, #0]
 8000664:	fbb0 f0f3 	udiv	r0, r0, r3
 8000668:	f000 f89a 	bl	80007a0 <HAL_SYSTICK_Config>
 800066c:	b968      	cbnz	r0, 800068a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	2c0f      	cmp	r4, #15
 8000670:	d901      	bls.n	8000676 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
 8000674:	e00a      	b.n	800068c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000676:	2200      	movs	r2, #0
 8000678:	4621      	mov	r1, r4
 800067a:	f04f 30ff 	mov.w	r0, #4294967295
 800067e:	f000 f87f 	bl	8000780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_InitTick+0x48>)
 8000684:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2000      	movs	r0, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800068a:	2001      	movs	r0, #1
}
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_Init>:
{
 800069c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <HAL_Init+0x30>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 f84f 	bl	800075c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	200f      	movs	r0, #15
 80006c0:	f7ff ffc6 	bl	8000650 <HAL_InitTick>
  HAL_MspInit();
 80006c4:	f000 fa54 	bl	8000b70 <HAL_MspInit>
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40023c00 	.word	0x40023c00

080006d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d0:	4a03      	ldr	r2, [pc, #12]	@ (80006e0 <HAL_IncTick+0x10>)
 80006d2:	6811      	ldr	r1, [r2, #0]
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <HAL_IncTick+0x14>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	440b      	add	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e8:	4b01      	ldr	r3, [pc, #4]	@ (80006f0 <HAL_GetTick+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000002c 	.word	0x2000002c

080006f4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80006f4:	2800      	cmp	r0, #0
 80006f6:	db08      	blt.n	800070a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	0109      	lsls	r1, r1, #4
 80006fa:	b2c9      	uxtb	r1, r1
 80006fc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000700:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000704:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8000708:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	f000 000f 	and.w	r0, r0, #15
 800070e:	0109      	lsls	r1, r1, #4
 8000710:	b2c9      	uxtb	r1, r1
 8000712:	4b01      	ldr	r3, [pc, #4]	@ (8000718 <__NVIC_SetPriority+0x24>)
 8000714:	5419      	strb	r1, [r3, r0]
  }
}
 8000716:	4770      	bx	lr
 8000718:	e000ed14 	.word	0xe000ed14

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800071e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c0 0c07 	rsb	ip, r0, #7
 8000726:	f1bc 0f04 	cmp.w	ip, #4
 800072a:	bf28      	it	cs
 800072c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000730:	1d03      	adds	r3, r0, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d90f      	bls.n	8000756 <NVIC_EncodePriority+0x3a>
 8000736:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	f04f 3eff 	mov.w	lr, #4294967295
 800073c:	fa0e f00c 	lsl.w	r0, lr, ip
 8000740:	ea21 0100 	bic.w	r1, r1, r0
 8000744:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000746:	fa0e fe03 	lsl.w	lr, lr, r3
 800074a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800074e:	ea41 0002 	orr.w	r0, r1, r2
 8000752:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	2300      	movs	r3, #0
 8000758:	e7ee      	b.n	8000738 <NVIC_EncodePriority+0x1c>
	...

0800075c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4a07      	ldr	r2, [pc, #28]	@ (800077c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800075e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000760:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000764:	041b      	lsls	r3, r3, #16
 8000766:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000768:	0200      	lsls	r0, r0, #8
 800076a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800076e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000778:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_NVIC_SetPriority+0x1c>)
 8000786:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000788:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800078c:	f7ff ffc6 	bl	800071c <NVIC_EncodePriority>
 8000790:	4601      	mov	r1, r0
 8000792:	4620      	mov	r0, r4
 8000794:	f7ff ffae 	bl	80006f4 <__NVIC_SetPriority>
}
 8000798:	bd10      	pop	{r4, pc}
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	3801      	subs	r0, #1
 80007a2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007a6:	d20b      	bcs.n	80007c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80007ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <HAL_SYSTICK_Config+0x24>)
 80007b0:	21f0      	movs	r1, #240	@ 0xf0
 80007b2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b6:	2000      	movs	r0, #0
 80007b8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	2207      	movs	r2, #7
 80007bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80007c8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80007ca:	490a      	ldr	r1, [pc, #40]	@ (80007f4 <FLASH_Program_DoubleWord+0x2c>)
 80007cc:	690c      	ldr	r4, [r1, #16]
 80007ce:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 80007d2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80007d4:	690c      	ldr	r4, [r1, #16]
 80007d6:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 80007da:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80007dc:	690c      	ldr	r4, [r1, #16]
 80007de:	f044 0401 	orr.w	r4, r4, #1
 80007e2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80007e4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80007e6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80007ea:	6043      	str	r3, [r0, #4]
}
 80007ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <FLASH_Program_Word+0x20>)
 80007fa:	691a      	ldr	r2, [r3, #16]
 80007fc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000800:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000802:	691a      	ldr	r2, [r3, #16]
 8000804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000808:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 8000812:	6001      	str	r1, [r0, #0]
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023c00 	.word	0x40023c00

0800081c <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <FLASH_Program_HalfWord+0x20>)
 800081e:	691a      	ldr	r2, [r3, #16]
 8000820:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000824:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000826:	691a      	ldr	r2, [r3, #16]
 8000828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800082c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	f042 0201 	orr.w	r2, r2, #1
 8000834:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 8000836:	8001      	strh	r1, [r0, #0]
}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023c00 	.word	0x40023c00

08000840 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <FLASH_Program_Byte+0x1c>)
 8000842:	691a      	ldr	r2, [r3, #16]
 8000844:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000848:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800084a:	691a      	ldr	r2, [r3, #16]
 800084c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800084e:	691a      	ldr	r2, [r3, #16]
 8000850:	f042 0201 	orr.w	r2, r2, #1
 8000854:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t *)Address = Data;
 8000856:	7001      	strb	r1, [r0, #0]
}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023c00 	.word	0x40023c00

08000860 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	f013 0f10 	tst.w	r3, #16
 8000868:	d007      	beq.n	800087a <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800086a:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <FLASH_SetErrorCode+0x88>)
 800086c:	69d3      	ldr	r3, [r2, #28]
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 8000876:	2210      	movs	r2, #16
 8000878:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	f013 0f20 	tst.w	r3, #32
 8000882:	d007      	beq.n	8000894 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000884:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <FLASH_SetErrorCode+0x88>)
 8000886:	69d3      	ldr	r3, [r2, #28]
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 8000890:	2220      	movs	r2, #32
 8000892:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800089c:	d007      	beq.n	80008ae <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800089e:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <FLASH_SetErrorCode+0x88>)
 80008a0:	69d3      	ldr	r3, [r2, #28]
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 80008aa:	2240      	movs	r2, #64	@ 0x40
 80008ac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80008ae:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80008b6:	d007      	beq.n	80008c8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80008b8:	4a0b      	ldr	r2, [pc, #44]	@ (80008e8 <FLASH_SetErrorCode+0x88>)
 80008ba:	69d3      	ldr	r3, [r2, #28]
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	f013 0f02 	tst.w	r3, #2
 80008d0:	d007      	beq.n	80008e2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <FLASH_SetErrorCode+0x88>)
 80008d4:	69d3      	ldr	r3, [r2, #28]
 80008d6:	f043 0320 	orr.w	r3, r3, #32
 80008da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80008dc:	4b01      	ldr	r3, [pc, #4]	@ (80008e4 <FLASH_SetErrorCode+0x84>)
 80008de:	2202      	movs	r2, #2
 80008e0:	60da      	str	r2, [r3, #12]
  }
}
 80008e2:	4770      	bx	lr
 80008e4:	40023c00 	.word	0x40023c00
 80008e8:	20000030 	.word	0x20000030

080008ec <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_FLASH_Unlock+0x28>)
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db01      	blt.n	80008f8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80008f4:	2000      	movs	r0, #0
 80008f6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_FLASH_Unlock+0x28>)
 80008fa:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_FLASH_Unlock+0x2c>)
 80008fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80008fe:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8000902:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db01      	blt.n	800090e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800090a:	2000      	movs	r0, #0
 800090c:	4770      	bx	lr
      status = HAL_ERROR;
 800090e:	2001      	movs	r0, #1
}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023c00 	.word	0x40023c00
 8000918:	45670123 	.word	0x45670123

0800091c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800091c:	4a03      	ldr	r2, [pc, #12]	@ (800092c <HAL_FLASH_Lock+0x10>)
 800091e:	6913      	ldr	r3, [r2, #16]
 8000920:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000924:	6113      	str	r3, [r2, #16]
}
 8000926:	2000      	movs	r0, #0
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023c00 	.word	0x40023c00

08000930 <FLASH_WaitForLastOperation>:
{
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <FLASH_WaitForLastOperation+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800093a:	f7ff fed5 	bl	80006e8 <HAL_GetTick>
 800093e:	4605      	mov	r5, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <FLASH_WaitForLastOperation+0x5c>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000948:	d00a      	beq.n	8000960 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 800094a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800094e:	d0f7      	beq.n	8000940 <FLASH_WaitForLastOperation+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000950:	b124      	cbz	r4, 800095c <FLASH_WaitForLastOperation+0x2c>
 8000952:	f7ff fec9 	bl	80006e8 <HAL_GetTick>
 8000956:	1b40      	subs	r0, r0, r5
 8000958:	42a0      	cmp	r0, r4
 800095a:	d9f1      	bls.n	8000940 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 800095c:	2003      	movs	r0, #3
 800095e:	e00d      	b.n	800097c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000960:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <FLASH_WaitForLastOperation+0x5c>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	f013 0f01 	tst.w	r3, #1
 8000968:	d002      	beq.n	8000970 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <FLASH_WaitForLastOperation+0x5c>)
 800096c:	2201      	movs	r2, #1
 800096e:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <FLASH_WaitForLastOperation+0x5c>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f013 0ff2 	tst.w	r3, #242	@ 0xf2
 8000978:	d101      	bne.n	800097e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800097a:	2000      	movs	r0, #0
}
 800097c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 800097e:	f7ff ff6f 	bl	8000860 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000982:	2001      	movs	r0, #1
 8000984:	e7fa      	b.n	800097c <FLASH_WaitForLastOperation+0x4c>
 8000986:	bf00      	nop
 8000988:	20000030 	.word	0x20000030
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_FLASH_Program>:
{
 8000990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000992:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000994:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <HAL_FLASH_Program+0x74>)
 8000996:	7e12      	ldrb	r2, [r2, #24]
 8000998:	2a01      	cmp	r2, #1
 800099a:	d030      	beq.n	80009fe <HAL_FLASH_Program+0x6e>
 800099c:	4604      	mov	r4, r0
 800099e:	460d      	mov	r5, r1
 80009a0:	461f      	mov	r7, r3
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_FLASH_Program+0x74>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80009ac:	f7ff ffc0 	bl	8000930 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80009b0:	b990      	cbnz	r0, 80009d8 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80009b2:	b1ac      	cbz	r4, 80009e0 <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80009b4:	2c01      	cmp	r4, #1
 80009b6:	d018      	beq.n	80009ea <HAL_FLASH_Program+0x5a>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80009b8:	2c02      	cmp	r4, #2
 80009ba:	d01b      	beq.n	80009f4 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 80009bc:	4632      	mov	r2, r6
 80009be:	463b      	mov	r3, r7
 80009c0:	4628      	mov	r0, r5
 80009c2:	f7ff ff01 	bl	80007c8 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80009ca:	f7ff ffb1 	bl	8000930 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_FLASH_Program+0x78>)
 80009d0:	6913      	ldr	r3, [r2, #16]
 80009d2:	f023 0301 	bic.w	r3, r3, #1
 80009d6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80009d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <HAL_FLASH_Program+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
}
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80009e0:	b2f1      	uxtb	r1, r6
 80009e2:	4628      	mov	r0, r5
 80009e4:	f7ff ff2c 	bl	8000840 <FLASH_Program_Byte>
 80009e8:	e7ed      	b.n	80009c6 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80009ea:	b2b1      	uxth	r1, r6
 80009ec:	4628      	mov	r0, r5
 80009ee:	f7ff ff15 	bl	800081c <FLASH_Program_HalfWord>
 80009f2:	e7e8      	b.n	80009c6 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 80009f4:	4631      	mov	r1, r6
 80009f6:	4628      	mov	r0, r5
 80009f8:	f7ff fefe 	bl	80007f8 <FLASH_Program_Word>
 80009fc:	e7e3      	b.n	80009c6 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80009fe:	2002      	movs	r0, #2
 8000a00:	e7ed      	b.n	80009de <HAL_FLASH_Program+0x4e>
 8000a02:	bf00      	nop
 8000a04:	20000030 	.word	0x20000030
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <FLASH_MassErase+0x20>)
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000a14:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	f042 0204 	orr.w	r2, r2, #4
 8000a1c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8000a1e:	691a      	ldr	r2, [r3, #16]
 8000a20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000a24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000a30:	2901      	cmp	r1, #1
 8000a32:	d005      	beq.n	8000a40 <FLASH_Erase_Sector+0x10>
 8000a34:	2902      	cmp	r1, #2
 8000a36:	d006      	beq.n	8000a46 <FLASH_Erase_Sector+0x16>
 8000a38:	b139      	cbz	r1, 8000a4a <FLASH_Erase_Sector+0x1a>
{
 8000a3a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000a3e:	e004      	b.n	8000a4a <FLASH_Erase_Sector+0x1a>
 8000a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a44:	e001      	b.n	8000a4a <FLASH_Erase_Sector+0x1a>
 8000a46:	f44f 7100 	mov.w	r1, #512	@ 0x200
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <FLASH_Erase_Sector+0x48>)
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000a52:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000a54:	691a      	ldr	r2, [r3, #16]
 8000a56:	430a      	orrs	r2, r1
 8000a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000a5a:	691a      	ldr	r2, [r3, #16]
 8000a5c:	f022 0278 	bic.w	r2, r2, #120	@ 0x78
 8000a60:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000a62:	691a      	ldr	r2, [r3, #16]
 8000a64:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000a68:	f040 0002 	orr.w	r0, r0, #2
 8000a6c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000a6e:	691a      	ldr	r2, [r3, #16]
 8000a70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000a74:	611a      	str	r2, [r3, #16]
}
 8000a76:	4770      	bx	lr
 8000a78:	40023c00 	.word	0x40023c00

08000a7c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <FLASH_FlushCaches+0x5c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8000a84:	d010      	beq.n	8000aa8 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <FLASH_FlushCaches+0x5c>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000a8e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000a9e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000aa6:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <FLASH_FlushCaches+0x5c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8000ab0:	d010      	beq.n	8000ad4 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <FLASH_FlushCaches+0x5c>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000aba:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000aca:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ad2:	601a      	str	r2, [r3, #0]
  }
}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_FLASHEx_Erase>:
{
 8000adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000ade:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <HAL_FLASHEx_Erase+0x8c>)
 8000ae0:	7e1b      	ldrb	r3, [r3, #24]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d03e      	beq.n	8000b64 <HAL_FLASHEx_Erase+0x88>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460e      	mov	r6, r1
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <HAL_FLASHEx_Erase+0x8c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000af0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000af4:	f7ff ff1c 	bl	8000930 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8000af8:	4607      	mov	r7, r0
 8000afa:	bb70      	cbnz	r0, 8000b5a <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	6033      	str	r3, [r6, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d016      	beq.n	8000b36 <HAL_FLASHEx_Erase+0x5a>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b08:	68a5      	ldr	r5, [r4, #8]
 8000b0a:	68e3      	ldr	r3, [r4, #12]
 8000b0c:	68a2      	ldr	r2, [r4, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	42ab      	cmp	r3, r5
 8000b12:	d920      	bls.n	8000b56 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000b14:	7c21      	ldrb	r1, [r4, #16]
 8000b16:	4628      	mov	r0, r5
 8000b18:	f7ff ff8a 	bl	8000a30 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b20:	f7ff ff06 	bl	8000930 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_FLASHEx_Erase+0x90>)
 8000b26:	6913      	ldr	r3, [r2, #16]
 8000b28:	f023 037a 	bic.w	r3, r3, #122	@ 0x7a
 8000b2c:	6113      	str	r3, [r2, #16]
        if (status != HAL_OK)
 8000b2e:	4607      	mov	r7, r0
 8000b30:	b980      	cbnz	r0, 8000b54 <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000b32:	3501      	adds	r5, #1
 8000b34:	e7e9      	b.n	8000b0a <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000b36:	6861      	ldr	r1, [r4, #4]
 8000b38:	7c20      	ldrb	r0, [r4, #16]
 8000b3a:	f7ff ff67 	bl	8000a0c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b3e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b42:	f7ff fef5 	bl	8000930 <FLASH_WaitForLastOperation>
 8000b46:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000b48:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <HAL_FLASHEx_Erase+0x90>)
 8000b4a:	6913      	ldr	r3, [r2, #16]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	6113      	str	r3, [r2, #16]
 8000b52:	e000      	b.n	8000b56 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8000b54:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8000b56:	f7ff ff91 	bl	8000a7c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000b5a:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_FLASHEx_Erase+0x8c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	761a      	strb	r2, [r3, #24]
}
 8000b60:	4638      	mov	r0, r7
 8000b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000b64:	2702      	movs	r7, #2
 8000b66:	e7fb      	b.n	8000b60 <HAL_FLASHEx_Erase+0x84>
 8000b68:	20000030 	.word	0x20000030
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2100      	movs	r1, #0
 8000b74:	9100      	str	r1, [sp, #0]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <HAL_MspInit+0x34>)
 8000b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000b7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b82:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000b86:	9200      	str	r2, [sp, #0]
 8000b88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	9101      	str	r1, [sp, #4]
 8000b8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	f000 81e0 	beq.w	8000f6e <HAL_RCC_OscConfig+0x3c6>
{
 8000bae:	b570      	push	{r4, r5, r6, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	f013 0f01 	tst.w	r3, #1
 8000bba:	d03b      	beq.n	8000c34 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000bbc:	4b9f      	ldr	r3, [pc, #636]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d02c      	beq.n	8000c22 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bc8:	4b9c      	ldr	r3, [pc, #624]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	d021      	beq.n	8000c18 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd4:	6863      	ldr	r3, [r4, #4]
 8000bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bda:	d04f      	beq.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000be0:	d052      	beq.n	8000c88 <HAL_RCC_OscConfig+0xe0>
 8000be2:	4b96      	ldr	r3, [pc, #600]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000bf2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d050      	beq.n	8000c9c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fd75 	bl	80006e8 <HAL_GetTick>
 8000bfe:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c00:	4b8e      	ldr	r3, [pc, #568]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000c08:	d114      	bne.n	8000c34 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0a:	f7ff fd6d 	bl	80006e8 <HAL_GetTick>
 8000c0e:	1b40      	subs	r0, r0, r5
 8000c10:	2864      	cmp	r0, #100	@ 0x64
 8000c12:	d9f5      	bls.n	8000c00 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000c14:	2003      	movs	r0, #3
 8000c16:	e1b1      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c18:	4b88      	ldr	r3, [pc, #544]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000c20:	d0d8      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c22:	4b86      	ldr	r3, [pc, #536]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000c2a:	d003      	beq.n	8000c34 <HAL_RCC_OscConfig+0x8c>
 8000c2c:	6863      	ldr	r3, [r4, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 819f 	beq.w	8000f72 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	f013 0f02 	tst.w	r3, #2
 8000c3a:	d054      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f013 0f0c 	tst.w	r3, #12
 8000c44:	d03e      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c46:	4b7d      	ldr	r3, [pc, #500]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d033      	beq.n	8000cba <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000c52:	68e3      	ldr	r3, [r4, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d068      	beq.n	8000d2a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c58:	4b79      	ldr	r3, [pc, #484]	@ (8000e40 <HAL_RCC_OscConfig+0x298>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fd43 	bl	80006e8 <HAL_GetTick>
 8000c62:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c64:	4b75      	ldr	r3, [pc, #468]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f013 0f02 	tst.w	r3, #2
 8000c6c:	d154      	bne.n	8000d18 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c6e:	f7ff fd3b 	bl	80006e8 <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f5      	bls.n	8000c64 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000c78:	2003      	movs	r0, #3
 8000c7a:	e17f      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e7b5      	b.n	8000bf4 <HAL_RCC_OscConfig+0x4c>
 8000c88:	4b6c      	ldr	r3, [pc, #432]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	e7ab      	b.n	8000bf4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fd24 	bl	80006e8 <HAL_GetTick>
 8000ca0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	4b66      	ldr	r3, [pc, #408]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000caa:	d0c3      	beq.n	8000c34 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cac:	f7ff fd1c 	bl	80006e8 <HAL_GetTick>
 8000cb0:	1b40      	subs	r0, r0, r5
 8000cb2:	2864      	cmp	r0, #100	@ 0x64
 8000cb4:	d9f5      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e160      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cba:	4b60      	ldr	r3, [pc, #384]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000cc2:	d1c6      	bne.n	8000c52 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f013 0f02 	tst.w	r3, #2
 8000ccc:	d003      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x12e>
 8000cce:	68e3      	ldr	r3, [r4, #12]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	f040 8150 	bne.w	8000f76 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	4a59      	ldr	r2, [pc, #356]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000cd8:	6813      	ldr	r3, [r2, #0]
 8000cda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000cde:	6921      	ldr	r1, [r4, #16]
 8000ce0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ce4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f013 0f08 	tst.w	r3, #8
 8000cec:	d042      	beq.n	8000d74 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000cee:	6963      	ldr	r3, [r4, #20]
 8000cf0:	b36b      	cbz	r3, 8000d4e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf2:	4b53      	ldr	r3, [pc, #332]	@ (8000e40 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fcf5 	bl	80006e8 <HAL_GetTick>
 8000cfe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d00:	4b4e      	ldr	r3, [pc, #312]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d04:	f013 0f02 	tst.w	r3, #2
 8000d08:	d134      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fced 	bl	80006e8 <HAL_GetTick>
 8000d0e:	1b40      	subs	r0, r0, r5
 8000d10:	2802      	cmp	r0, #2
 8000d12:	d9f5      	bls.n	8000d00 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000d14:	2003      	movs	r0, #3
 8000d16:	e131      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4a48      	ldr	r2, [pc, #288]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000d20:	6921      	ldr	r1, [r4, #16]
 8000d22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e7dd      	b.n	8000ce6 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <HAL_RCC_OscConfig+0x298>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d30:	f7ff fcda 	bl	80006e8 <HAL_GetTick>
 8000d34:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	4b41      	ldr	r3, [pc, #260]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f013 0f02 	tst.w	r3, #2
 8000d3e:	d0d2      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fcd2 	bl	80006e8 <HAL_GetTick>
 8000d44:	1b40      	subs	r0, r0, r5
 8000d46:	2802      	cmp	r0, #2
 8000d48:	d9f5      	bls.n	8000d36 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	e116      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e40 <HAL_RCC_OscConfig+0x298>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d56:	f7ff fcc7 	bl	80006e8 <HAL_GetTick>
 8000d5a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4b37      	ldr	r3, [pc, #220]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d60:	f013 0f02 	tst.w	r3, #2
 8000d64:	d006      	beq.n	8000d74 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d66:	f7ff fcbf 	bl	80006e8 <HAL_GetTick>
 8000d6a:	1b40      	subs	r0, r0, r5
 8000d6c:	2802      	cmp	r0, #2
 8000d6e:	d9f5      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8000d70:	2003      	movs	r0, #3
 8000d72:	e103      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f013 0f04 	tst.w	r3, #4
 8000d7a:	d077      	beq.n	8000e6c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d80:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000d84:	d133      	bne.n	8000dee <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d9e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <HAL_RCC_OscConfig+0x29c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000da8:	d023      	beq.n	8000df2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	68a3      	ldr	r3, [r4, #8]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d034      	beq.n	8000e1a <HAL_RCC_OscConfig+0x272>
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d038      	beq.n	8000e26 <HAL_RCC_OscConfig+0x27e>
 8000db4:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000db6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000db8:	f022 0201 	bic.w	r2, r2, #1
 8000dbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dbe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000dc0:	f022 0204 	bic.w	r2, r2, #4
 8000dc4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dc6:	68a3      	ldr	r3, [r4, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03d      	beq.n	8000e48 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dcc:	f7ff fc8c 	bl	80006e8 <HAL_GetTick>
 8000dd0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dd6:	f013 0f02 	tst.w	r3, #2
 8000dda:	d146      	bne.n	8000e6a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fc84 	bl	80006e8 <HAL_GetTick>
 8000de0:	1b80      	subs	r0, r0, r6
 8000de2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d9f3      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000dea:	2003      	movs	r0, #3
 8000dec:	e0c6      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000dee:	2500      	movs	r5, #0
 8000df0:	e7d6      	b.n	8000da0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df2:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <HAL_RCC_OscConfig+0x29c>)
 8000df4:	6813      	ldr	r3, [r2, #0]
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc74 	bl	80006e8 <HAL_GetTick>
 8000e00:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_RCC_OscConfig+0x29c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000e0a:	d1ce      	bne.n	8000daa <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0c:	f7ff fc6c 	bl	80006e8 <HAL_GetTick>
 8000e10:	1b80      	subs	r0, r0, r6
 8000e12:	2802      	cmp	r0, #2
 8000e14:	d9f5      	bls.n	8000e02 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000e16:	2003      	movs	r0, #3
 8000e18:	e0b0      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e1a:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000e1c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e24:	e7cf      	b.n	8000dc6 <HAL_RCC_OscConfig+0x21e>
 8000e26:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_RCC_OscConfig+0x294>)
 8000e28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e2a:	f042 0204 	orr.w	r2, r2, #4
 8000e2e:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e32:	f042 0201 	orr.w	r2, r2, #1
 8000e36:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e38:	e7c5      	b.n	8000dc6 <HAL_RCC_OscConfig+0x21e>
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	42470000 	.word	0x42470000
 8000e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc4e 	bl	80006e8 <HAL_GetTick>
 8000e4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e4e:	4b52      	ldr	r3, [pc, #328]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e52:	f013 0f02 	tst.w	r3, #2
 8000e56:	d008      	beq.n	8000e6a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc46 	bl	80006e8 <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e62:	4298      	cmp	r0, r3
 8000e64:	d9f3      	bls.n	8000e4e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e088      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000e6a:	b9ed      	cbnz	r5, 8000ea8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e6c:	69a3      	ldr	r3, [r4, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8083 	beq.w	8000f7a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e74:	4a48      	ldr	r2, [pc, #288]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000e76:	6892      	ldr	r2, [r2, #8]
 8000e78:	f002 020c 	and.w	r2, r2, #12
 8000e7c:	2a08      	cmp	r2, #8
 8000e7e:	d051      	beq.n	8000f24 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d017      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e84:	4b45      	ldr	r3, [pc, #276]	@ (8000f9c <HAL_RCC_OscConfig+0x3f4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc2d 	bl	80006e8 <HAL_GetTick>
 8000e8e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e90:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000e98:	d042      	beq.n	8000f20 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e9a:	f7ff fc25 	bl	80006e8 <HAL_GetTick>
 8000e9e:	1b00      	subs	r0, r0, r4
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e069      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000eaa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	e7db      	b.n	8000e6c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000eb4:	4b39      	ldr	r3, [pc, #228]	@ (8000f9c <HAL_RCC_OscConfig+0x3f4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000eba:	f7ff fc15 	bl	80006e8 <HAL_GetTick>
 8000ebe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec0:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000ec8:	d006      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fc0d 	bl	80006e8 <HAL_GetTick>
 8000ece:	1b40      	subs	r0, r0, r5
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9f5      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	e051      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ed8:	69e3      	ldr	r3, [r4, #28]
 8000eda:	6a22      	ldr	r2, [r4, #32]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000ee0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ee4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000ee6:	0852      	lsrs	r2, r2, #1
 8000ee8:	3a01      	subs	r2, #1
 8000eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000ef0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ef4:	4a28      	ldr	r2, [pc, #160]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000ef6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <HAL_RCC_OscConfig+0x3f4>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000efe:	f7ff fbf3 	bl	80006e8 <HAL_GetTick>
 8000f02:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f04:	4b24      	ldr	r3, [pc, #144]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000f0c:	d106      	bne.n	8000f1c <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fbeb 	bl	80006e8 <HAL_GetTick>
 8000f12:	1b00      	subs	r0, r0, r4
 8000f14:	2802      	cmp	r0, #2
 8000f16:	d9f5      	bls.n	8000f04 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000f18:	2003      	movs	r0, #3
 8000f1a:	e02f      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e02d      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f20:	2000      	movs	r0, #0
 8000f22:	e02b      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d02b      	beq.n	8000f80 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <HAL_RCC_OscConfig+0x3f0>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000f30:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d126      	bne.n	8000f84 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000f3a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3c:	428a      	cmp	r2, r1
 8000f3e:	d123      	bne.n	8000f88 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f40:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f42:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000f46:	401a      	ands	r2, r3
 8000f48:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f4c:	d11e      	bne.n	8000f8c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f4e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f52:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f54:	0852      	lsrs	r2, r2, #1
 8000f56:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f58:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f5e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8000f62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f64:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000f68:	d114      	bne.n	8000f94 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e006      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8000f6e:	2001      	movs	r0, #1
}
 8000f70:	4770      	bx	lr
        return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
 8000f74:	e002      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
 8000f78:	e000      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8000f7a:	2000      	movs	r0, #0
}
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
 8000f82:	e7fb      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8000f84:	2001      	movs	r0, #1
 8000f86:	e7f9      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f88:	2001      	movs	r0, #1
 8000f8a:	e7f7      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e7f5      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f90:	2001      	movs	r0, #1
 8000f92:	e7f3      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f94:	2001      	movs	r0, #1
 8000f96:	e7f1      	b.n	8000f7c <HAL_RCC_OscConfig+0x3d4>
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	42470000 	.word	0x42470000

08000fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fa0:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa2:	4b26      	ldr	r3, [pc, #152]	@ (800103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d041      	beq.n	8001032 <HAL_RCC_GetSysClockFreq+0x92>
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d141      	bne.n	8001036 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000fc0:	d012      	beq.n	8000fe8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fca:	481d      	ldr	r0, [pc, #116]	@ (8001040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	fba1 0100 	umull	r0, r1, r1, r0
 8000fd2:	f7ff f8f9 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000fd6:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fde:	3301      	adds	r3, #1
 8000fe0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000fe2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fe6:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000fea:	6858      	ldr	r0, [r3, #4]
 8000fec:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000ff0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000ff4:	ebbc 0c00 	subs.w	ip, ip, r0
 8000ff8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000ffc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001000:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8001004:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8001008:	ebb1 010c 	subs.w	r1, r1, ip
 800100c:	eb63 030e 	sbc.w	r3, r3, lr
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001016:	00c9      	lsls	r1, r1, #3
 8001018:	eb11 0c00 	adds.w	ip, r1, r0
 800101c:	f143 0300 	adc.w	r3, r3, #0
 8001020:	0299      	lsls	r1, r3, #10
 8001022:	2300      	movs	r3, #0
 8001024:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001028:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800102c:	f7ff f8cc 	bl	80001c8 <__aeabi_uldivmod>
 8001030:	e7d1      	b.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001034:	e7d7      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001036:	4803      	ldr	r0, [pc, #12]	@ (8001044 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 8001038:	e7d5      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x46>
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	017d7840 	.word	0x017d7840
 8001044:	00f42400 	.word	0x00f42400

08001048 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001048:	2800      	cmp	r0, #0
 800104a:	f000 809b 	beq.w	8001184 <HAL_RCC_ClockConfig+0x13c>
{
 800104e:	b570      	push	{r4, r5, r6, lr}
 8001050:	460d      	mov	r5, r1
 8001052:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001054:	4b4f      	ldr	r3, [pc, #316]	@ (8001194 <HAL_RCC_ClockConfig+0x14c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	428b      	cmp	r3, r1
 800105e:	d208      	bcs.n	8001072 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001060:	b2cb      	uxtb	r3, r1
 8001062:	4a4c      	ldr	r2, [pc, #304]	@ (8001194 <HAL_RCC_ClockConfig+0x14c>)
 8001064:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	428b      	cmp	r3, r1
 800106e:	f040 808b 	bne.w	8001188 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	f013 0f02 	tst.w	r3, #2
 8001078:	d017      	beq.n	80010aa <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107a:	f013 0f04 	tst.w	r3, #4
 800107e:	d004      	beq.n	800108a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001080:	4a45      	ldr	r2, [pc, #276]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 8001082:	6893      	ldr	r3, [r2, #8]
 8001084:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001088:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	f013 0f08 	tst.w	r3, #8
 8001090:	d004      	beq.n	800109c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001092:	4a41      	ldr	r2, [pc, #260]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 8001094:	6893      	ldr	r3, [r2, #8]
 8001096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800109a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800109c:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010a4:	68a1      	ldr	r1, [r4, #8]
 80010a6:	430b      	orrs	r3, r1
 80010a8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f013 0f01 	tst.w	r3, #1
 80010b0:	d032      	beq.n	8001118 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010b2:	6863      	ldr	r3, [r4, #4]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d021      	beq.n	80010fc <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b8:	1e9a      	subs	r2, r3, #2
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d925      	bls.n	800110a <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010be:	4a36      	ldr	r2, [pc, #216]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f012 0f02 	tst.w	r2, #2
 80010c6:	d061      	beq.n	800118c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010c8:	4933      	ldr	r1, [pc, #204]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 80010ca:	688a      	ldr	r2, [r1, #8]
 80010cc:	f022 0203 	bic.w	r2, r2, #3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80010d4:	f7ff fb08 	bl	80006e8 <HAL_GetTick>
 80010d8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010e8:	d016      	beq.n	8001118 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ea:	f7ff fafd 	bl	80006e8 <HAL_GetTick>
 80010ee:	1b80      	subs	r0, r0, r6
 80010f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010f4:	4298      	cmp	r0, r3
 80010f6:	d9f0      	bls.n	80010da <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80010f8:	2003      	movs	r0, #3
 80010fa:	e042      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fc:	4a26      	ldr	r2, [pc, #152]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001104:	d1e0      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e03b      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110a:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001112:	d1d9      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e034      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_RCC_ClockConfig+0x14c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	42ab      	cmp	r3, r5
 8001122:	d907      	bls.n	8001134 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001124:	b2ea      	uxtb	r2, r5
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <HAL_RCC_ClockConfig+0x14c>)
 8001128:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	42ab      	cmp	r3, r5
 8001132:	d12d      	bne.n	8001190 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f013 0f04 	tst.w	r3, #4
 800113a:	d006      	beq.n	800114a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800113c:	4a16      	ldr	r2, [pc, #88]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 800113e:	6893      	ldr	r3, [r2, #8]
 8001140:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8001144:	68e1      	ldr	r1, [r4, #12]
 8001146:	430b      	orrs	r3, r1
 8001148:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	f013 0f08 	tst.w	r3, #8
 8001150:	d007      	beq.n	8001162 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001152:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 8001154:	6893      	ldr	r3, [r2, #8]
 8001156:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800115a:	6921      	ldr	r1, [r4, #16]
 800115c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001160:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001162:	f7ff ff1d 	bl	8000fa0 <HAL_RCC_GetSysClockFreq>
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <HAL_RCC_ClockConfig+0x150>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_RCC_ClockConfig+0x154>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	40d8      	lsrs	r0, r3
 8001174:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_RCC_ClockConfig+0x158>)
 8001176:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_RCC_ClockConfig+0x15c>)
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	f7ff fa68 	bl	8000650 <HAL_InitTick>
  return HAL_OK;
 8001180:	2000      	movs	r0, #0
}
 8001182:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
}
 8001186:	4770      	bx	lr
      return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
 800118a:	e7fa      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e7f8      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001190:	2001      	movs	r0, #1
 8001192:	e7f6      	b.n	8001182 <HAL_RCC_ClockConfig+0x13a>
 8001194:	40023c00 	.word	0x40023c00
 8001198:	40023800 	.word	0x40023800
 800119c:	08001298 	.word	0x08001298
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler>

080011aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler>

080011ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler>

080011ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler>

080011b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler>

080011b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ba:	f7ff fa89 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011be:	bd08      	pop	{r3, pc}

080011c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <SystemInit+0x10>)
 80011c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80011c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d8:	f7ff fff2 	bl	80011c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f000 f819 	bl	8001238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fa09 	bl	800061c <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001218:	080012b8 	.word	0x080012b8
  ldr r2, =_sbss
 800121c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001220:	20000050 	.word	0x20000050

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>

08001226 <memset>:
 8001226:	4402      	add	r2, r0
 8001228:	4603      	mov	r3, r0
 800122a:	4293      	cmp	r3, r2
 800122c:	d100      	bne.n	8001230 <memset+0xa>
 800122e:	4770      	bx	lr
 8001230:	f803 1b01 	strb.w	r1, [r3], #1
 8001234:	e7f9      	b.n	800122a <memset+0x4>
	...

08001238 <__libc_init_array>:
 8001238:	b570      	push	{r4, r5, r6, lr}
 800123a:	4d0d      	ldr	r5, [pc, #52]	@ (8001270 <__libc_init_array+0x38>)
 800123c:	4c0d      	ldr	r4, [pc, #52]	@ (8001274 <__libc_init_array+0x3c>)
 800123e:	1b64      	subs	r4, r4, r5
 8001240:	10a4      	asrs	r4, r4, #2
 8001242:	2600      	movs	r6, #0
 8001244:	42a6      	cmp	r6, r4
 8001246:	d109      	bne.n	800125c <__libc_init_array+0x24>
 8001248:	4d0b      	ldr	r5, [pc, #44]	@ (8001278 <__libc_init_array+0x40>)
 800124a:	4c0c      	ldr	r4, [pc, #48]	@ (800127c <__libc_init_array+0x44>)
 800124c:	f000 f818 	bl	8001280 <_init>
 8001250:	1b64      	subs	r4, r4, r5
 8001252:	10a4      	asrs	r4, r4, #2
 8001254:	2600      	movs	r6, #0
 8001256:	42a6      	cmp	r6, r4
 8001258:	d105      	bne.n	8001266 <__libc_init_array+0x2e>
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001260:	4798      	blx	r3
 8001262:	3601      	adds	r6, #1
 8001264:	e7ee      	b.n	8001244 <__libc_init_array+0xc>
 8001266:	f855 3b04 	ldr.w	r3, [r5], #4
 800126a:	4798      	blx	r3
 800126c:	3601      	adds	r6, #1
 800126e:	e7f2      	b.n	8001256 <__libc_init_array+0x1e>
 8001270:	080012b0 	.word	0x080012b0
 8001274:	080012b0 	.word	0x080012b0
 8001278:	080012b0 	.word	0x080012b0
 800127c:	080012b4 	.word	0x080012b4

08001280 <_init>:
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	bf00      	nop
 8001284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001286:	bc08      	pop	{r3}
 8001288:	469e      	mov	lr, r3
 800128a:	4770      	bx	lr

0800128c <_fini>:
 800128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128e:	bf00      	nop
 8001290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001292:	bc08      	pop	{r3}
 8001294:	469e      	mov	lr, r3
 8001296:	4770      	bx	lr


build/debug/led2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800535c  0800535c  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005364  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000707c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000707c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000707c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001995a  00000000  00000000  000070ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c0f  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001108  00000000  00000000  00024658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d0a  00000000  00000000  00025760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001481b  00000000  00000000  0002646a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005769  00000000  00000000  0003ac85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003330  00000000  00000000  000403f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000b2ce  00000000  00000000  00043720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0004e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005320 	.word	0x08005320

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08005320 	.word	0x08005320

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f8:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	2400      	movs	r4, #0
 80004fc:	9407      	str	r4, [sp, #28]
 80004fe:	9408      	str	r4, [sp, #32]
 8000500:	9409      	str	r4, [sp, #36]	@ 0x24
 8000502:	940a      	str	r4, [sp, #40]	@ 0x28
 8000504:	940b      	str	r4, [sp, #44]	@ 0x2c
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000506:	9401      	str	r4, [sp, #4]
 8000508:	4b56      	ldr	r3, [pc, #344]	@ (8000664 <MX_GPIO_Init+0x170>)
 800050a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800050c:	f042 0210 	orr.w	r2, r2, #16
 8000510:	631a      	str	r2, [r3, #48]	@ 0x30
 8000512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000514:	f002 0210 	and.w	r2, r2, #16
 8000518:	9201      	str	r2, [sp, #4]
 800051a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	9402      	str	r4, [sp, #8]
 800051e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000520:	f042 0204 	orr.w	r2, r2, #4
 8000524:	631a      	str	r2, [r3, #48]	@ 0x30
 8000526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000528:	f002 0204 	and.w	r2, r2, #4
 800052c:	9202      	str	r2, [sp, #8]
 800052e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000530:	9403      	str	r4, [sp, #12]
 8000532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000534:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000538:	631a      	str	r2, [r3, #48]	@ 0x30
 800053a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800053c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000540:	9203      	str	r2, [sp, #12]
 8000542:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	9404      	str	r4, [sp, #16]
 8000546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000548:	f042 0201 	orr.w	r2, r2, #1
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
 800054e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000550:	f002 0201 	and.w	r2, r2, #1
 8000554:	9204      	str	r2, [sp, #16]
 8000556:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	9405      	str	r4, [sp, #20]
 800055a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800055c:	f042 0202 	orr.w	r2, r2, #2
 8000560:	631a      	str	r2, [r3, #48]	@ 0x30
 8000562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000564:	f002 0202 	and.w	r2, r2, #2
 8000568:	9205      	str	r2, [sp, #20]
 800056a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056c:	9406      	str	r4, [sp, #24]
 800056e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000570:	f042 0208 	orr.w	r2, r2, #8
 8000574:	631a      	str	r2, [r3, #48]	@ 0x30
 8000576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	9306      	str	r3, [sp, #24]
 800057e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000580:	4e39      	ldr	r6, [pc, #228]	@ (8000668 <MX_GPIO_Init+0x174>)
 8000582:	4622      	mov	r2, r4
 8000584:	2108      	movs	r1, #8
 8000586:	4630      	mov	r0, r6
 8000588:	f000 fb1a 	bl	8000bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800058c:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8000670 <MX_GPIO_Init+0x17c>
 8000590:	2201      	movs	r2, #1
 8000592:	4611      	mov	r1, r2
 8000594:	4648      	mov	r0, r9
 8000596:	f000 fb13 	bl	8000bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800059a:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8000674 <MX_GPIO_Init+0x180>
 800059e:	4622      	mov	r2, r4
 80005a0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80005a4:	4640      	mov	r0, r8
 80005a6:	f000 fb0b 	bl	8000bc0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005aa:	2708      	movs	r7, #8
 80005ac:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2501      	movs	r5, #1
 80005b0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005b6:	a907      	add	r1, sp, #28
 80005b8:	4630      	mov	r0, r6
 80005ba:	f000 fa0b 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005be:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c6:	a907      	add	r1, sp, #28
 80005c8:	4648      	mov	r0, r9
 80005ca:	f000 fa03 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2702      	movs	r7, #2
 80005d2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005d8:	f04f 0a05 	mov.w	sl, #5
 80005dc:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e0:	a907      	add	r1, sp, #28
 80005e2:	4648      	mov	r0, r9
 80005e4:	f000 f9f6 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005e8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	f44f 1990 	mov.w	r9, #1179648	@ 0x120000
 80005ee:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	a907      	add	r1, sp, #28
 80005f6:	481d      	ldr	r0, [pc, #116]	@ (800066c <MX_GPIO_Init+0x178>)
 80005f8:	f000 f9ec 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80005fc:	2304      	movs	r3, #4
 80005fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000604:	f8df b070 	ldr.w	fp, [pc, #112]	@ 8000678 <MX_GPIO_Init+0x184>
 8000608:	a907      	add	r1, sp, #28
 800060a:	4658      	mov	r0, fp
 800060c:	f000 f9e2 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000614:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000616:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800061c:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000620:	a907      	add	r1, sp, #28
 8000622:	4658      	mov	r0, fp
 8000624:	f000 f9d6 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000628:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800062c:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000634:	a907      	add	r1, sp, #28
 8000636:	4640      	mov	r0, r8
 8000638:	f000 f9cc 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800063c:	2320      	movs	r3, #32
 800063e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000644:	a907      	add	r1, sp, #28
 8000646:	4640      	mov	r0, r8
 8000648:	f000 f9c4 	bl	80009d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800064c:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800064e:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000654:	a907      	add	r1, sp, #28
 8000656:	4630      	mov	r0, r6
 8000658:	f000 f9bc 	bl	80009d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800065c:	b00d      	add	sp, #52	@ 0x34
 800065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40021000 	.word	0x40021000
 800066c:	40020000 	.word	0x40020000
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40020400 	.word	0x40020400

0800067c <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067e:	e7fe      	b.n	800067e <Error_Handler+0x2>

08000680 <MX_I2C1_Init>:
{
 8000680:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000682:	480a      	ldr	r0, [pc, #40]	@ (80006ac <MX_I2C1_Init+0x2c>)
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x30>)
 8000686:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000688:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <MX_I2C1_Init+0x34>)
 800068a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	2300      	movs	r3, #0
 800068e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000690:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000696:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800069a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	f001 fb08 	bl	8001cb4 <HAL_I2C_Init>
 80006a4:	b900      	cbnz	r0, 80006a8 <MX_I2C1_Init+0x28>
}
 80006a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006a8:	f7ff ffe8 	bl	800067c <Error_Handler>
 80006ac:	20000138 	.word	0x20000138
 80006b0:	40005400 	.word	0x40005400
 80006b4:	000186a0 	.word	0x000186a0

080006b8 <MX_I2S3_Init>:
{
 80006b8:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 80006ba:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <MX_I2S3_Init+0x2c>)
 80006bc:	4b0a      	ldr	r3, [pc, #40]	@ (80006e8 <MX_I2S3_Init+0x30>)
 80006be:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c6:	2300      	movs	r3, #0
 80006c8:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ca:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006cc:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ce:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <MX_I2S3_Init+0x34>)
 80006d0:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006d2:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006d4:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d6:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006d8:	f001 fbca 	bl	8001e70 <HAL_I2S_Init>
 80006dc:	b900      	cbnz	r0, 80006e0 <MX_I2S3_Init+0x28>
}
 80006de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80006e0:	f7ff ffcc 	bl	800067c <Error_Handler>
 80006e4:	200000f0 	.word	0x200000f0
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_SPI1_Init>:
{
 80006f0:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80006f2:	480d      	ldr	r0, [pc, #52]	@ (8000728 <MX_SPI1_Init+0x38>)
 80006f4:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_SPI1_Init+0x3c>)
 80006f6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80006fc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	2300      	movs	r3, #0
 8000700:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000702:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000704:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000706:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000714:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	230a      	movs	r3, #10
 8000718:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071a:	f002 fba7 	bl	8002e6c <HAL_SPI_Init>
 800071e:	b900      	cbnz	r0, 8000722 <MX_SPI1_Init+0x32>
}
 8000720:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000722:	f7ff ffab 	bl	800067c <Error_Handler>
 8000726:	bf00      	nop
 8000728:	20000098 	.word	0x20000098
 800072c:	40013000 	.word	0x40013000

08000730 <SystemClock_Config>:
{
 8000730:	b500      	push	{lr}
 8000732:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000734:	2230      	movs	r2, #48	@ 0x30
 8000736:	2100      	movs	r1, #0
 8000738:	a808      	add	r0, sp, #32
 800073a:	f004 fd63 	bl	8005204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	2300      	movs	r3, #0
 8000740:	9303      	str	r3, [sp, #12]
 8000742:	9304      	str	r3, [sp, #16]
 8000744:	9305      	str	r3, [sp, #20]
 8000746:	9306      	str	r3, [sp, #24]
 8000748:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemClock_Config+0xa4>)
 800074e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000750:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000754:	6411      	str	r1, [r2, #64]	@ 0x40
 8000756:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000758:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <SystemClock_Config+0xa8>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000772:	9302      	str	r3, [sp, #8]
 8000774:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000776:	2301      	movs	r3, #1
 8000778:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800077e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000788:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800078a:	2208      	movs	r2, #8
 800078c:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078e:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000792:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000796:	2307      	movs	r3, #7
 8000798:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	a808      	add	r0, sp, #32
 800079c:	f001 ff54 	bl	8002648 <HAL_RCC_OscConfig>
 80007a0:	b998      	cbnz	r0, 80007ca <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007b2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	2105      	movs	r1, #5
 80007bc:	a803      	add	r0, sp, #12
 80007be:	f002 f9ad 	bl	8002b1c <HAL_RCC_ClockConfig>
 80007c2:	b920      	cbnz	r0, 80007ce <SystemClock_Config+0x9e>
}
 80007c4:	b015      	add	sp, #84	@ 0x54
 80007c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80007ca:	f7ff ff57 	bl	800067c <Error_Handler>
    Error_Handler();
 80007ce:	f7ff ff55 	bl	800067c <Error_Handler>
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <main>:
{
 80007dc:	b508      	push	{r3, lr}
  HAL_Init();
 80007de:	f000 f83d 	bl	800085c <HAL_Init>
  SystemClock_Config();
 80007e2:	f7ff ffa5 	bl	8000730 <SystemClock_Config>
  MX_GPIO_Init();
 80007e6:	f7ff fe85 	bl	80004f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ea:	f7ff ff49 	bl	8000680 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007ee:	f7ff ff63 	bl	80006b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007f2:	f7ff ff7d 	bl	80006f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007f6:	f003 f8fd 	bl	80039f4 <MX_USB_HOST_Init>
    MX_USB_HOST_Process();
 80007fa:	f003 f91b 	bl	8003a34 <MX_USB_HOST_Process>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000804:	4801      	ldr	r0, [pc, #4]	@ (800080c <main+0x30>)
 8000806:	f000 f9db 	bl	8000bc0 <HAL_GPIO_WritePin>
  while (1)
 800080a:	e7f6      	b.n	80007fa <main+0x1e>
 800080c:	40020c00 	.word	0x40020c00

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b510      	push	{r4, lr}
 8000812:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <HAL_InitTick+0x40>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <HAL_InitTick+0x44>)
 8000822:	6810      	ldr	r0, [r2, #0]
 8000824:	fbb0 f0f3 	udiv	r0, r0, r3
 8000828:	f000 f8c0 	bl	80009ac <HAL_SYSTICK_Config>
 800082c:	b968      	cbnz	r0, 800084a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	2c0f      	cmp	r4, #15
 8000830:	d901      	bls.n	8000836 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	e00a      	b.n	800084c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000836:	2200      	movs	r2, #0
 8000838:	4621      	mov	r1, r4
 800083a:	f04f 30ff 	mov.w	r0, #4294967295
 800083e:	f000 f8a1 	bl	8000984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000842:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_InitTick+0x48>)
 8000844:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000846:	2000      	movs	r0, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800084a:	2001      	movs	r0, #1
}
 800084c:	bd10      	pop	{r4, pc}
 800084e:	bf00      	nop
 8000850:	20000000 	.word	0x20000000
 8000854:	20000008 	.word	0x20000008
 8000858:	20000004 	.word	0x20000004

0800085c <HAL_Init>:
{
 800085c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_Init+0x30>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000866:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800086e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000876:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f871 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff ffc6 	bl	8000810 <HAL_InitTick>
  HAL_MspInit();
 8000884:	f001 fdf2 	bl	800246c <HAL_MspInit>
}
 8000888:	2000      	movs	r0, #0
 800088a:	bd08      	pop	{r3, pc}
 800088c:	40023c00 	.word	0x40023c00

08000890 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000890:	4a03      	ldr	r2, [pc, #12]	@ (80008a0 <HAL_IncTick+0x10>)
 8000892:	6811      	ldr	r1, [r2, #0]
 8000894:	4b03      	ldr	r3, [pc, #12]	@ (80008a4 <HAL_IncTick+0x14>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	440b      	add	r3, r1
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000018c 	.word	0x2000018c
 80008a4:	20000000 	.word	0x20000000

080008a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008a8:	4b01      	ldr	r3, [pc, #4]	@ (80008b0 <HAL_GetTick+0x8>)
 80008aa:	6818      	ldr	r0, [r3, #0]
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	2000018c 	.word	0x2000018c

080008b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff6 	bl	80008a8 <HAL_GetTick>
 80008bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008be:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008c2:	d002      	beq.n	80008ca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <HAL_Delay+0x24>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ca:	f7ff ffed 	bl	80008a8 <HAL_GetTick>
 80008ce:	1b40      	subs	r0, r0, r5
 80008d0:	42a0      	cmp	r0, r4
 80008d2:	d3fa      	bcc.n	80008ca <HAL_Delay+0x16>
  {
  }
}
 80008d4:	bd38      	pop	{r3, r4, r5, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000

080008dc <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80008dc:	2800      	cmp	r0, #0
 80008de:	db07      	blt.n	80008f0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e0:	f000 021f 	and.w	r2, r0, #31
 80008e4:	0940      	lsrs	r0, r0, #5
 80008e6:	2301      	movs	r3, #1
 80008e8:	4093      	lsls	r3, r2
 80008ea:	4a02      	ldr	r2, [pc, #8]	@ (80008f4 <__NVIC_EnableIRQ+0x18>)
 80008ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80008f8:	2800      	cmp	r0, #0
 80008fa:	db08      	blt.n	800090e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fc:	0109      	lsls	r1, r1, #4
 80008fe:	b2c9      	uxtb	r1, r1
 8000900:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000904:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000908:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800090c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090e:	f000 000f 	and.w	r0, r0, #15
 8000912:	0109      	lsls	r1, r1, #4
 8000914:	b2c9      	uxtb	r1, r1
 8000916:	4b01      	ldr	r3, [pc, #4]	@ (800091c <__NVIC_SetPriority+0x24>)
 8000918:	5419      	strb	r1, [r3, r0]
  }
}
 800091a:	4770      	bx	lr
 800091c:	e000ed14 	.word	0xe000ed14

08000920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000922:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000926:	f1c0 0c07 	rsb	ip, r0, #7
 800092a:	f1bc 0f04 	cmp.w	ip, #4
 800092e:	bf28      	it	cs
 8000930:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000934:	1d03      	adds	r3, r0, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d90f      	bls.n	800095a <NVIC_EncodePriority+0x3a>
 800093a:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	f04f 3eff 	mov.w	lr, #4294967295
 8000940:	fa0e f00c 	lsl.w	r0, lr, ip
 8000944:	ea21 0100 	bic.w	r1, r1, r0
 8000948:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094a:	fa0e fe03 	lsl.w	lr, lr, r3
 800094e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000952:	ea41 0002 	orr.w	r0, r1, r2
 8000956:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800095a:	2300      	movs	r3, #0
 800095c:	e7ee      	b.n	800093c <NVIC_EncodePriority+0x1c>
	...

08000960 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000962:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000964:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000968:	041b      	lsls	r3, r3, #16
 800096a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800096c:	0200      	lsls	r0, r0, #8
 800096e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000972:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800097c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000984:	b510      	push	{r4, lr}
 8000986:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_NVIC_SetPriority+0x1c>)
 800098a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000990:	f7ff ffc6 	bl	8000920 <NVIC_EncodePriority>
 8000994:	4601      	mov	r1, r0
 8000996:	4620      	mov	r0, r4
 8000998:	f7ff ffae 	bl	80008f8 <__NVIC_SetPriority>
}
 800099c:	bd10      	pop	{r4, pc}
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a6:	f7ff ff99 	bl	80008dc <__NVIC_EnableIRQ>
}
 80009aa:	bd08      	pop	{r3, pc}

080009ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	3801      	subs	r0, #1
 80009ae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009b2:	d20b      	bcs.n	80009cc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80009b8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <HAL_SYSTICK_Config+0x24>)
 80009bc:	21f0      	movs	r1, #240	@ 0xf0
 80009be:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c2:	2000      	movs	r0, #0
 80009c4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	2207      	movs	r2, #7
 80009c8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009cc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	f200 80e9 	bhi.w	8000bae <HAL_GPIO_Init+0x1da>
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	e065      	b.n	8000aae <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009e2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009e4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80009e8:	2403      	movs	r4, #3
 80009ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80009ee:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009f2:	68cc      	ldr	r4, [r1, #12]
 80009f4:	fa04 f40e 	lsl.w	r4, r4, lr
 80009f8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80009fa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009fc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a02:	684a      	ldr	r2, [r1, #4]
 8000a04:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000a0c:	6042      	str	r2, [r0, #4]
 8000a0e:	e05c      	b.n	8000aca <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a10:	08dc      	lsrs	r4, r3, #3
 8000a12:	3408      	adds	r4, #8
 8000a14:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a18:	f003 0507 	and.w	r5, r3, #7
 8000a1c:	00ad      	lsls	r5, r5, #2
 8000a1e:	f04f 0e0f 	mov.w	lr, #15
 8000a22:	fa0e fe05 	lsl.w	lr, lr, r5
 8000a26:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a2a:	690a      	ldr	r2, [r1, #16]
 8000a2c:	40aa      	lsls	r2, r5
 8000a2e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a32:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8000a36:	e05c      	b.n	8000af2 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a38:	2207      	movs	r2, #7
 8000a3a:	e000      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000a42:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a44:	3402      	adds	r4, #2
 8000a46:	4d5a      	ldr	r5, [pc, #360]	@ (8000bb0 <HAL_GPIO_Init+0x1dc>)
 8000a48:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a4c:	4a59      	ldr	r2, [pc, #356]	@ (8000bb4 <HAL_GPIO_Init+0x1e0>)
 8000a4e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	ea6f 020c 	mvn.w	r2, ip
 8000a54:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a58:	684e      	ldr	r6, [r1, #4]
 8000a5a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8000a5e:	d001      	beq.n	8000a64 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000a60:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000a64:	4c53      	ldr	r4, [pc, #332]	@ (8000bb4 <HAL_GPIO_Init+0x1e0>)
 8000a66:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000a68:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a6a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a6e:	684e      	ldr	r6, [r1, #4]
 8000a70:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000a74:	d001      	beq.n	8000a7a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000a76:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000a7a:	4c4e      	ldr	r4, [pc, #312]	@ (8000bb4 <HAL_GPIO_Init+0x1e0>)
 8000a7c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000a7e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a80:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a84:	684e      	ldr	r6, [r1, #4]
 8000a86:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8000a8a:	d001      	beq.n	8000a90 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000a8c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000a90:	4c48      	ldr	r4, [pc, #288]	@ (8000bb4 <HAL_GPIO_Init+0x1e0>)
 8000a92:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a94:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a96:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a98:	684d      	ldr	r5, [r1, #4]
 8000a9a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8000a9e:	d001      	beq.n	8000aa4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000aa0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000aa4:	4c43      	ldr	r4, [pc, #268]	@ (8000bb4 <HAL_GPIO_Init+0x1e0>)
 8000aa6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d87d      	bhi.n	8000baa <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab2:	680c      	ldr	r4, [r1, #0]
 8000ab4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000ab8:	ea32 0404 	bics.w	r4, r2, r4
 8000abc:	d1f4      	bne.n	8000aa8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000abe:	684c      	ldr	r4, [r1, #4]
 8000ac0:	f004 0403 	and.w	r4, r4, #3
 8000ac4:	3c01      	subs	r4, #1
 8000ac6:	2c01      	cmp	r4, #1
 8000ac8:	d98b      	bls.n	80009e2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aca:	684a      	ldr	r2, [r1, #4]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	2a03      	cmp	r2, #3
 8000ad2:	d009      	beq.n	8000ae8 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000ad4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ad6:	005d      	lsls	r5, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	40aa      	lsls	r2, r5
 8000adc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae0:	688a      	ldr	r2, [r1, #8]
 8000ae2:	40aa      	lsls	r2, r5
 8000ae4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000ae6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ae8:	684a      	ldr	r2, [r1, #4]
 8000aea:	f002 0203 	and.w	r2, r2, #3
 8000aee:	2a02      	cmp	r2, #2
 8000af0:	d08e      	beq.n	8000a10 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000af2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000af4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000af8:	2203      	movs	r2, #3
 8000afa:	fa02 f20e 	lsl.w	r2, r2, lr
 8000afe:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b02:	684a      	ldr	r2, [r1, #4]
 8000b04:	f002 0203 	and.w	r2, r2, #3
 8000b08:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b0c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000b0e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b10:	684a      	ldr	r2, [r1, #4]
 8000b12:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8000b16:	d0c7      	beq.n	8000aa8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	2200      	movs	r2, #0
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <HAL_GPIO_Init+0x1e4>)
 8000b1e:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8000b20:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8000b24:	6454      	str	r4, [r2, #68]	@ 0x44
 8000b26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000b28:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000b2c:	9201      	str	r2, [sp, #4]
 8000b2e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b30:	089c      	lsrs	r4, r3, #2
 8000b32:	1ca5      	adds	r5, r4, #2
 8000b34:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <HAL_GPIO_Init+0x1dc>)
 8000b36:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b3a:	f003 0e03 	and.w	lr, r3, #3
 8000b3e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000b42:	220f      	movs	r2, #15
 8000b44:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b48:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <HAL_GPIO_Init+0x1e8>)
 8000b4e:	4290      	cmp	r0, r2
 8000b50:	f43f af74 	beq.w	8000a3c <HAL_GPIO_Init+0x68>
 8000b54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	d01a      	beq.n	8000b92 <HAL_GPIO_Init+0x1be>
 8000b5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b60:	4290      	cmp	r0, r2
 8000b62:	d018      	beq.n	8000b96 <HAL_GPIO_Init+0x1c2>
 8000b64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b68:	4290      	cmp	r0, r2
 8000b6a:	d016      	beq.n	8000b9a <HAL_GPIO_Init+0x1c6>
 8000b6c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b70:	4290      	cmp	r0, r2
 8000b72:	d014      	beq.n	8000b9e <HAL_GPIO_Init+0x1ca>
 8000b74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d012      	beq.n	8000ba2 <HAL_GPIO_Init+0x1ce>
 8000b7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b80:	4290      	cmp	r0, r2
 8000b82:	d010      	beq.n	8000ba6 <HAL_GPIO_Init+0x1d2>
 8000b84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000b88:	4290      	cmp	r0, r2
 8000b8a:	f43f af55 	beq.w	8000a38 <HAL_GPIO_Init+0x64>
 8000b8e:	2208      	movs	r2, #8
 8000b90:	e755      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000b92:	2201      	movs	r2, #1
 8000b94:	e753      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000b96:	2202      	movs	r2, #2
 8000b98:	e751      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	e74f      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	e74d      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	e74b      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
 8000ba6:	2206      	movs	r2, #6
 8000ba8:	e749      	b.n	8000a3e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000baa:	b002      	add	sp, #8
 8000bac:	bd70      	pop	{r4, r5, r6, pc}
 8000bae:	4770      	bx	lr
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40013c00 	.word	0x40013c00
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc0:	b10a      	cbz	r2, 8000bc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bc2:	6181      	str	r1, [r0, #24]
 8000bc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	0409      	lsls	r1, r1, #16
 8000bc8:	6181      	str	r1, [r0, #24]
  }
}
 8000bca:	4770      	bx	lr

08000bcc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000bce:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8000bd0:	6a34      	ldr	r4, [r6, #32]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8000bd2:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8000bd6:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000bda:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d000      	beq.n	8000be4 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8000be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be4:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8000be6:	2c00      	cmp	r4, #0
 8000be8:	d0fb      	beq.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
 8000bea:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8000bee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000bf2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d0f4      	beq.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8000bf8:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8000bfc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c02:	4422      	add	r2, r4
 8000c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d907      	bls.n	8000c1a <HCD_RXQLVL_IRQHandler+0x4e>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8000c0a:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8000c0e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 8000c12:	2304      	movs	r3, #4
 8000c14:	f885 304c 	strb.w	r3, [r5, #76]	@ 0x4c
}
 8000c18:	e7e3      	b.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8000c1a:	4622      	mov	r2, r4
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f002 fa79 	bl	8003114 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8000c22:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8000c26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c2c:	4422      	add	r2, r4
 8000c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
          hhcd->hc[chnum].xfer_count += pktcnt;
 8000c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c32:	4422      	add	r2, r4
 8000c34:	639a      	str	r2, [r3, #56]	@ 0x38
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8000c36:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 8000c3a:	f8d6 2510 	ldr.w	r2, [r6, #1296]	@ 0x510
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8000c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000c40:	42a3      	cmp	r3, r4
 8000c42:	d1ce      	bne.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HCD_RXQLVL_IRQHandler+0xa8>)
 8000c46:	4013      	ands	r3, r2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0ca      	beq.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8000c4c:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8000c58:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
            hhcd->hc[chnum].toggle_in ^= 1U;
 8000c5c:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
 8000c60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000c64:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8000c68:	f082 0201 	eor.w	r2, r2, #1
 8000c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000c70:	e7b7      	b.n	8000be2 <HCD_RXQLVL_IRQHandler+0x16>
 8000c72:	bf00      	nop
 8000c74:	1ff80000 	.word	0x1ff80000

08000c78 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8000c78:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d00b      	beq.n	8000c98 <HAL_HCD_HC_Halt+0x20>
{
 8000c80:	b510      	push	{r4, lr}
 8000c82:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000c84:	2301      	movs	r3, #1
 8000c86:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8000c8a:	6800      	ldr	r0, [r0, #0]
 8000c8c:	f002 fc39 	bl	8003502 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8000c96:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000c98:	2002      	movs	r0, #2
}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_HCD_Init>:
  if (hhcd == NULL)
 8000c9c:	2800      	cmp	r0, #0
 8000c9e:	d042      	beq.n	8000d26 <HAL_HCD_Init+0x8a>
{
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 8000ca6:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000ca8:	f890 33d5 	ldrb.w	r3, [r0, #981]	@ 0x3d5
 8000cac:	b1bb      	cbz	r3, 8000cde <HAL_HCD_Init+0x42>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  if (USBx == USB_OTG_FS)
 8000cb4:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
 8000cb8:	d016      	beq.n	8000ce8 <HAL_HCD_Init+0x4c>
  __HAL_HCD_DISABLE(hhcd);
 8000cba:	6820      	ldr	r0, [r4, #0]
 8000cbc:	f002 f9c5 	bl	800304a <USB_DisableGlobalInt>
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000cc0:	7c23      	ldrb	r3, [r4, #16]
 8000cc2:	f88d 3000 	strb.w	r3, [sp]
 8000cc6:	1d23      	adds	r3, r4, #4
 8000cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	f002 f96e 	bl	8002fac <USB_CoreInit>
 8000cd0:	b168      	cbz	r0, 8000cee <HAL_HCD_Init+0x52>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8000cd8:	2001      	movs	r0, #1
}
 8000cda:	b003      	add	sp, #12
 8000cdc:	bd30      	pop	{r4, r5, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8000cde:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
    HAL_HCD_MspInit(hhcd);
 8000ce2:	f003 f8a9 	bl	8003e38 <HAL_HCD_MspInit>
 8000ce6:	e7e2      	b.n	8000cae <HAL_HCD_Init+0x12>
    hhcd->Init.dma_enable = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	71a3      	strb	r3, [r4, #6]
 8000cec:	e7e5      	b.n	8000cba <HAL_HCD_Init+0x1e>
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	6820      	ldr	r0, [r4, #0]
 8000cf2:	f002 fa43 	bl	800317c <USB_SetCurrentMode>
 8000cf6:	b120      	cbz	r0, 8000d02 <HAL_HCD_Init+0x66>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8000cfe:	2001      	movs	r0, #1
 8000d00:	e7eb      	b.n	8000cda <HAL_HCD_Init+0x3e>
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8000d02:	7c23      	ldrb	r3, [r4, #16]
 8000d04:	f88d 3000 	strb.w	r3, [sp]
 8000d08:	1d23      	adds	r3, r4, #4
 8000d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	f002 fa67 	bl	80031e0 <USB_HostInit>
 8000d12:	b918      	cbnz	r0, 8000d1c <HAL_HCD_Init+0x80>
  hhcd->State = HAL_HCD_STATE_READY;
 8000d14:	2301      	movs	r3, #1
 8000d16:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  return HAL_OK;
 8000d1a:	e7de      	b.n	8000cda <HAL_HCD_Init+0x3e>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8000d22:	2001      	movs	r0, #1
 8000d24:	e7d9      	b.n	8000cda <HAL_HCD_Init+0x3e>
    return HAL_ERROR;
 8000d26:	2001      	movs	r0, #1
}
 8000d28:	4770      	bx	lr

08000d2a <HAL_HCD_HC_SubmitRequest>:
{
 8000d2a:	b538      	push	{r3, r4, r5, lr}
 8000d2c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8000d30:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d34:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8000d38:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d3c:	f88c 2017 	strb.w	r2, [ip, #23]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000d40:	f88c 3026 	strb.w	r3, [ip, #38]	@ 0x26
  if (token == 0U)
 8000d44:	b994      	cbnz	r4, 8000d6c <HAL_HCD_HC_SubmitRequest+0x42>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000d46:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8000d4a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d4e:	f04f 0e03 	mov.w	lr, #3
 8000d52:	f88c e02a 	strb.w	lr, [ip, #42]	@ 0x2a
    hhcd->hc[ch_num].do_ping = do_ping;
 8000d56:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8000d5a:	f88c e019 	strb.w	lr, [ip, #25]
  switch (ep_type)
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	f200 80b1 	bhi.w	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
 8000d64:	e8df f003 	tbb	[pc, r3]
 8000d68:	7a4ca80b 	.word	0x7a4ca80b
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000d6c:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
 8000d70:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8000d74:	f04f 0e02 	mov.w	lr, #2
 8000d78:	f88c e02a 	strb.w	lr, [ip, #42]	@ 0x2a
 8000d7c:	e7ef      	b.n	8000d5e <HAL_HCD_HC_SubmitRequest+0x34>
      if (token == 1U) /* send data */
 8000d7e:	2c01      	cmp	r4, #1
 8000d80:	f040 80a1 	bne.w	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (direction == 0U)
 8000d84:	b9f2      	cbnz	r2, 8000dc4 <HAL_HCD_HC_SubmitRequest+0x9a>
          if (length == 0U)
 8000d86:	b935      	cbnz	r5, 8000d96 <HAL_HCD_HC_SubmitRequest+0x6c>
            hhcd->hc[ch_num].toggle_out = 1U;
 8000d88:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000d8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000d90:	2201      	movs	r2, #1
 8000d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8000d96:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000d9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000da2:	b93b      	cbnz	r3, 8000db4 <HAL_HCD_HC_SubmitRequest+0x8a>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000da4:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000da8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000db2:	e088      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000db4:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000db8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000dc2:	e080      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8000dc4:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000dc8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dcc:	7e9b      	ldrb	r3, [r3, #26]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d179      	bne.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8000dd2:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000dd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dde:	b93b      	cbnz	r3, 8000df0 <HAL_HCD_HC_SubmitRequest+0xc6>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000de0:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000de4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000dee:	e06a      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000df0:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000df4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000df8:	2202      	movs	r2, #2
 8000dfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000dfe:	e062      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
      if (direction == 0U)
 8000e00:	b9aa      	cbnz	r2, 8000e2e <HAL_HCD_HC_SubmitRequest+0x104>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e02:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e06:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e0e:	b933      	cbnz	r3, 8000e1e <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e10:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e14:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e18:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e1c:	e053      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e1e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e2c:	e04b      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e2e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e32:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e3a:	b93b      	cbnz	r3, 8000e4c <HAL_HCD_HC_SubmitRequest+0x122>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e3c:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e4a:	e03c      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e4c:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e50:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e54:	2202      	movs	r2, #2
 8000e56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e5a:	e034      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
      if (direction == 0U)
 8000e5c:	b9aa      	cbnz	r2, 8000e8a <HAL_HCD_HC_SubmitRequest+0x160>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e5e:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e62:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e6a:	b933      	cbnz	r3, 8000e7a <HAL_HCD_HC_SubmitRequest+0x150>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e6c:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e74:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e78:	e025      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e7a:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e82:	2202      	movs	r2, #2
 8000e84:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000e88:	e01d      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e8a:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e8e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e96:	b93b      	cbnz	r3, 8000ea8 <HAL_HCD_HC_SubmitRequest+0x17e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e98:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000e9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000ea6:	e00e      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ea8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000eac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8000eb6:	e006      	b.n	8000ec6 <HAL_HCD_HC_SubmitRequest+0x19c>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eb8:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000ebc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000ec6:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8000eca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8000ece:	9a05      	ldr	r2, [sp, #20]
 8000ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hhcd->hc[ch_num].xfer_len  = length;
 8000ed2:	635d      	str	r5, [r3, #52]	@ 0x34
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8000edc:	7559      	strb	r1, [r3, #21]
  hhcd->hc[ch_num].state = HC_IDLE;
 8000ede:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000ee2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8000ee6:	0089      	lsls	r1, r1, #2
 8000ee8:	3110      	adds	r1, #16
 8000eea:	4401      	add	r1, r0
 8000eec:	7982      	ldrb	r2, [r0, #6]
 8000eee:	3104      	adds	r1, #4
 8000ef0:	6800      	ldr	r0, [r0, #0]
 8000ef2:	f002 fb97 	bl	8003624 <USB_HC_StartXfer>
}
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}

08000ef8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000ef8:	b530      	push	{r4, r5, lr}
 8000efa:	b083      	sub	sp, #12
 8000efc:	4604      	mov	r4, r0
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000efe:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000f00:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8000f04:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 8000f06:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8000f0a:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000f0c:	9b00      	ldr	r3, [sp, #0]
 8000f0e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8000f12:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000f14:	9b01      	ldr	r3, [sp, #4]
 8000f16:	f013 0f02 	tst.w	r3, #2
 8000f1a:	d007      	beq.n	8000f2c <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	f013 0f01 	tst.w	r3, #1
 8000f22:	d125      	bne.n	8000f70 <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8000f24:	9b00      	ldr	r3, [sp, #0]
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	f013 0f08 	tst.w	r3, #8
 8000f32:	d010      	beq.n	8000f56 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000f34:	9b00      	ldr	r3, [sp, #0]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000f3c:	9b01      	ldr	r3, [sp, #4]
 8000f3e:	f013 0f04 	tst.w	r3, #4
 8000f42:	d02d      	beq.n	8000fa0 <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8000f44:	7a63      	ldrb	r3, [r4, #9]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d015      	beq.n	8000f76 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000f4a:	79e3      	ldrb	r3, [r4, #7]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d022      	beq.n	8000f96 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000f50:	4620      	mov	r0, r4
 8000f52:	f002 ffce 	bl	8003ef2 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	f013 0f20 	tst.w	r3, #32
 8000f5c:	d003      	beq.n	8000f66 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000f5e:	9b00      	ldr	r3, [sp, #0]
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	f8c5 3440 	str.w	r3, [r5, #1088]	@ 0x440
}
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 8000f70:	f002 ffb2 	bl	8003ed8 <HAL_HCD_Connect_Callback>
 8000f74:	e7d6      	b.n	8000f24 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f76:	9b01      	ldr	r3, [sp, #4]
 8000f78:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8000f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8000f80:	d004      	beq.n	8000f8c <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f82:	2101      	movs	r1, #1
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	f002 f9ab 	bl	80032e0 <USB_InitFSLSPClkSel>
 8000f8a:	e7e1      	b.n	8000f50 <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	f002 f9a6 	bl	80032e0 <USB_InitFSLSPClkSel>
 8000f94:	e7dc      	b.n	8000f50 <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8000f96:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000f9a:	f8c5 2404 	str.w	r2, [r5, #1028]	@ 0x404
 8000f9e:	e7d7      	b.n	8000f50 <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f002 ffac 	bl	8003efe <HAL_HCD_PortDisabled_Callback>
 8000fa6:	e7d6      	b.n	8000f56 <HCD_Port_IRQHandler+0x5e>

08000fa8 <HCD_HC_IN_IRQHandler>:
{
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	4605      	mov	r5, r0
 8000fac:	460c      	mov	r4, r1
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000fae:	6806      	ldr	r6, [r0, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	f002 f8d6 	bl	8003162 <USB_ReadChInterrupts>
 8000fb6:	f010 0f04 	tst.w	r0, #4
 8000fba:	d021      	beq.n	8001000 <HCD_HC_IN_IRQHandler+0x58>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000fbc:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 8000fc6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8000fca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000fce:	2207      	movs	r2, #7
 8000fd0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	6828      	ldr	r0, [r5, #0]
 8000fd8:	f002 fa93 	bl	8003502 <USB_HC_Halt>
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8000fdc:	4621      	mov	r1, r4
 8000fde:	6828      	ldr	r0, [r5, #0]
 8000fe0:	f002 f8bf 	bl	8003162 <USB_ReadChInterrupts>
 8000fe4:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8000fe8:	d06c      	beq.n	80010c4 <HCD_HC_IN_IRQHandler+0x11c>
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8000fea:	4621      	mov	r1, r4
 8000fec:	6828      	ldr	r0, [r5, #0]
 8000fee:	f002 fa88 	bl	8003502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000ff2:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8000ff6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ffa:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
}
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001000:	4621      	mov	r1, r4
 8001002:	6828      	ldr	r0, [r5, #0]
 8001004:	f002 f8ad 	bl	8003162 <USB_ReadChInterrupts>
 8001008:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800100c:	d011      	beq.n	8001032 <HCD_HC_IN_IRQHandler+0x8a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800100e:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001016:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_BBLERR;
 800101a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800101e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001022:	2208      	movs	r2, #8
 8001024:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001028:	4621      	mov	r1, r4
 800102a:	6828      	ldr	r0, [r5, #0]
 800102c:	f002 fa69 	bl	8003502 <USB_HC_Halt>
 8001030:	e7d4      	b.n	8000fdc <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001032:	4621      	mov	r1, r4
 8001034:	6828      	ldr	r0, [r5, #0]
 8001036:	f002 f894 	bl	8003162 <USB_ReadChInterrupts>
 800103a:	f010 0f08 	tst.w	r0, #8
 800103e:	d010      	beq.n	8001062 <HCD_HC_IN_IRQHandler+0xba>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001040:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001044:	2208      	movs	r2, #8
 8001046:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_STALL;
 800104a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800104e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001052:	2206      	movs	r2, #6
 8001054:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001058:	4621      	mov	r1, r4
 800105a:	6828      	ldr	r0, [r5, #0]
 800105c:	f002 fa51 	bl	8003502 <USB_HC_Halt>
 8001060:	e7bc      	b.n	8000fdc <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001062:	4621      	mov	r1, r4
 8001064:	6828      	ldr	r0, [r5, #0]
 8001066:	f002 f87c 	bl	8003162 <USB_ReadChInterrupts>
 800106a:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 800106e:	d011      	beq.n	8001094 <HCD_HC_IN_IRQHandler+0xec>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001070:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001074:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001078:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800107c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001080:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001084:	2209      	movs	r2, #9
 8001086:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800108a:	4621      	mov	r1, r4
 800108c:	6828      	ldr	r0, [r5, #0]
 800108e:	f002 fa38 	bl	8003502 <USB_HC_Halt>
 8001092:	e7a3      	b.n	8000fdc <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001094:	4621      	mov	r1, r4
 8001096:	6828      	ldr	r0, [r5, #0]
 8001098:	f002 f863 	bl	8003162 <USB_ReadChInterrupts>
 800109c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80010a0:	d09c      	beq.n	8000fdc <HCD_HC_IN_IRQHandler+0x34>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80010a2:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 80010ac:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80010b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80010b4:	2207      	movs	r2, #7
 80010b6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80010ba:	4621      	mov	r1, r4
 80010bc:	6828      	ldr	r0, [r5, #0]
 80010be:	f002 fa20 	bl	8003502 <USB_HC_Halt>
 80010c2:	e78b      	b.n	8000fdc <HCD_HC_IN_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80010c4:	4621      	mov	r1, r4
 80010c6:	6828      	ldr	r0, [r5, #0]
 80010c8:	f002 f84b 	bl	8003162 <USB_ReadChInterrupts>
 80010cc:	f010 0f01 	tst.w	r0, #1
 80010d0:	d07c      	beq.n	80011cc <HCD_HC_IN_IRQHandler+0x224>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80010d2:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80010d6:	f506 67a0 	add.w	r7, r6, #1280	@ 0x500
 80010da:	2320      	movs	r3, #32
 80010dc:	60bb      	str	r3, [r7, #8]
    if (hhcd->hc[chnum].do_csplit == 1U)
 80010de:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80010e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80010e6:	7edb      	ldrb	r3, [r3, #27]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d01d      	beq.n	8001128 <HCD_HC_IN_IRQHandler+0x180>
    if (hhcd->Init.dma_enable != 0U)
 80010ec:	79ab      	ldrb	r3, [r5, #6]
 80010ee:	b14b      	cbz	r3, 8001104 <HCD_HC_IN_IRQHandler+0x15c>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010f0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80010f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80010f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001100:	1a52      	subs	r2, r2, r1
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
    hhcd->hc[chnum].state = HC_XFRC;
 8001104:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001108:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800110c:	2201      	movs	r2, #1
 800110e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    hhcd->hc[chnum].ErrCnt = 0U;
 8001112:	2100      	movs	r1, #0
 8001114:	6459      	str	r1, [r3, #68]	@ 0x44
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001116:	60ba      	str	r2, [r7, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001118:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800111c:	2b03      	cmp	r3, #3
 800111e:	d814      	bhi.n	800114a <HCD_HC_IN_IRQHandler+0x1a2>
 8001120:	e8df f003 	tbb	[pc, r3]
 8001124:	250d250d 	.word	0x250d250d
      hhcd->hc[chnum].do_csplit = 0U;
 8001128:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800112c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001130:	2200      	movs	r2, #0
 8001132:	76da      	strb	r2, [r3, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	e7d6      	b.n	80010ec <HCD_HC_IN_IRQHandler+0x144>
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800113e:	4621      	mov	r1, r4
 8001140:	6828      	ldr	r0, [r5, #0]
 8001142:	f002 f9de 	bl	8003502 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001146:	2310      	movs	r3, #16
 8001148:	60bb      	str	r3, [r7, #8]
    if (hhcd->Init.dma_enable == 1U)
 800114a:	79ab      	ldrb	r3, [r5, #6]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d020      	beq.n	8001192 <HCD_HC_IN_IRQHandler+0x1ea>
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001150:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001154:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800115c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8001160:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 800116c:	e747      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800116e:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 8001172:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001176:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
      hhcd->hc[chnum].urb_state = URB_DONE;
 800117a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800117e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001182:	2201      	movs	r2, #1
 8001184:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001188:	4621      	mov	r1, r4
 800118a:	4628      	mov	r0, r5
 800118c:	f002 feb0 	bl	8003ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001190:	e7db      	b.n	800114a <HCD_HC_IN_IRQHandler+0x1a2>
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001192:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8001196:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800119a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800119c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800119e:	4413      	add	r3, r2
 80011a0:	3b01      	subs	r3, #1
 80011a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80011a6:	f013 0f01 	tst.w	r3, #1
 80011aa:	f43f af28 	beq.w	8000ffe <HCD_HC_IN_IRQHandler+0x56>
        hhcd->hc[chnum].toggle_in ^= 1U;
 80011ae:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80011b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80011b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011ba:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 80011be:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80011c2:	f083 0301 	eor.w	r3, r3, #1
 80011c6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80011ca:	e718      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80011cc:	4621      	mov	r1, r4
 80011ce:	6828      	ldr	r0, [r5, #0]
 80011d0:	f001 ffc7 	bl	8003162 <USB_ReadChInterrupts>
 80011d4:	f010 0f20 	tst.w	r0, #32
 80011d8:	d01e      	beq.n	8001218 <HCD_HC_IN_IRQHandler+0x270>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80011da:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80011de:	2320      	movs	r3, #32
 80011e0:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_ssplit == 1U)
 80011e4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80011e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80011ec:	7e9b      	ldrb	r3, [r3, #26]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	f47f af05 	bne.w	8000ffe <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].do_csplit = 1U;
 80011f4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80011f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80011fc:	2201      	movs	r2, #1
 80011fe:	76da      	strb	r2, [r3, #27]
      hhcd->hc[chnum].state = HC_ACK;
 8001200:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001204:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001208:	2203      	movs	r2, #3
 800120a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800120e:	4621      	mov	r1, r4
 8001210:	6828      	ldr	r0, [r5, #0]
 8001212:	f002 f976 	bl	8003502 <USB_HC_Halt>
 8001216:	e6f2      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001218:	4621      	mov	r1, r4
 800121a:	6828      	ldr	r0, [r5, #0]
 800121c:	f001 ffa1 	bl	8003162 <USB_ReadChInterrupts>
 8001220:	f010 0f02 	tst.w	r0, #2
 8001224:	f000 8122 	beq.w	800146c <HCD_HC_IN_IRQHandler+0x4c4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001228:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800122c:	f506 62a0 	add.w	r2, r6, #1280	@ 0x500
 8001230:	2302      	movs	r3, #2
 8001232:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8001234:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001238:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800123c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001240:	3b01      	subs	r3, #1
 8001242:	2b08      	cmp	r3, #8
 8001244:	d81e      	bhi.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
 8001246:	a101      	add	r1, pc, #4	@ (adr r1, 800124c <HCD_HC_IN_IRQHandler+0x2a4>)
 8001248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800124c:	08001271 	.word	0x08001271
 8001250:	08000fff 	.word	0x08000fff
 8001254:	080013c9 	.word	0x080013c9
 8001258:	08001421 	.word	0x08001421
 800125c:	08001329 	.word	0x08001329
 8001260:	0800129b 	.word	0x0800129b
 8001264:	080012b1 	.word	0x080012b1
 8001268:	08001451 	.word	0x08001451
 800126c:	080012b1 	.word	0x080012b1
      hhcd->hc[chnum].state = HC_HALTED;
 8001270:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001274:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001278:	2202      	movs	r2, #2
 800127a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_DONE;
 800127e:	2201      	movs	r2, #1
 8001280:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001284:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001288:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800128c:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8001290:	4621      	mov	r1, r4
 8001292:	4628      	mov	r0, r5
 8001294:	f002 fe2c 	bl	8003ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001298:	e6b1      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].state = HC_HALTED;
 800129a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800129e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_STALL;
 80012a8:	2205      	movs	r2, #5
 80012aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80012ae:	e7e9      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 80012b0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80012b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80012b8:	2102      	movs	r1, #2
 80012ba:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 80012be:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80012c0:	3101      	adds	r1, #1
 80012c2:	6459      	str	r1, [r3, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80012c4:	2902      	cmp	r1, #2
 80012c6:	d91a      	bls.n	80012fe <HCD_HC_IN_IRQHandler+0x356>
        hhcd->hc[chnum].ErrCnt = 0U;
 80012c8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80012cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80012d0:	2100      	movs	r1, #0
 80012d2:	6459      	str	r1, [r3, #68]	@ 0x44
        if (hhcd->hc[chnum].do_ssplit == 1U)
 80012d4:	7e9b      	ldrb	r3, [r3, #26]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d007      	beq.n	80012ea <HCD_HC_IN_IRQHandler+0x342>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80012da:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80012de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80012e2:	2204      	movs	r2, #4
 80012e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80012e8:	e7cc      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
          hhcd->hc[chnum].do_csplit = 0U;
 80012ea:	233c      	movs	r3, #60	@ 0x3c
 80012ec:	fb03 5304 	mla	r3, r3, r4, r5
 80012f0:	76d9      	strb	r1, [r3, #27]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80012f2:	7719      	strb	r1, [r3, #28]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80012f4:	6853      	ldr	r3, [r2, #4]
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012fa:	6053      	str	r3, [r2, #4]
 80012fc:	e7ed      	b.n	80012da <HCD_HC_IN_IRQHandler+0x332>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80012fe:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001302:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001306:	2202      	movs	r2, #2
 8001308:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800130c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001310:	b10b      	cbz	r3, 8001316 <HCD_HC_IN_IRQHandler+0x36e>
 8001312:	4293      	cmp	r3, r2
 8001314:	d1b6      	bne.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001316:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800131a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800131e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001322:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 8001326:	e7ad      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8001328:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800132c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001330:	2102      	movs	r1, #2
 8001332:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001336:	7edb      	ldrb	r3, [r3, #27]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d1a3      	bne.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800133c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001340:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001344:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HCD_HC_IN_IRQHandler+0x3d4>
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800134c:	233c      	movs	r3, #60	@ 0x3c
 800134e:	fb03 5304 	mla	r3, r3, r4, r5
 8001352:	2202      	movs	r2, #2
 8001354:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001358:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800135c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001360:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001364:	b10b      	cbz	r3, 800136a <HCD_HC_IN_IRQHandler+0x3c2>
 8001366:	2b02      	cmp	r3, #2
 8001368:	d18c      	bne.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800136a:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800136e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001376:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 800137a:	e783      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
          hhcd->hc[chnum].NyetErrCnt++;
 800137c:	213c      	movs	r1, #60	@ 0x3c
 800137e:	fb01 5104 	mla	r1, r1, r4, r5
 8001382:	6c8b      	ldr	r3, [r1, #72]	@ 0x48
 8001384:	3301      	adds	r3, #1
 8001386:	648b      	str	r3, [r1, #72]	@ 0x48
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001388:	2b02      	cmp	r3, #2
 800138a:	d916      	bls.n	80013ba <HCD_HC_IN_IRQHandler+0x412>
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800138c:	460b      	mov	r3, r1
 800138e:	2100      	movs	r1, #0
 8001390:	6499      	str	r1, [r3, #72]	@ 0x48
            hhcd->hc[chnum].do_csplit = 0U;
 8001392:	76d9      	strb	r1, [r3, #27]
            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	2b02      	cmp	r3, #2
 8001398:	d804      	bhi.n	80013a4 <HCD_HC_IN_IRQHandler+0x3fc>
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800139a:	233c      	movs	r3, #60	@ 0x3c
 800139c:	fb03 5304 	mla	r3, r3, r4, r5
 80013a0:	2101      	movs	r1, #1
 80013a2:	7719      	strb	r1, [r3, #28]
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80013a4:	6853      	ldr	r3, [r2, #4]
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013aa:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80013ac:	233c      	movs	r3, #60	@ 0x3c
 80013ae:	fb03 5304 	mla	r3, r3, r4, r5
 80013b2:	2204      	movs	r2, #4
 80013b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80013b8:	e7ce      	b.n	8001358 <HCD_HC_IN_IRQHandler+0x3b0>
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80013ba:	233c      	movs	r3, #60	@ 0x3c
 80013bc:	fb03 5304 	mla	r3, r3, r4, r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80013c6:	e7c7      	b.n	8001358 <HCD_HC_IN_IRQHandler+0x3b0>
      hhcd->hc[chnum].state = HC_HALTED;
 80013c8:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80013cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013d0:	2102      	movs	r1, #2
 80013d2:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 80013d6:	7edb      	ldrb	r3, [r3, #27]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f47f af53 	bne.w	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80013de:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80013e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013e6:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80013ea:	6851      	ldr	r1, [r2, #4]
 80013ec:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80013f0:	6051      	str	r1, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80013f2:	68d1      	ldr	r1, [r2, #12]
 80013f4:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80013f8:	60d1      	str	r1, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80013fa:	68d1      	ldr	r1, [r2, #12]
 80013fc:	f021 0120 	bic.w	r1, r1, #32
 8001400:	60d1      	str	r1, [r2, #12]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001402:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001406:	b113      	cbz	r3, 800140e <HCD_HC_IN_IRQHandler+0x466>
 8001408:	2b02      	cmp	r3, #2
 800140a:	f47f af3b 	bne.w	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800140e:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001412:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001416:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800141a:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 800141e:	e731      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8001420:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001424:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001428:	2202      	movs	r2, #2
 800142a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800142e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001432:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001436:	b113      	cbz	r3, 800143e <HCD_HC_IN_IRQHandler+0x496>
 8001438:	4293      	cmp	r3, r2
 800143a:	f47f af23 	bne.w	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800143e:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001442:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800144a:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 800144e:	e719      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
      hhcd->hc[chnum].state = HC_HALTED;
 8001450:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001454:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001458:	2202      	movs	r2, #2
 800145a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 800145e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001460:	3201      	adds	r2, #1
 8001462:	645a      	str	r2, [r3, #68]	@ 0x44
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001464:	2204      	movs	r2, #4
 8001466:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 800146a:	e70b      	b.n	8001284 <HCD_HC_IN_IRQHandler+0x2dc>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800146c:	4621      	mov	r1, r4
 800146e:	6828      	ldr	r0, [r5, #0]
 8001470:	f001 fe77 	bl	8003162 <USB_ReadChInterrupts>
 8001474:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001478:	d018      	beq.n	80014ac <HCD_HC_IN_IRQHandler+0x504>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800147a:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 800147e:	2240      	movs	r2, #64	@ 0x40
 8001480:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_NYET;
 8001484:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001488:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800148c:	2205      	movs	r2, #5
 800148e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001492:	7e9b      	ldrb	r3, [r3, #26]
 8001494:	b92b      	cbnz	r3, 80014a2 <HCD_HC_IN_IRQHandler+0x4fa>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001496:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800149a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014a2:	4621      	mov	r1, r4
 80014a4:	6828      	ldr	r0, [r5, #0]
 80014a6:	f002 f82c 	bl	8003502 <USB_HC_Halt>
 80014aa:	e5a8      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80014ac:	4621      	mov	r1, r4
 80014ae:	6828      	ldr	r0, [r5, #0]
 80014b0:	f001 fe57 	bl	8003162 <USB_ReadChInterrupts>
 80014b4:	f010 0f10 	tst.w	r0, #16
 80014b8:	f43f ada1 	beq.w	8000ffe <HCD_HC_IN_IRQHandler+0x56>
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80014bc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80014c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80014c4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d028      	beq.n	800151e <HCD_HC_IN_IRQHandler+0x576>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80014cc:	b10b      	cbz	r3, 80014d2 <HCD_HC_IN_IRQHandler+0x52a>
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d118      	bne.n	8001504 <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[chnum].ErrCnt = 0U;
 80014d2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80014d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	@ 0x44
      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80014de:	79ab      	ldrb	r3, [r5, #6]
 80014e0:	b133      	cbz	r3, 80014f0 <HCD_HC_IN_IRQHandler+0x548>
 80014e2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80014e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80014ea:	7edb      	ldrb	r3, [r3, #27]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d109      	bne.n	8001504 <HCD_HC_IN_IRQHandler+0x55c>
        hhcd->hc[chnum].state = HC_NAK;
 80014f0:	233c      	movs	r3, #60	@ 0x3c
 80014f2:	fb03 5304 	mla	r3, r3, r4, r5
 80014f6:	2204      	movs	r2, #4
 80014f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014fc:	4621      	mov	r1, r4
 80014fe:	6828      	ldr	r0, [r5, #0]
 8001500:	f001 ffff 	bl	8003502 <USB_HC_Halt>
    if (hhcd->hc[chnum].do_csplit == 1U)
 8001504:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001508:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800150c:	7edb      	ldrb	r3, [r3, #27]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d012      	beq.n	8001538 <HCD_HC_IN_IRQHandler+0x590>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001512:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001516:	2210      	movs	r2, #16
 8001518:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  }
 800151c:	e56f      	b.n	8000ffe <HCD_HC_IN_IRQHandler+0x56>
      hhcd->hc[chnum].ErrCnt = 0U;
 800151e:	233c      	movs	r3, #60	@ 0x3c
 8001520:	fb03 5304 	mla	r3, r3, r4, r5
 8001524:	2200      	movs	r2, #0
 8001526:	645a      	str	r2, [r3, #68]	@ 0x44
      hhcd->hc[chnum].state = HC_NAK;
 8001528:	2204      	movs	r2, #4
 800152a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800152e:	4621      	mov	r1, r4
 8001530:	6828      	ldr	r0, [r5, #0]
 8001532:	f001 ffe6 	bl	8003502 <USB_HC_Halt>
 8001536:	e7e5      	b.n	8001504 <HCD_HC_IN_IRQHandler+0x55c>
      hhcd->hc[chnum].do_csplit = 0U;
 8001538:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800153c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001540:	2300      	movs	r3, #0
 8001542:	76eb      	strb	r3, [r5, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001544:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001548:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 800154c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001550:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8001554:	f8d3 250c 	ldr.w	r2, [r3, #1292]	@ 0x50c
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	f8c3 250c 	str.w	r2, [r3, #1292]	@ 0x50c
 8001560:	e7d7      	b.n	8001512 <HCD_HC_IN_IRQHandler+0x56a>
 8001562:	bf00      	nop

08001564 <HCD_HC_OUT_IRQHandler>:
{
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	4605      	mov	r5, r0
 8001568:	460c      	mov	r4, r1
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800156a:	6806      	ldr	r6, [r0, #0]
  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800156c:	4630      	mov	r0, r6
 800156e:	f001 fdf8 	bl	8003162 <USB_ReadChInterrupts>
 8001572:	f010 0f04 	tst.w	r0, #4
 8001576:	d010      	beq.n	800159a <HCD_HC_OUT_IRQHandler+0x36>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001578:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800157c:	2304      	movs	r3, #4
 800157e:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XACTERR;
 8001582:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001586:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800158a:	2207      	movs	r2, #7
 800158c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001590:	4621      	mov	r1, r4
 8001592:	6828      	ldr	r0, [r5, #0]
 8001594:	f001 ffb5 	bl	8003502 <USB_HC_Halt>
}
 8001598:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800159a:	4621      	mov	r1, r4
 800159c:	6828      	ldr	r0, [r5, #0]
 800159e:	f001 fde0 	bl	8003162 <USB_ReadChInterrupts>
 80015a2:	f010 0f20 	tst.w	r0, #32
 80015a6:	d04a      	beq.n	800163e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80015a8:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80015ac:	2320      	movs	r3, #32
 80015ae:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_ping == 1U)
 80015b2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80015ba:	7e5b      	ldrb	r3, [r3, #25]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d02d      	beq.n	800161c <HCD_HC_OUT_IRQHandler+0xb8>
    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80015c0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80015c8:	7e9b      	ldrb	r3, [r3, #26]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d1e4      	bne.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
 80015ce:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015d2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80015d6:	7edb      	ldrb	r3, [r3, #27]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1dd      	bne.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80015dc:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80015e4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d005      	beq.n	80015f8 <HCD_HC_OUT_IRQHandler+0x94>
        hhcd->hc[chnum].do_csplit = 1U;
 80015ec:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80015f4:	2201      	movs	r2, #1
 80015f6:	76da      	strb	r2, [r3, #27]
      hhcd->hc[chnum].state = HC_ACK;
 80015f8:	0126      	lsls	r6, r4, #4
 80015fa:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80015fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001602:	2203      	movs	r2, #3
 8001604:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001608:	4621      	mov	r1, r4
 800160a:	6828      	ldr	r0, [r5, #0]
 800160c:	f001 ff79 	bl	8003502 <USB_HC_Halt>
      hhcd->hc[chnum].ErrCnt = 0U;
 8001610:	1b36      	subs	r6, r6, r4
 8001612:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8001616:	2300      	movs	r3, #0
 8001618:	6473      	str	r3, [r6, #68]	@ 0x44
 800161a:	e7bd      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].do_ping = 0U;
 800161c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001620:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001624:	2200      	movs	r2, #0
 8001626:	765a      	strb	r2, [r3, #25]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001628:	2202      	movs	r2, #2
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      hhcd->hc[chnum].state = HC_ACK;
 800162e:	2203      	movs	r2, #3
 8001630:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001634:	4621      	mov	r1, r4
 8001636:	6828      	ldr	r0, [r5, #0]
 8001638:	f001 ff63 	bl	8003502 <USB_HC_Halt>
 800163c:	e7c0      	b.n	80015c0 <HCD_HC_OUT_IRQHandler+0x5c>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800163e:	4621      	mov	r1, r4
 8001640:	6828      	ldr	r0, [r5, #0]
 8001642:	f001 fd8e 	bl	8003162 <USB_ReadChInterrupts>
 8001646:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800164a:	d00a      	beq.n	8001662 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800164c:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8001650:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001654:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001658:	4621      	mov	r1, r4
 800165a:	6828      	ldr	r0, [r5, #0]
 800165c:	f001 ff51 	bl	8003502 <USB_HC_Halt>
 8001660:	e79a      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001662:	4621      	mov	r1, r4
 8001664:	6828      	ldr	r0, [r5, #0]
 8001666:	f001 fd7c 	bl	8003162 <USB_ReadChInterrupts>
 800166a:	f010 0f01 	tst.w	r0, #1
 800166e:	d03b      	beq.n	80016e8 <HCD_HC_OUT_IRQHandler+0x184>
    hhcd->hc[chnum].ErrCnt = 0U;
 8001670:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001674:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800167c:	4621      	mov	r1, r4
 800167e:	6828      	ldr	r0, [r5, #0]
 8001680:	f001 fd6f 	bl	8003162 <USB_ReadChInterrupts>
 8001684:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8001688:	d00a      	beq.n	80016a0 <HCD_HC_OUT_IRQHandler+0x13c>
      hhcd->hc[chnum].do_ping = 1U;
 800168a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800168e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001692:	2201      	movs	r2, #1
 8001694:	765a      	strb	r2, [r3, #25]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001696:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 800169a:	2240      	movs	r2, #64	@ 0x40
 800169c:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    if (hhcd->hc[chnum].do_csplit != 0U)
 80016a0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80016a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80016a8:	7edb      	ldrb	r3, [r3, #27]
 80016aa:	b16b      	cbz	r3, 80016c8 <HCD_HC_OUT_IRQHandler+0x164>
      hhcd->hc[chnum].do_csplit = 0U;
 80016ac:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80016b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80016b4:	2200      	movs	r2, #0
 80016b6:	76da      	strb	r2, [r3, #27]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80016b8:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80016bc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	@ 0x504
 80016c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80016c4:	f8c3 2504 	str.w	r2, [r3, #1284]	@ 0x504
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80016c8:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 80016cc:	2201      	movs	r2, #1
 80016ce:	f8c6 2508 	str.w	r2, [r6, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_XFRC;
 80016d2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80016d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80016da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80016de:	4621      	mov	r1, r4
 80016e0:	6828      	ldr	r0, [r5, #0]
 80016e2:	f001 ff0e 	bl	8003502 <USB_HC_Halt>
 80016e6:	e757      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80016e8:	4621      	mov	r1, r4
 80016ea:	6828      	ldr	r0, [r5, #0]
 80016ec:	f001 fd39 	bl	8003162 <USB_ReadChInterrupts>
 80016f0:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80016f4:	d01e      	beq.n	8001734 <HCD_HC_OUT_IRQHandler+0x1d0>
    hhcd->hc[chnum].state = HC_NYET;
 80016f6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 80016fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80016fe:	2205      	movs	r2, #5
 8001700:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001704:	7e9b      	ldrb	r3, [r3, #26]
 8001706:	b92b      	cbnz	r3, 8001714 <HCD_HC_OUT_IRQHandler+0x1b0>
      hhcd->hc[chnum].do_ping = 1U;
 8001708:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800170c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001710:	2201      	movs	r2, #1
 8001712:	765a      	strb	r2, [r3, #25]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001714:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001718:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001720:	4621      	mov	r1, r4
 8001722:	6828      	ldr	r0, [r5, #0]
 8001724:	f001 feed 	bl	8003502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001728:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800172c:	2340      	movs	r3, #64	@ 0x40
 800172e:	f8c6 3508 	str.w	r3, [r6, #1288]	@ 0x508
 8001732:	e731      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001734:	4621      	mov	r1, r4
 8001736:	6828      	ldr	r0, [r5, #0]
 8001738:	f001 fd13 	bl	8003162 <USB_ReadChInterrupts>
 800173c:	f010 0f08 	tst.w	r0, #8
 8001740:	d010      	beq.n	8001764 <HCD_HC_OUT_IRQHandler+0x200>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001742:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8001746:	2208      	movs	r2, #8
 8001748:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
    hhcd->hc[chnum].state = HC_STALL;
 800174c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001750:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001754:	2206      	movs	r2, #6
 8001756:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800175a:	4621      	mov	r1, r4
 800175c:	6828      	ldr	r0, [r5, #0]
 800175e:	f001 fed0 	bl	8003502 <USB_HC_Halt>
 8001762:	e719      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001764:	4621      	mov	r1, r4
 8001766:	6828      	ldr	r0, [r5, #0]
 8001768:	f001 fcfb 	bl	8003162 <USB_ReadChInterrupts>
 800176c:	f010 0f10 	tst.w	r0, #16
 8001770:	d020      	beq.n	80017b4 <HCD_HC_OUT_IRQHandler+0x250>
    hhcd->hc[chnum].ErrCnt = 0U;
 8001772:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001776:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	@ 0x44
    hhcd->hc[chnum].state = HC_NAK;
 800177e:	2204      	movs	r2, #4
 8001780:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    if (hhcd->hc[chnum].do_ping == 0U)
 8001784:	7e5b      	ldrb	r3, [r3, #25]
 8001786:	b95b      	cbnz	r3, 80017a0 <HCD_HC_OUT_IRQHandler+0x23c>
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8001788:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800178c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001790:	7e1b      	ldrb	r3, [r3, #24]
 8001792:	b92b      	cbnz	r3, 80017a0 <HCD_HC_OUT_IRQHandler+0x23c>
        hhcd->hc[chnum].do_ping = 1U;
 8001794:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001798:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800179c:	2201      	movs	r2, #1
 800179e:	765a      	strb	r2, [r3, #25]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80017a0:	4621      	mov	r1, r4
 80017a2:	6828      	ldr	r0, [r5, #0]
 80017a4:	f001 fead 	bl	8003502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80017a8:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80017ac:	2210      	movs	r2, #16
 80017ae:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 80017b2:	e6f1      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80017b4:	4621      	mov	r1, r4
 80017b6:	6828      	ldr	r0, [r5, #0]
 80017b8:	f001 fcd3 	bl	8003162 <USB_ReadChInterrupts>
 80017bc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80017c0:	d038      	beq.n	8001834 <HCD_HC_OUT_IRQHandler+0x2d0>
    if (hhcd->Init.dma_enable == 0U)
 80017c2:	79ab      	ldrb	r3, [r5, #6]
 80017c4:	b1f3      	cbz	r3, 8001804 <HCD_HC_OUT_IRQHandler+0x2a0>
      hhcd->hc[chnum].ErrCnt++;
 80017c6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 80017ca:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80017ce:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80017d0:	3301      	adds	r3, #1
 80017d2:	6453      	str	r3, [r2, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d820      	bhi.n	800181a <HCD_HC_OUT_IRQHandler+0x2b6>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80017d8:	233c      	movs	r3, #60	@ 0x3c
 80017da:	fb03 5304 	mla	r3, r3, r4, r5
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80017e4:	eb06 1244 	add.w	r2, r6, r4, lsl #5
 80017e8:	f8d2 3500 	ldr.w	r3, [r2, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80017f4:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80017f8:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 8001802:	e6c9      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].state = HC_XACTERR;
 8001804:	233c      	movs	r3, #60	@ 0x3c
 8001806:	fb03 5304 	mla	r3, r3, r4, r5
 800180a:	2207      	movs	r2, #7
 800180c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001810:	4621      	mov	r1, r4
 8001812:	6828      	ldr	r0, [r5, #0]
 8001814:	f001 fe75 	bl	8003502 <USB_HC_Halt>
 8001818:	e7ee      	b.n	80017f8 <HCD_HC_OUT_IRQHandler+0x294>
        hhcd->hc[chnum].ErrCnt = 0U;
 800181a:	233c      	movs	r3, #60	@ 0x3c
 800181c:	fb03 5304 	mla	r3, r3, r4, r5
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001824:	2204      	movs	r2, #4
 8001826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800182a:	4621      	mov	r1, r4
 800182c:	4628      	mov	r0, r5
 800182e:	f002 fb5f 	bl	8003ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001832:	e7e1      	b.n	80017f8 <HCD_HC_OUT_IRQHandler+0x294>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001834:	4621      	mov	r1, r4
 8001836:	6828      	ldr	r0, [r5, #0]
 8001838:	f001 fc93 	bl	8003162 <USB_ReadChInterrupts>
 800183c:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 8001840:	d010      	beq.n	8001864 <HCD_HC_OUT_IRQHandler+0x300>
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001842:	233c      	movs	r3, #60	@ 0x3c
 8001844:	fb03 5304 	mla	r3, r3, r4, r5
 8001848:	2209      	movs	r2, #9
 800184a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800184e:	4621      	mov	r1, r4
 8001850:	6828      	ldr	r0, [r5, #0]
 8001852:	f001 fe56 	bl	8003502 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001856:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 800185a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800185e:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
 8001862:	e699      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001864:	4621      	mov	r1, r4
 8001866:	6828      	ldr	r0, [r5, #0]
 8001868:	f001 fc7b 	bl	8003162 <USB_ReadChInterrupts>
 800186c:	f010 0f02 	tst.w	r0, #2
 8001870:	f43f ae92 	beq.w	8001598 <HCD_HC_OUT_IRQHandler+0x34>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001874:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 8001878:	f506 62a0 	add.w	r2, r6, #1280	@ 0x500
 800187c:	2302      	movs	r3, #2
 800187e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[chnum].state == HC_XFRC)
 8001880:	233c      	movs	r3, #60	@ 0x3c
 8001882:	fb03 5304 	mla	r3, r3, r4, r5
 8001886:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800188a:	3b01      	subs	r3, #1
 800188c:	2b08      	cmp	r3, #8
 800188e:	f63f ae83 	bhi.w	8001598 <HCD_HC_OUT_IRQHandler+0x34>
 8001892:	a101      	add	r1, pc, #4	@ (adr r1, 8001898 <HCD_HC_OUT_IRQHandler+0x334>)
 8001894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001898:	080018bd 	.word	0x080018bd
 800189c:	08001599 	.word	0x08001599
 80018a0:	0800192b 	.word	0x0800192b
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001973 	.word	0x08001973
 80018ac:	08001997 	.word	0x08001997
 80018b0:	080019ab 	.word	0x080019ab
 80018b4:	08001599 	.word	0x08001599
 80018b8:	080019ab 	.word	0x080019ab
      hhcd->hc[chnum].state = HC_HALTED;
 80018bc:	233c      	movs	r3, #60	@ 0x3c
 80018be:	fb03 5304 	mla	r3, r3, r4, r5
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_DONE;
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80018ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80018d2:	3b02      	subs	r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d853      	bhi.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
        if (hhcd->Init.dma_enable == 0U)
 80018da:	79a9      	ldrb	r1, [r5, #6]
 80018dc:	b941      	cbnz	r1, 80018f0 <HCD_HC_OUT_IRQHandler+0x38c>
          hhcd->hc[chnum].toggle_out ^= 1U;
 80018de:	233c      	movs	r3, #60	@ 0x3c
 80018e0:	fb03 5304 	mla	r3, r3, r4, r5
 80018e4:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80018e8:	f082 0201 	eor.w	r2, r2, #1
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80018f0:	2901      	cmp	r1, #1
 80018f2:	d146      	bne.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
 80018f4:	233c      	movs	r3, #60	@ 0x3c
 80018f6:	fb03 5304 	mla	r3, r3, r4, r5
 80018fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d040      	beq.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8001900:	223c      	movs	r2, #60	@ 0x3c
 8001902:	fb02 5204 	mla	r2, r2, r4, r5
 8001906:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8001908:	4413      	add	r3, r2
 800190a:	3b01      	subs	r3, #1
 800190c:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8001910:	f013 0f01 	tst.w	r3, #1
 8001914:	d035      	beq.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
            hhcd->hc[chnum].toggle_out ^= 1U;
 8001916:	233c      	movs	r3, #60	@ 0x3c
 8001918:	fb03 5304 	mla	r3, r3, r4, r5
 800191c:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 8001920:	f082 0201 	eor.w	r2, r2, #1
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001928:	e02b      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 800192a:	233c      	movs	r3, #60	@ 0x3c
 800192c:	fb03 5304 	mla	r3, r3, r4, r5
 8001930:	2202      	movs	r2, #2
 8001932:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001936:	7edb      	ldrb	r3, [r3, #27]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d122      	bne.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800193c:	233c      	movs	r3, #60	@ 0x3c
 800193e:	fb03 5304 	mla	r3, r3, r4, r5
 8001942:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8001946:	e01c      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 8001948:	233c      	movs	r3, #60	@ 0x3c
 800194a:	fb03 5304 	mla	r3, r3, r4, r5
 800194e:	2102      	movs	r1, #2
 8001950:	f883 104d 	strb.w	r1, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001954:	f883 104c 	strb.w	r1, [r3, #76]	@ 0x4c
      if (hhcd->hc[chnum].do_csplit == 1U)
 8001958:	7edb      	ldrb	r3, [r3, #27]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d111      	bne.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].do_csplit = 0U;
 800195e:	233c      	movs	r3, #60	@ 0x3c
 8001960:	fb03 5304 	mla	r3, r3, r4, r5
 8001964:	2100      	movs	r1, #0
 8001966:	76d9      	strb	r1, [r3, #27]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001968:	6853      	ldr	r3, [r2, #4]
 800196a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800196e:	6053      	str	r3, [r2, #4]
 8001970:	e007      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 8001972:	233c      	movs	r3, #60	@ 0x3c
 8001974:	fb03 5304 	mla	r3, r3, r4, r5
 8001978:	2202      	movs	r2, #2
 800197a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800197e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001982:	233c      	movs	r3, #60	@ 0x3c
 8001984:	fb03 5304 	mla	r3, r3, r4, r5
 8001988:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800198c:	4621      	mov	r1, r4
 800198e:	4628      	mov	r0, r5
 8001990:	f002 faae 	bl	8003ef0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001994:	e600      	b.n	8001598 <HCD_HC_OUT_IRQHandler+0x34>
      hhcd->hc[chnum].state = HC_HALTED;
 8001996:	233c      	movs	r3, #60	@ 0x3c
 8001998:	fb03 5304 	mla	r3, r3, r4, r5
 800199c:	2202      	movs	r2, #2
 800199e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80019a2:	2205      	movs	r2, #5
 80019a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80019a8:	e7eb      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
      hhcd->hc[chnum].state = HC_HALTED;
 80019aa:	233c      	movs	r3, #60	@ 0x3c
 80019ac:	fb03 5304 	mla	r3, r3, r4, r5
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      hhcd->hc[chnum].ErrCnt++;
 80019b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019b8:	3201      	adds	r2, #1
 80019ba:	645a      	str	r2, [r3, #68]	@ 0x44
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80019bc:	2a02      	cmp	r2, #2
 80019be:	d908      	bls.n	80019d2 <HCD_HC_OUT_IRQHandler+0x46e>
        hhcd->hc[chnum].ErrCnt = 0U;
 80019c0:	233c      	movs	r3, #60	@ 0x3c
 80019c2:	fb03 5304 	mla	r3, r3, r4, r5
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80019ca:	2204      	movs	r2, #4
 80019cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80019d0:	e7d7      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80019d2:	233c      	movs	r3, #60	@ 0x3c
 80019d4:	fb03 5304 	mla	r3, r3, r4, r5
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80019de:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80019ea:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
 80019ee:	e7c8      	b.n	8001982 <HCD_HC_OUT_IRQHandler+0x41e>

080019f0 <HAL_HCD_IRQHandler>:
{
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019f4:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019f6:	4628      	mov	r0, r5
 80019f8:	f001 fbbc 	bl	8003174 <USB_GetMode>
 80019fc:	2801      	cmp	r0, #1
 80019fe:	d000      	beq.n	8001a02 <HAL_HCD_IRQHandler+0x12>
}
 8001a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	f001 fba9 	bl	800315a <USB_ReadInterrupts>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d0f9      	beq.n	8001a00 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a0c:	6820      	ldr	r0, [r4, #0]
 8001a0e:	f001 fba4 	bl	800315a <USB_ReadInterrupts>
 8001a12:	f410 1f00 	tst.w	r0, #2097152	@ 0x200000
 8001a16:	d003      	beq.n	8001a20 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a1e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a20:	6820      	ldr	r0, [r4, #0]
 8001a22:	f001 fb9a 	bl	800315a <USB_ReadInterrupts>
 8001a26:	f410 1f80 	tst.w	r0, #1048576	@ 0x100000
 8001a2a:	d003      	beq.n	8001a34 <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a32:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a34:	6820      	ldr	r0, [r4, #0]
 8001a36:	f001 fb90 	bl	800315a <USB_ReadInterrupts>
 8001a3a:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8001a3e:	d003      	beq.n	8001a48 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a46:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a48:	6820      	ldr	r0, [r4, #0]
 8001a4a:	f001 fb86 	bl	800315a <USB_ReadInterrupts>
 8001a4e:	f010 0f02 	tst.w	r0, #2
 8001a52:	d002      	beq.n	8001a5a <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	f001 fb7d 	bl	800315a <USB_ReadInterrupts>
 8001a60:	f010 5f00 	tst.w	r0, #536870912	@ 0x20000000
 8001a64:	d008      	beq.n	8001a78 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a6c:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a6e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	@ 0x440
 8001a72:	f013 0f01 	tst.w	r3, #1
 8001a76:	d025      	beq.n	8001ac4 <HAL_HCD_IRQHandler+0xd4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a78:	6820      	ldr	r0, [r4, #0]
 8001a7a:	f001 fb6e 	bl	800315a <USB_ReadInterrupts>
 8001a7e:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8001a82:	d132      	bne.n	8001aea <HAL_HCD_IRQHandler+0xfa>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a84:	6820      	ldr	r0, [r4, #0]
 8001a86:	f001 fb68 	bl	800315a <USB_ReadInterrupts>
 8001a8a:	f010 0f08 	tst.w	r0, #8
 8001a8e:	d130      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x102>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	f001 fb62 	bl	800315a <USB_ReadInterrupts>
 8001a96:	f010 7f00 	tst.w	r0, #33554432	@ 0x2000000
 8001a9a:	d131      	bne.n	8001b00 <HAL_HCD_IRQHandler+0x110>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	f001 fb5c 	bl	800315a <USB_ReadInterrupts>
 8001aa2:	f010 0f10 	tst.w	r0, #16
 8001aa6:	d0ab      	beq.n	8001a00 <HAL_HCD_IRQHandler+0x10>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa8:	6822      	ldr	r2, [r4, #0]
 8001aaa:	6993      	ldr	r3, [r2, #24]
 8001aac:	f023 0310 	bic.w	r3, r3, #16
 8001ab0:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff f88a 	bl	8000bcc <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab8:	6822      	ldr	r2, [r4, #0]
 8001aba:	6993      	ldr	r3, [r2, #24]
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	e79d      	b.n	8001a00 <HAL_HCD_IRQHandler+0x10>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f001 fac5 	bl	8003056 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001acc:	4628      	mov	r0, r5
 8001ace:	f001 fae7 	bl	80030a0 <USB_FlushRxFifo>
        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ad2:	7a63      	ldrb	r3, [r4, #9]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_HCD_IRQHandler+0xf0>
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f002 fa03 	bl	8003ee4 <HAL_HCD_Disconnect_Callback>
 8001ade:	e7cb      	b.n	8001a78 <HAL_HCD_IRQHandler+0x88>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	f001 fbfc 	bl	80032e0 <USB_InitFSLSPClkSel>
 8001ae8:	e7f6      	b.n	8001ad8 <HAL_HCD_IRQHandler+0xe8>
      HCD_Port_IRQHandler(hhcd);
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff fa04 	bl	8000ef8 <HCD_Port_IRQHandler>
 8001af0:	e7c8      	b.n	8001a84 <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f002 f9ea 	bl	8003ecc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001af8:	6823      	ldr	r3, [r4, #0]
 8001afa:	2208      	movs	r2, #8
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	e7c7      	b.n	8001a90 <HAL_HCD_IRQHandler+0xa0>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b00:	6820      	ldr	r0, [r4, #0]
 8001b02:	f001 fcf9 	bl	80034f8 <USB_HC_ReadInterrupt>
 8001b06:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b08:	2600      	movs	r6, #0
 8001b0a:	e004      	b.n	8001b16 <HAL_HCD_IRQHandler+0x126>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b0c:	b2f1      	uxtb	r1, r6
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff fd28 	bl	8001564 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b14:	3601      	adds	r6, #1
 8001b16:	7963      	ldrb	r3, [r4, #5]
 8001b18:	42b3      	cmp	r3, r6
 8001b1a:	d912      	bls.n	8001b42 <HAL_HCD_IRQHandler+0x152>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b1c:	f006 030f 	and.w	r3, r6, #15
 8001b20:	fa27 f303 	lsr.w	r3, r7, r3
 8001b24:	f013 0f01 	tst.w	r3, #1
 8001b28:	d0f4      	beq.n	8001b14 <HAL_HCD_IRQHandler+0x124>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b2a:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001b2e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8001b32:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8001b36:	d0e9      	beq.n	8001b0c <HAL_HCD_IRQHandler+0x11c>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b38:	b2f1      	uxtb	r1, r6
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fa34 	bl	8000fa8 <HCD_HC_IN_IRQHandler>
 8001b40:	e7e8      	b.n	8001b14 <HAL_HCD_IRQHandler+0x124>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	e7a7      	b.n	8001a9c <HAL_HCD_IRQHandler+0xac>

08001b4c <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 8001b4c:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d00e      	beq.n	8001b72 <HAL_HCD_Start+0x26>
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	f880 13d4 	strb.w	r1, [r0, #980]	@ 0x3d4
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b5e:	6800      	ldr	r0, [r0, #0]
 8001b60:	f001 fbfe 	bl	8003360 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	f001 fa6a 	bl	800303e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8001b70:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001b72:	2002      	movs	r0, #2
}
 8001b74:	4770      	bx	lr

08001b76 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001b76:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00b      	beq.n	8001b96 <HAL_HCD_Stop+0x20>
{
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001b82:	2301      	movs	r3, #1
 8001b84:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001b88:	6800      	ldr	r0, [r0, #0]
 8001b8a:	f001 fea5 	bl	80038d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f884 03d4 	strb.w	r0, [r4, #980]	@ 0x3d4
}
 8001b94:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001b96:	2002      	movs	r0, #2
}
 8001b98:	4770      	bx	lr

08001b9a <HAL_HCD_ResetPort>:
{
 8001b9a:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 8001b9c:	6800      	ldr	r0, [r0, #0]
 8001b9e:	f001 fbc0 	bl	8003322 <USB_ResetPort>
}
 8001ba2:	bd08      	pop	{r3, pc}

08001ba4 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001ba4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001ba8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8001bac:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001bb2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001bb6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8001bba:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001bbc:	4770      	bx	lr

08001bbe <HAL_HCD_GetCurrentFrame>:
{
 8001bbe:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bc0:	6800      	ldr	r0, [r0, #0]
 8001bc2:	f001 fbfb 	bl	80033bc <USB_GetCurrentFrame>
}
 8001bc6:	bd08      	pop	{r3, pc}

08001bc8 <HAL_HCD_GetCurrentSpeed>:
{
 8001bc8:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	f001 fbeb 	bl	80033a6 <USB_GetHostSpeed>
}
 8001bd0:	bd08      	pop	{r3, pc}

08001bd2 <HAL_HCD_HC_ClearHubInfo>:
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001bd2:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
 8001bd6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001bda:	2000      	movs	r0, #0
 8001bdc:	7690      	strb	r0, [r2, #26]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001bde:	76d0      	strb	r0, [r2, #27]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001be0:	f882 0025 	strb.w	r0, [r2, #37]	@ 0x25
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001be4:	f882 0024 	strb.w	r0, [r2, #36]	@ 0x24
}
 8001be8:	4770      	bx	lr

08001bea <HAL_HCD_HC_Init>:
{
 8001bea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	461f      	mov	r7, r3
 8001bf2:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
 8001bf6:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 8001bfa:	f8bd b040 	ldrh.w	fp, [sp, #64]	@ 0x40
  __HAL_LOCK(hhcd);
 8001bfe:	f890 33d4 	ldrb.w	r3, [r0, #980]	@ 0x3d4
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d054      	beq.n	8001cb0 <HAL_HCD_HC_Init+0xc6>
 8001c06:	4605      	mov	r5, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	4616      	mov	r6, r2
 8001c0c:	46d8      	mov	r8, fp
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001c14:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 8001c18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	765a      	strb	r2, [r3, #25]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001c20:	751f      	strb	r7, [r3, #20]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c22:	7559      	strb	r1, [r3, #21]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c24:	f883 9026 	strb.w	r9, [r3, #38]	@ 0x26
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c28:	f006 027f 	and.w	r2, r6, #127	@ 0x7f
 8001c2c:	759a      	strb	r2, [r3, #22]
  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c2e:	f7ff ffd0 	bl	8001bd2 <HAL_HCD_HC_ClearHubInfo>
  if ((epnum & 0x80U) == 0x80U)
 8001c32:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8001c36:	d129      	bne.n	8001c8c <HAL_HCD_HC_Init+0xa2>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c38:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001c3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001c40:	2200      	movs	r2, #0
 8001c42:	75da      	strb	r2, [r3, #23]
  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c44:	6828      	ldr	r0, [r5, #0]
 8001c46:	f001 fbae 	bl	80033a6 <USB_GetHostSpeed>
  if (ep_type == EP_TYPE_ISOC)
 8001c4a:	f1b9 0f01 	cmp.w	r9, #1
 8001c4e:	d024      	beq.n	8001c9a <HAL_HCD_HC_Init+0xb0>
  hhcd->hc[ch_num].speed = speed;
 8001c50:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001c54:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001c58:	f883 a018 	strb.w	sl, [r3, #24]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c5c:	fa1f f388 	uxth.w	r3, r8
 8001c60:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8001c64:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001c68:	8513      	strh	r3, [r2, #40]	@ 0x28
  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001c70:	f8cd a000 	str.w	sl, [sp]
 8001c74:	463b      	mov	r3, r7
 8001c76:	4632      	mov	r2, r6
 8001c78:	4621      	mov	r1, r4
 8001c7a:	6828      	ldr	r0, [r5, #0]
 8001c7c:	f001 fba4 	bl	80033c8 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 8001c80:	2300      	movs	r3, #0
 8001c82:	f885 33d4 	strb.w	r3, [r5, #980]	@ 0x3d4
}
 8001c86:	b005      	add	sp, #20
 8001c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c8c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001c90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001c94:	2201      	movs	r2, #1
 8001c96:	75da      	strb	r2, [r3, #23]
 8001c98:	e7d4      	b.n	8001c44 <HAL_HCD_HC_Init+0x5a>
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c9a:	f1ba 0f01 	cmp.w	sl, #1
 8001c9e:	d1d7      	bne.n	8001c50 <HAL_HCD_HC_Init+0x66>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d1d5      	bne.n	8001c50 <HAL_HCD_HC_Init+0x66>
      if (HCcharMps > ISO_SPLT_MPS)
 8001ca4:	f1bb 0fbc 	cmp.w	fp, #188	@ 0xbc
 8001ca8:	d9d2      	bls.n	8001c50 <HAL_HCD_HC_Init+0x66>
        HCcharMps = ISO_SPLT_MPS;
 8001caa:	f04f 08bc 	mov.w	r8, #188	@ 0xbc
 8001cae:	e7cf      	b.n	8001c50 <HAL_HCD_HC_Init+0x66>
  __HAL_LOCK(hhcd);
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	e7e8      	b.n	8001c86 <HAL_HCD_HC_Init+0x9c>

08001cb4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	f000 80cc 	beq.w	8001e52 <HAL_I2C_Init+0x19e>
{
 8001cba:	b570      	push	{r4, r5, r6, lr}
 8001cbc:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cbe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d077      	beq.n	8001db6 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc6:	2324      	movs	r3, #36	@ 0x24
 8001cc8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ccc:	6822      	ldr	r2, [r4, #0]
 8001cce:	6813      	ldr	r3, [r2, #0]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	6813      	ldr	r3, [r2, #0]
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cde:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	6813      	ldr	r3, [r2, #0]
 8001ce4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cea:	f000 ffcd 	bl	8002c88 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e5c <HAL_I2C_Init+0x1a8>)
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d864      	bhi.n	8001dc0 <HAL_I2C_Init+0x10c>
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <HAL_I2C_Init+0x1ac>)
 8001cf8:	4298      	cmp	r0, r3
 8001cfa:	bf8c      	ite	hi
 8001cfc:	2300      	movhi	r3, #0
 8001cfe:	2301      	movls	r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 80a8 	bne.w	8001e56 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d06:	4957      	ldr	r1, [pc, #348]	@ (8001e64 <HAL_I2C_Init+0x1b0>)
 8001d08:	fba1 3100 	umull	r3, r1, r1, r0
 8001d0c:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	6825      	ldr	r5, [r4, #0]
 8001d10:	686a      	ldr	r2, [r5, #4]
 8001d12:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001d16:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001d1a:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d1c:	6821      	ldr	r1, [r4, #0]
 8001d1e:	6a0a      	ldr	r2, [r1, #32]
 8001d20:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001d24:	6866      	ldr	r6, [r4, #4]
 8001d26:	4d4d      	ldr	r5, [pc, #308]	@ (8001e5c <HAL_I2C_Init+0x1a8>)
 8001d28:	42ae      	cmp	r6, r5
 8001d2a:	d84f      	bhi.n	8001dcc <HAL_I2C_Init+0x118>
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d32:	6821      	ldr	r1, [r4, #0]
 8001d34:	69ca      	ldr	r2, [r1, #28]
 8001d36:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001d3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d3e:	6865      	ldr	r5, [r4, #4]
 8001d40:	4b46      	ldr	r3, [pc, #280]	@ (8001e5c <HAL_I2C_Init+0x1a8>)
 8001d42:	429d      	cmp	r5, r3
 8001d44:	d84c      	bhi.n	8001de0 <HAL_I2C_Init+0x12c>
 8001d46:	1e43      	subs	r3, r0, #1
 8001d48:	006d      	lsls	r5, r5, #1
 8001d4a:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001d54:	4203      	tst	r3, r0
 8001d56:	d078      	beq.n	8001e4a <HAL_I2C_Init+0x196>
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d60:	6821      	ldr	r1, [r4, #0]
 8001d62:	680b      	ldr	r3, [r1, #0]
 8001d64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001d68:	69e2      	ldr	r2, [r4, #28]
 8001d6a:	6a20      	ldr	r0, [r4, #32]
 8001d6c:	4302      	orrs	r2, r0
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d72:	6821      	ldr	r1, [r4, #0]
 8001d74:	688b      	ldr	r3, [r1, #8]
 8001d76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d7e:	6922      	ldr	r2, [r4, #16]
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	4302      	orrs	r2, r0
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	68cb      	ldr	r3, [r1, #12]
 8001d8c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d90:	6962      	ldr	r2, [r4, #20]
 8001d92:	69a0      	ldr	r0, [r4, #24]
 8001d94:	4302      	orrs	r2, r0
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9a:	6822      	ldr	r2, [r4, #0]
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da4:	2000      	movs	r0, #0
 8001da6:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da8:	2320      	movs	r3, #32
 8001daa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001db6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001dba:	f000 fb77 	bl	80024ac <HAL_I2C_MspInit>
 8001dbe:	e782      	b.n	8001cc6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_I2C_Init+0x1b4>)
 8001dc2:	4298      	cmp	r0, r3
 8001dc4:	bf8c      	ite	hi
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	2301      	movls	r3, #1
 8001dca:	e799      	b.n	8001d00 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dcc:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001dd0:	fb05 f303 	mul.w	r3, r5, r3
 8001dd4:	4d25      	ldr	r5, [pc, #148]	@ (8001e6c <HAL_I2C_Init+0x1b8>)
 8001dd6:	fba5 5303 	umull	r5, r3, r5, r3
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	3301      	adds	r3, #1
 8001dde:	e7a6      	b.n	8001d2e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de0:	68a6      	ldr	r6, [r4, #8]
 8001de2:	b9be      	cbnz	r6, 8001e14 <HAL_I2C_Init+0x160>
 8001de4:	1e43      	subs	r3, r0, #1
 8001de6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001dea:	fbb3 f3fc 	udiv	r3, r3, ip
 8001dee:	3301      	adds	r3, #1
 8001df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df4:	fab3 f383 	clz	r3, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	bb43      	cbnz	r3, 8001e4e <HAL_I2C_Init+0x19a>
 8001dfc:	b9c6      	cbnz	r6, 8001e30 <HAL_I2C_Init+0x17c>
 8001dfe:	1e43      	subs	r3, r0, #1
 8001e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e04:	fbb3 f3f5 	udiv	r3, r3, r5
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e12:	e7a3      	b.n	8001d5c <HAL_I2C_Init+0xa8>
 8001e14:	1e43      	subs	r3, r0, #1
 8001e16:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001e1a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001e1e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	e7e4      	b.n	8001dfa <HAL_I2C_Init+0x146>
 8001e30:	1e43      	subs	r3, r0, #1
 8001e32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001e36:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001e3a:	fbb3 f3f5 	udiv	r3, r3, r5
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e48:	e788      	b.n	8001d5c <HAL_I2C_Init+0xa8>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e786      	b.n	8001d5c <HAL_I2C_Init+0xa8>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e784      	b.n	8001d5c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001e52:	2001      	movs	r0, #1
}
 8001e54:	4770      	bx	lr
    return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	e7ac      	b.n	8001db4 <HAL_I2C_Init+0x100>
 8001e5a:	bf00      	nop
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	001e847f 	.word	0x001e847f
 8001e64:	431bde83 	.word	0x431bde83
 8001e68:	003d08ff 	.word	0x003d08ff
 8001e6c:	10624dd3 	.word	0x10624dd3

08001e70 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f000 80be 	beq.w	8001ff2 <HAL_I2S_Init+0x182>
{
 8001e76:	b538      	push	{r3, r4, r5, lr}
 8001e78:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001e7a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d051      	beq.n	8001f26 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001e82:	2202      	movs	r2, #2
 8001e84:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e88:	6821      	ldr	r1, [r4, #0]
 8001e8a:	69cb      	ldr	r3, [r1, #28]
 8001e8c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001e90:	f023 030f 	bic.w	r3, r3, #15
 8001e94:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e9a:	6963      	ldr	r3, [r4, #20]
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d069      	beq.n	8001f74 <HAL_I2S_Init+0x104>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ea0:	68e3      	ldr	r3, [r4, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d146      	bne.n	8001f34 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001ea6:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001ea8:	68a3      	ldr	r3, [r4, #8]
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d800      	bhi.n	8001eb0 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001eae:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f000 ffa3 	bl	8002dfc <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ebc:	d03c      	beq.n	8001f38 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ebe:	fbb0 f0f5 	udiv	r0, r0, r5
 8001ec2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ec6:	0043      	lsls	r3, r0, #1
 8001ec8:	6962      	ldr	r2, [r4, #20]
 8001eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ece:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ed0:	4a49      	ldr	r2, [pc, #292]	@ (8001ff8 <HAL_I2S_Init+0x188>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ed6:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001eda:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 8001ede:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ee0:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ee2:	1e9a      	subs	r2, r3, #2
 8001ee4:	2afd      	cmp	r2, #253	@ 0xfd
 8001ee6:	d83f      	bhi.n	8001f68 <HAL_I2S_Init+0xf8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ee8:	6922      	ldr	r2, [r4, #16]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	6821      	ldr	r1, [r4, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ef2:	6821      	ldr	r1, [r4, #0]
 8001ef4:	69cb      	ldr	r3, [r1, #28]
 8001ef6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001efa:	f023 030f 	bic.w	r3, r3, #15
 8001efe:	6862      	ldr	r2, [r4, #4]
 8001f00:	68a0      	ldr	r0, [r4, #8]
 8001f02:	4302      	orrs	r2, r0
 8001f04:	68e0      	ldr	r0, [r4, #12]
 8001f06:	4302      	orrs	r2, r0
 8001f08:	69a0      	ldr	r0, [r4, #24]
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f12:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f14:	6a23      	ldr	r3, [r4, #32]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d02e      	beq.n	8001f78 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  return HAL_OK;
}
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8001f26:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f2a:	4b34      	ldr	r3, [pc, #208]	@ (8001ffc <HAL_I2S_Init+0x18c>)
 8001f2c:	6343      	str	r3, [r0, #52]	@ 0x34
    HAL_I2S_MspInit(hi2s);
 8001f2e:	f000 faf5 	bl	800251c <HAL_I2S_MspInit>
 8001f32:	e7a6      	b.n	8001e82 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001f34:	2520      	movs	r5, #32
 8001f36:	e7b7      	b.n	8001ea8 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f38:	68e3      	ldr	r3, [r4, #12]
 8001f3a:	b153      	cbz	r3, 8001f52 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f3c:	00ad      	lsls	r5, r5, #2
 8001f3e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f46:	0043      	lsls	r3, r0, #1
 8001f48:	6962      	ldr	r2, [r4, #20]
 8001f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4e:	3305      	adds	r3, #5
 8001f50:	e7be      	b.n	8001ed0 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f52:	00ed      	lsls	r5, r5, #3
 8001f54:	fbb0 f0f5 	udiv	r0, r0, r5
 8001f58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001f5c:	0043      	lsls	r3, r0, #1
 8001f5e:	6962      	ldr	r2, [r4, #20]
 8001f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f64:	3305      	adds	r3, #5
 8001f66:	e7b3      	b.n	8001ed0 <HAL_I2S_Init+0x60>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001f68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001f6a:	f043 0310 	orr.w	r3, r3, #16
 8001f6e:	6463      	str	r3, [r4, #68]	@ 0x44
    return  HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	e7d7      	b.n	8001f24 <HAL_I2S_Init+0xb4>
    i2sodd = 0U;
 8001f74:	2100      	movs	r1, #0
 8001f76:	e7b7      	b.n	8001ee8 <HAL_I2S_Init+0x78>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f78:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_I2S_Init+0x190>)
 8001f7a:	6363      	str	r3, [r4, #52]	@ 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f7c:	6822      	ldr	r2, [r4, #0]
 8001f7e:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <HAL_I2S_Init+0x194>)
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d01f      	beq.n	8001fc4 <HAL_I2S_Init+0x154>
 8001f84:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001f88:	69d3      	ldr	r3, [r2, #28]
 8001f8a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001f8e:	f023 030f 	bic.w	r3, r3, #15
 8001f92:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f94:	6822      	ldr	r2, [r4, #0]
 8001f96:	4b1b      	ldr	r3, [pc, #108]	@ (8002004 <HAL_I2S_Init+0x194>)
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d015      	beq.n	8001fc8 <HAL_I2S_Init+0x158>
 8001f9c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fa4:	6822      	ldr	r2, [r4, #0]
 8001fa6:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_I2S_Init+0x194>)
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d00f      	beq.n	8001fcc <HAL_I2S_Init+0x15c>
 8001fac:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
 8001fb0:	69eb      	ldr	r3, [r5, #28]
 8001fb2:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb4:	6862      	ldr	r2, [r4, #4]
 8001fb6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8001fba:	d009      	beq.n	8001fd0 <HAL_I2S_Init+0x160>
 8001fbc:	b9ba      	cbnz	r2, 8001fee <HAL_I2S_Init+0x17e>
      tmp = I2S_MODE_SLAVE_RX;
 8001fbe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fc2:	e007      	b.n	8001fd4 <HAL_I2S_Init+0x164>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001fc4:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_I2S_Init+0x198>)
 8001fc6:	e7df      	b.n	8001f88 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002008 <HAL_I2S_Init+0x198>)
 8001fca:	e7e9      	b.n	8001fa0 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001fcc:	4d0e      	ldr	r5, [pc, #56]	@ (8002008 <HAL_I2S_Init+0x198>)
 8001fce:	e7ef      	b.n	8001fb0 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 8001fd0:	f44f 7080 	mov.w	r0, #256	@ 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 8001fd4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 8001fd8:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 8001fda:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fdc:	ea40 000c 	orr.w	r0, r0, ip
 8001fe0:	4301      	orrs	r1, r0
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fea:	61eb      	str	r3, [r5, #28]
 8001fec:	e795      	b.n	8001f1a <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 8001fee:	2000      	movs	r0, #0
 8001ff0:	e7f0      	b.n	8001fd4 <HAL_I2S_Init+0x164>
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002295 	.word	0x08002295
 8002004:	40003800 	.word	0x40003800
 8002008:	40003400 	.word	0x40003400

0800200c <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800200c:	4770      	bx	lr

0800200e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800200e:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002010:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002012:	6803      	ldr	r3, [r0, #0]
 8002014:	8812      	ldrh	r2, [r2, #0]
 8002016:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002018:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800201a:	3302      	adds	r3, #2
 800201c:	6243      	str	r3, [r0, #36]	@ 0x24
  hi2s->TxXferCount--;
 800201e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002028:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	b103      	cbz	r3, 8002030 <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800202e:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002030:	6802      	ldr	r2, [r0, #0]
 8002032:	6853      	ldr	r3, [r2, #4]
 8002034:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002038:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800203a:	2301      	movs	r3, #1
 800203c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002040:	f7ff ffe4 	bl	800200c <HAL_I2S_TxCpltCallback>
}
 8002044:	e7f3      	b.n	800202e <I2S_Transmit_IT+0x20>

08002046 <HAL_I2S_RxCpltCallback>:
}
 8002046:	4770      	bx	lr

08002048 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002048:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800204a:	6803      	ldr	r3, [r0, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002050:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002052:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002054:	3302      	adds	r3, #2
 8002056:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002058:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29b      	uxth	r3, r3
 8002060:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002062:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002064:	b29b      	uxth	r3, r3
 8002066:	b103      	cbz	r3, 800206a <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002068:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800206a:	6802      	ldr	r2, [r0, #0]
 800206c:	6853      	ldr	r3, [r2, #4]
 800206e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002072:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002074:	2301      	movs	r3, #1
 8002076:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 800207a:	f7ff ffe4 	bl	8002046 <HAL_I2S_RxCpltCallback>
}
 800207e:	e7f3      	b.n	8002068 <I2S_Receive_IT+0x20>

08002080 <HAL_I2S_ErrorCallback>:
}
 8002080:	4770      	bx	lr

08002082 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002082:	b510      	push	{r4, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	6893      	ldr	r3, [r2, #8]
 800208c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800208e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b04      	cmp	r3, #4
 8002096:	d006      	beq.n	80020a6 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002098:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d02c      	beq.n	80020fc <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020a2:	b004      	add	sp, #16
 80020a4:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80020a6:	9b03      	ldr	r3, [sp, #12]
 80020a8:	f013 0f01 	tst.w	r3, #1
 80020ac:	d003      	beq.n	80020b6 <I2S_IRQHandler+0x34>
 80020ae:	6853      	ldr	r3, [r2, #4]
 80020b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020b4:	d11f      	bne.n	80020f6 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020b6:	9b03      	ldr	r3, [sp, #12]
 80020b8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020bc:	d0ec      	beq.n	8002098 <I2S_IRQHandler+0x16>
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	f012 0f20 	tst.w	r2, #32
 80020c6:	d0e7      	beq.n	8002098 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020ce:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020d0:	2300      	movs	r3, #0
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	9201      	str	r2, [sp, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80020ee:	4620      	mov	r0, r4
 80020f0:	f7ff ffc6 	bl	8002080 <HAL_I2S_ErrorCallback>
 80020f4:	e7d0      	b.n	8002098 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80020f6:	f7ff ffa7 	bl	8002048 <I2S_Receive_IT>
 80020fa:	e7dc      	b.n	80020b6 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	f013 0f02 	tst.w	r3, #2
 8002102:	d004      	beq.n	800210e <I2S_IRQHandler+0x8c>
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800210c:	d11d      	bne.n	800214a <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	f013 0f08 	tst.w	r3, #8
 8002114:	d0c5      	beq.n	80020a2 <I2S_IRQHandler+0x20>
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	f012 0f20 	tst.w	r2, #32
 800211e:	d0c0      	beq.n	80020a2 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002126:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002128:	2300      	movs	r3, #0
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002134:	2301      	movs	r3, #1
 8002136:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800213a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff ff9c 	bl	8002080 <HAL_I2S_ErrorCallback>
}
 8002148:	e7ab      	b.n	80020a2 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800214a:	4620      	mov	r0, r4
 800214c:	f7ff ff5f 	bl	800200e <I2S_Transmit_IT>
 8002150:	e7dd      	b.n	800210e <I2S_IRQHandler+0x8c>

08002152 <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002152:	4770      	bx	lr

08002154 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002154:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002156:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002158:	1c9a      	adds	r2, r3, #2
 800215a:	6242      	str	r2, [r0, #36]	@ 0x24
 800215c:	6802      	ldr	r2, [r0, #0]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002162:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	8543      	strh	r3, [r0, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800216c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	b93b      	cbnz	r3, 8002182 <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6853      	ldr	r3, [r2, #4]
 8002176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800217a:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 800217c:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800217e:	b29b      	uxth	r3, r3
 8002180:	b103      	cbz	r3, 8002184 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002182:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8002184:	2301      	movs	r3, #1
 8002186:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800218a:	f7ff ffe2 	bl	8002152 <HAL_I2SEx_TxRxCpltCallback>
}
 800218e:	e7f8      	b.n	8002182 <I2SEx_TxISR_I2S+0x2e>

08002190 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002190:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002192:	6802      	ldr	r2, [r0, #0]
 8002194:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <I2SEx_RxISR_I2SExt+0x5c>)
 8002196:	429a      	cmp	r2, r3
 8002198:	d01c      	beq.n	80021d4 <I2SEx_RxISR_I2SExt+0x44>
 800219a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80021a2:	1c99      	adds	r1, r3, #2
 80021a4:	62c1      	str	r1, [r0, #44]	@ 0x2c
 80021a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021a8:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	8643      	strh	r3, [r0, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80021b2:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	b963      	cbnz	r3, 80021d2 <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021b8:	6802      	ldr	r2, [r0, #0]
 80021ba:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <I2SEx_RxISR_I2SExt+0x5c>)
 80021bc:	429a      	cmp	r2, r3
 80021be:	d00c      	beq.n	80021da <I2SEx_RxISR_I2SExt+0x4a>
 80021c0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80021c4:	6853      	ldr	r3, [r2, #4]
 80021c6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80021ca:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80021cc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b12b      	cbz	r3, 80021de <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021d2:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021d4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80021d8:	e7e1      	b.n	800219e <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <I2SEx_RxISR_I2SExt+0x60>)
 80021dc:	e7f2      	b.n	80021c4 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80021de:	2301      	movs	r3, #1
 80021e0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021e4:	f7ff ffb5 	bl	8002152 <HAL_I2SEx_TxRxCpltCallback>
}
 80021e8:	e7f3      	b.n	80021d2 <I2SEx_RxISR_I2SExt+0x42>
 80021ea:	bf00      	nop
 80021ec:	40003800 	.word	0x40003800
 80021f0:	40003400 	.word	0x40003400

080021f4 <I2SEx_TxISR_I2SExt>:
{
 80021f4:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80021f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80021f8:	1c9a      	adds	r2, r3, #2
 80021fa:	6242      	str	r2, [r0, #36]	@ 0x24
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	6801      	ldr	r1, [r0, #0]
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <I2SEx_TxISR_I2SExt+0x5c>)
 8002202:	4299      	cmp	r1, r3
 8002204:	d018      	beq.n	8002238 <I2SEx_TxISR_I2SExt+0x44>
 8002206:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800220a:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800220c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29b      	uxth	r3, r3
 8002214:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2s->TxXferCount == 0U)
 8002216:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	b963      	cbnz	r3, 8002236 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800221c:	6802      	ldr	r2, [r0, #0]
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <I2SEx_TxISR_I2SExt+0x5c>)
 8002220:	429a      	cmp	r2, r3
 8002222:	d00c      	beq.n	800223e <I2SEx_TxISR_I2SExt+0x4a>
 8002224:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002228:	6853      	ldr	r3, [r2, #4]
 800222a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800222e:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8002230:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002232:	b29b      	uxth	r3, r3
 8002234:	b12b      	cbz	r3, 8002242 <I2SEx_TxISR_I2SExt+0x4e>
}
 8002236:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002238:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800223c:	e7e5      	b.n	800220a <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800223e:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <I2SEx_TxISR_I2SExt+0x60>)
 8002240:	e7f2      	b.n	8002228 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 8002242:	2301      	movs	r3, #1
 8002244:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002248:	f7ff ff83 	bl	8002152 <HAL_I2SEx_TxRxCpltCallback>
}
 800224c:	e7f3      	b.n	8002236 <I2SEx_TxISR_I2SExt+0x42>
 800224e:	bf00      	nop
 8002250:	40003800 	.word	0x40003800
 8002254:	40003400 	.word	0x40003400

08002258 <I2SEx_RxISR_I2S>:
{
 8002258:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002260:	1c99      	adds	r1, r3, #2
 8002262:	62c1      	str	r1, [r0, #44]	@ 0x2c
 8002264:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002266:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	8643      	strh	r3, [r0, #50]	@ 0x32
  if (hi2s->RxXferCount == 0U)
 8002270:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002272:	b29b      	uxth	r3, r3
 8002274:	b93b      	cbnz	r3, 8002286 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002276:	6802      	ldr	r2, [r0, #0]
 8002278:	6853      	ldr	r3, [r2, #4]
 800227a:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800227e:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8002280:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	b103      	cbz	r3, 8002288 <I2SEx_RxISR_I2S+0x30>
}
 8002286:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8002288:	2301      	movs	r3, #1
 800228a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800228e:	f7ff ff60 	bl	8002152 <HAL_I2SEx_TxRxCpltCallback>
}
 8002292:	e7f8      	b.n	8002286 <I2SEx_RxISR_I2S+0x2e>

08002294 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002294:	b510      	push	{r4, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800229a:	6803      	ldr	r3, [r0, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80022a0:	4a70      	ldr	r2, [pc, #448]	@ (8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d06f      	beq.n	8002386 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80022a6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80022aa:	6891      	ldr	r1, [r2, #8]
 80022ac:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80022b2:	6853      	ldr	r3, [r2, #4]
 80022b4:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022b6:	6863      	ldr	r3, [r4, #4]
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022bc:	d001      	beq.n	80022c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d170      	bne.n	80023a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80022c2:	9b05      	ldr	r3, [sp, #20]
 80022c4:	f013 0f02 	tst.w	r3, #2
 80022c8:	d003      	beq.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022d0:	d15c      	bne.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80022d2:	9b04      	ldr	r3, [sp, #16]
 80022d4:	f013 0f01 	tst.w	r3, #1
 80022d8:	d003      	beq.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80022da:	9b02      	ldr	r3, [sp, #8]
 80022dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80022e0:	d158      	bne.n	8002394 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022e2:	9b04      	ldr	r3, [sp, #16]
 80022e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80022e8:	d024      	beq.n	8002334 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80022ea:	9b02      	ldr	r3, [sp, #8]
 80022ec:	f013 0f20 	tst.w	r3, #32
 80022f0:	d020      	beq.n	8002334 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022f2:	6822      	ldr	r2, [r4, #0]
 80022f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d050      	beq.n	800239c <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 80022fa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80022fe:	6853      	ldr	r3, [r2, #4]
 8002300:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002304:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	6853      	ldr	r3, [r2, #4]
 800230a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800230e:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002326:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff fea6 	bl	8002080 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002334:	9b05      	ldr	r3, [sp, #20]
 8002336:	f013 0f08 	tst.w	r3, #8
 800233a:	d022      	beq.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	f013 0f20 	tst.w	r3, #32
 8002342:	d01e      	beq.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002344:	6822      	ldr	r2, [r4, #0]
 8002346:	6853      	ldr	r3, [r2, #4]
 8002348:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800234c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002352:	429a      	cmp	r2, r3
 8002354:	d024      	beq.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002356:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800235a:	6853      	ldr	r3, [r2, #4]
 800235c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002360:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002362:	2300      	movs	r3, #0
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800236e:	2301      	movs	r3, #1
 8002370:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002374:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fe7f 	bl	8002080 <HAL_I2S_ErrorCallback>
}
 8002382:	b006      	add	sp, #24
 8002384:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002386:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800238a:	e78e      	b.n	80022aa <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fee1 	bl	8002154 <I2SEx_TxISR_I2S>
 8002392:	e79e      	b.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fefb 	bl	8002190 <I2SEx_RxISR_I2SExt>
 800239a:	e7a2      	b.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800239c:	4a32      	ldr	r2, [pc, #200]	@ (8002468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800239e:	e7ae      	b.n	80022fe <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023a0:	4a31      	ldr	r2, [pc, #196]	@ (8002468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80023a2:	e7da      	b.n	800235a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80023a4:	9b04      	ldr	r3, [sp, #16]
 80023a6:	f013 0f02 	tst.w	r3, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80023ac:	9b02      	ldr	r3, [sp, #8]
 80023ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023b2:	d14a      	bne.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80023b4:	9b05      	ldr	r3, [sp, #20]
 80023b6:	f013 0f01 	tst.w	r3, #1
 80023ba:	d003      	beq.n	80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80023bc:	9b03      	ldr	r3, [sp, #12]
 80023be:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023c2:	d146      	bne.n	8002452 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023c4:	9b05      	ldr	r3, [sp, #20]
 80023c6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023ca:	d01c      	beq.n	8002406 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80023cc:	9b03      	ldr	r3, [sp, #12]
 80023ce:	f013 0f20 	tst.w	r3, #32
 80023d2:	d018      	beq.n	8002406 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	6853      	ldr	r3, [r2, #4]
 80023d8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80023dc:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023de:	6822      	ldr	r2, [r4, #0]
 80023e0:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d039      	beq.n	800245a <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80023e6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80023ea:	6853      	ldr	r3, [r2, #4]
 80023ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80023f0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80023f8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002400:	4620      	mov	r0, r4
 8002402:	f7ff fe3d 	bl	8002080 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002406:	9b04      	ldr	r3, [sp, #16]
 8002408:	f013 0f08 	tst.w	r3, #8
 800240c:	d0b9      	beq.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800240e:	9b02      	ldr	r3, [sp, #8]
 8002410:	f013 0f20 	tst.w	r3, #32
 8002414:	d0b5      	beq.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800241a:	429a      	cmp	r2, r3
 800241c:	d01f      	beq.n	800245e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800241e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002422:	6853      	ldr	r3, [r2, #4]
 8002424:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002428:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	6853      	ldr	r3, [r2, #4]
 800242e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002432:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002434:	2301      	movs	r3, #1
 8002436:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800243a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6463      	str	r3, [r4, #68]	@ 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fe1c 	bl	8002080 <HAL_I2S_ErrorCallback>
}
 8002448:	e79b      	b.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff fed2 	bl	80021f4 <I2SEx_TxISR_I2SExt>
 8002450:	e7b0      	b.n	80023b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff ff00 	bl	8002258 <I2SEx_RxISR_I2S>
 8002458:	e7b4      	b.n	80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245a:	4a03      	ldr	r2, [pc, #12]	@ (8002468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800245c:	e7c5      	b.n	80023ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800245e:	4a02      	ldr	r2, [pc, #8]	@ (8002468 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002460:	e7df      	b.n	8002422 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8002462:	bf00      	nop
 8002464:	40003800 	.word	0x40003800
 8002468:	40003400 	.word	0x40003400

0800246c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b500      	push	{lr}
 800246e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	2100      	movs	r1, #0
 8002472:	9100      	str	r1, [sp, #0]
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_MspInit+0x3c>)
 8002476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002478:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
 800247e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002480:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800248c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249c:	2007      	movs	r0, #7
 800249e:	f7fe fa5f 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	b003      	add	sp, #12
 80024a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ac:	b530      	push	{r4, r5, lr}
 80024ae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	2300      	movs	r3, #0
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	9304      	str	r3, [sp, #16]
 80024b6:	9305      	str	r3, [sp, #20]
 80024b8:	9306      	str	r3, [sp, #24]
 80024ba:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <HAL_I2C_MspInit+0x64>)
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_MspInit+0x1c>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024c4:	b009      	add	sp, #36	@ 0x24
 80024c6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	2500      	movs	r5, #0
 80024ca:	9501      	str	r5, [sp, #4]
 80024cc:	4c11      	ldr	r4, [pc, #68]	@ (8002514 <HAL_I2C_MspInit+0x68>)
 80024ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80024d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024e0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e6:	2312      	movs	r3, #18
 80024e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ea:	2301      	movs	r3, #1
 80024ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ee:	2304      	movs	r3, #4
 80024f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f2:	a903      	add	r1, sp, #12
 80024f4:	4808      	ldr	r0, [pc, #32]	@ (8002518 <HAL_I2C_MspInit+0x6c>)
 80024f6:	f7fe fa6d 	bl	80009d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024fa:	9502      	str	r5, [sp, #8]
 80024fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80024fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002502:	6423      	str	r3, [r4, #64]	@ 0x40
 8002504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	9b02      	ldr	r3, [sp, #8]
}
 800250e:	e7d9      	b.n	80024c4 <HAL_I2C_MspInit+0x18>
 8002510:	40005400 	.word	0x40005400
 8002514:	40023800 	.word	0x40023800
 8002518:	40020400 	.word	0x40020400

0800251c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	2300      	movs	r3, #0
 8002522:	9307      	str	r3, [sp, #28]
 8002524:	9308      	str	r3, [sp, #32]
 8002526:	9309      	str	r3, [sp, #36]	@ 0x24
 8002528:	930a      	str	r3, [sp, #40]	@ 0x28
 800252a:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800252c:	9303      	str	r3, [sp, #12]
 800252e:	9304      	str	r3, [sp, #16]
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI3)
 8002534:	6802      	ldr	r2, [r0, #0]
 8002536:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_I2S_MspInit+0xb0>)
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_I2S_MspInit+0x24>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800253c:	b00c      	add	sp, #48	@ 0x30
 800253e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002540:	2301      	movs	r3, #1
 8002542:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002544:	23c0      	movs	r3, #192	@ 0xc0
 8002546:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002548:	2302      	movs	r3, #2
 800254a:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254c:	a803      	add	r0, sp, #12
 800254e:	f000 fbab 	bl	8002ca8 <HAL_RCCEx_PeriphCLKConfig>
 8002552:	2800      	cmp	r0, #0
 8002554:	d137      	bne.n	80025c6 <HAL_I2S_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002556:	2400      	movs	r4, #0
 8002558:	9400      	str	r4, [sp, #0]
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_I2S_MspInit+0xb4>)
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
 8002564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002566:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800256a:	9200      	str	r2, [sp, #0]
 800256c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	9401      	str	r4, [sp, #4]
 8002570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
 8002578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257a:	f002 0201 	and.w	r2, r2, #1
 800257e:	9201      	str	r2, [sp, #4]
 8002580:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	9402      	str	r4, [sp, #8]
 8002584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002586:	f042 0204 	orr.w	r2, r2, #4
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002596:	2310      	movs	r3, #16
 8002598:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2602      	movs	r6, #2
 800259c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025a2:	2506      	movs	r5, #6
 80025a4:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80025a6:	a907      	add	r1, sp, #28
 80025a8:	480a      	ldr	r0, [pc, #40]	@ (80025d4 <HAL_I2S_MspInit+0xb8>)
 80025aa:	f7fe fa13 	bl	80009d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80025ae:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80025b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025ba:	950b      	str	r5, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	a907      	add	r1, sp, #28
 80025be:	4806      	ldr	r0, [pc, #24]	@ (80025d8 <HAL_I2S_MspInit+0xbc>)
 80025c0:	f7fe fa08 	bl	80009d4 <HAL_GPIO_Init>
}
 80025c4:	e7ba      	b.n	800253c <HAL_I2S_MspInit+0x20>
      Error_Handler();
 80025c6:	f7fe f859 	bl	800067c <Error_Handler>
 80025ca:	e7c4      	b.n	8002556 <HAL_I2S_MspInit+0x3a>
 80025cc:	40003c00 	.word	0x40003c00
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020800 	.word	0x40020800

080025dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025dc:	b500      	push	{lr}
 80025de:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	2300      	movs	r3, #0
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	9304      	str	r3, [sp, #16]
 80025e6:	9305      	str	r3, [sp, #20]
 80025e8:	9306      	str	r3, [sp, #24]
 80025ea:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80025ec:	6802      	ldr	r2, [r0, #0]
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <HAL_SPI_MspInit+0x64>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d002      	beq.n	80025fa <HAL_SPI_MspInit+0x1e>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025f4:	b009      	add	sp, #36	@ 0x24
 80025f6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fa:	2100      	movs	r1, #0
 80025fc:	9101      	str	r1, [sp, #4]
 80025fe:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8002602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002604:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
 800260a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002610:	9201      	str	r2, [sp, #4]
 8002612:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002614:	9102      	str	r1, [sp, #8]
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002628:	23e0      	movs	r3, #224	@ 0xe0
 800262a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002630:	2305      	movs	r3, #5
 8002632:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	a903      	add	r1, sp, #12
 8002636:	4803      	ldr	r0, [pc, #12]	@ (8002644 <HAL_SPI_MspInit+0x68>)
 8002638:	f7fe f9cc 	bl	80009d4 <HAL_GPIO_Init>
}
 800263c:	e7da      	b.n	80025f4 <HAL_SPI_MspInit+0x18>
 800263e:	bf00      	nop
 8002640:	40013000 	.word	0x40013000
 8002644:	40020000 	.word	0x40020000

08002648 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	2800      	cmp	r0, #0
 800264a:	f000 81e0 	beq.w	8002a0e <HAL_RCC_OscConfig+0x3c6>
{
 800264e:	b570      	push	{r4, r5, r6, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002654:	6803      	ldr	r3, [r0, #0]
 8002656:	f013 0f01 	tst.w	r3, #1
 800265a:	d03b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800265c:	4b9f      	ldr	r3, [pc, #636]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b04      	cmp	r3, #4
 8002666:	d02c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002668:	4b9c      	ldr	r3, [pc, #624]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002670:	2b08      	cmp	r3, #8
 8002672:	d021      	beq.n	80026b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	6863      	ldr	r3, [r4, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267a:	d04f      	beq.n	800271c <HAL_RCC_OscConfig+0xd4>
 800267c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002680:	d052      	beq.n	8002728 <HAL_RCC_OscConfig+0xe0>
 8002682:	4b96      	ldr	r3, [pc, #600]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002692:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002694:	6863      	ldr	r3, [r4, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d050      	beq.n	800273c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe f905 	bl	80008a8 <HAL_GetTick>
 800269e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	4b8e      	ldr	r3, [pc, #568]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026a8:	d114      	bne.n	80026d4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026aa:	f7fe f8fd 	bl	80008a8 <HAL_GetTick>
 80026ae:	1b40      	subs	r0, r0, r5
 80026b0:	2864      	cmp	r0, #100	@ 0x64
 80026b2:	d9f5      	bls.n	80026a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
 80026b6:	e1b1      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b8:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80026c0:	d0d8      	beq.n	8002674 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b86      	ldr	r3, [pc, #536]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80026ca:	d003      	beq.n	80026d4 <HAL_RCC_OscConfig+0x8c>
 80026cc:	6863      	ldr	r3, [r4, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 819f 	beq.w	8002a12 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f013 0f02 	tst.w	r3, #2
 80026da:	d054      	beq.n	8002786 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026dc:	4b7f      	ldr	r3, [pc, #508]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f013 0f0c 	tst.w	r3, #12
 80026e4:	d03e      	beq.n	8002764 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b7d      	ldr	r3, [pc, #500]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d033      	beq.n	800275a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f2:	68e3      	ldr	r3, [r4, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d068      	beq.n	80027ca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b79      	ldr	r3, [pc, #484]	@ (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7fe f8d3 	bl	80008a8 <HAL_GetTick>
 8002702:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	4b75      	ldr	r3, [pc, #468]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f013 0f02 	tst.w	r3, #2
 800270c:	d154      	bne.n	80027b8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe f8cb 	bl	80008a8 <HAL_GetTick>
 8002712:	1b40      	subs	r0, r0, r5
 8002714:	2802      	cmp	r0, #2
 8002716:	d9f5      	bls.n	8002704 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002718:	2003      	movs	r0, #3
 800271a:	e17f      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271c:	4a6f      	ldr	r2, [pc, #444]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800271e:	6813      	ldr	r3, [r2, #0]
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e7b5      	b.n	8002694 <HAL_RCC_OscConfig+0x4c>
 8002728:	4b6c      	ldr	r3, [pc, #432]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e7ab      	b.n	8002694 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800273c:	f7fe f8b4 	bl	80008a8 <HAL_GetTick>
 8002740:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b66      	ldr	r3, [pc, #408]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800274a:	d0c3      	beq.n	80026d4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe f8ac 	bl	80008a8 <HAL_GetTick>
 8002750:	1b40      	subs	r0, r0, r5
 8002752:	2864      	cmp	r0, #100	@ 0x64
 8002754:	d9f5      	bls.n	8002742 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002756:	2003      	movs	r0, #3
 8002758:	e160      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b60      	ldr	r3, [pc, #384]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002762:	d1c6      	bne.n	80026f2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002764:	4b5d      	ldr	r3, [pc, #372]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f013 0f02 	tst.w	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_OscConfig+0x12e>
 800276e:	68e3      	ldr	r3, [r4, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 8150 	bne.w	8002a16 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4a59      	ldr	r2, [pc, #356]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800277e:	6921      	ldr	r1, [r4, #16]
 8002780:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002784:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f013 0f08 	tst.w	r3, #8
 800278c:	d042      	beq.n	8002814 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800278e:	6963      	ldr	r3, [r4, #20]
 8002790:	b36b      	cbz	r3, 80027ee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b53      	ldr	r3, [pc, #332]	@ (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002794:	2201      	movs	r2, #1
 8002796:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe f885 	bl	80008a8 <HAL_GetTick>
 800279e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a0:	4b4e      	ldr	r3, [pc, #312]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a4:	f013 0f02 	tst.w	r3, #2
 80027a8:	d134      	bne.n	8002814 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027aa:	f7fe f87d 	bl	80008a8 <HAL_GetTick>
 80027ae:	1b40      	subs	r0, r0, r5
 80027b0:	2802      	cmp	r0, #2
 80027b2:	d9f5      	bls.n	80027a0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80027b4:	2003      	movs	r0, #3
 80027b6:	e131      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4a48      	ldr	r2, [pc, #288]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80027c0:	6921      	ldr	r1, [r4, #16]
 80027c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	e7dd      	b.n	8002786 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b45      	ldr	r3, [pc, #276]	@ (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027d0:	f7fe f86a 	bl	80008a8 <HAL_GetTick>
 80027d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f013 0f02 	tst.w	r3, #2
 80027de:	d0d2      	beq.n	8002786 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7fe f862 	bl	80008a8 <HAL_GetTick>
 80027e4:	1b40      	subs	r0, r0, r5
 80027e6:	2802      	cmp	r0, #2
 80027e8:	d9f5      	bls.n	80027d6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80027ea:	2003      	movs	r0, #3
 80027ec:	e116      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ee:	4b3c      	ldr	r3, [pc, #240]	@ (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe f857 	bl	80008a8 <HAL_GetTick>
 80027fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b37      	ldr	r3, [pc, #220]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002800:	f013 0f02 	tst.w	r3, #2
 8002804:	d006      	beq.n	8002814 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe f84f 	bl	80008a8 <HAL_GetTick>
 800280a:	1b40      	subs	r0, r0, r5
 800280c:	2802      	cmp	r0, #2
 800280e:	d9f5      	bls.n	80027fc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002810:	2003      	movs	r0, #3
 8002812:	e103      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	f013 0f04 	tst.w	r3, #4
 800281a:	d077      	beq.n	800290c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281c:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002824:	d133      	bne.n	800288e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 800282c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800282e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800283e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	4b28      	ldr	r3, [pc, #160]	@ (80028e4 <HAL_RCC_OscConfig+0x29c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002848:	d023      	beq.n	8002892 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d034      	beq.n	80028ba <HAL_RCC_OscConfig+0x272>
 8002850:	2b05      	cmp	r3, #5
 8002852:	d038      	beq.n	80028c6 <HAL_RCC_OscConfig+0x27e>
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002856:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	671a      	str	r2, [r3, #112]	@ 0x70
 800285e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002860:	f022 0204 	bic.w	r2, r2, #4
 8002864:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03d      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe f81c 	bl	80008a8 <HAL_GetTick>
 8002870:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f013 0f02 	tst.w	r3, #2
 800287a:	d146      	bne.n	800290a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe f814 	bl	80008a8 <HAL_GetTick>
 8002880:	1b80      	subs	r0, r0, r6
 8002882:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002886:	4298      	cmp	r0, r3
 8002888:	d9f3      	bls.n	8002872 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800288a:	2003      	movs	r0, #3
 800288c:	e0c6      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2500      	movs	r5, #0
 8002890:	e7d6      	b.n	8002840 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <HAL_RCC_OscConfig+0x29c>)
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800289c:	f7fe f804 	bl	80008a8 <HAL_GetTick>
 80028a0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <HAL_RCC_OscConfig+0x29c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80028aa:	d1ce      	bne.n	800284a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ac:	f7fd fffc 	bl	80008a8 <HAL_GetTick>
 80028b0:	1b80      	subs	r0, r0, r6
 80028b2:	2802      	cmp	r0, #2
 80028b4:	d9f5      	bls.n	80028a2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80028b6:	2003      	movs	r0, #3
 80028b8:	e0b0      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	4a08      	ldr	r2, [pc, #32]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80028bc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	e7cf      	b.n	8002866 <HAL_RCC_OscConfig+0x21e>
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCC_OscConfig+0x294>)
 80028c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028ca:	f042 0204 	orr.w	r2, r2, #4
 80028ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80028d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80028d8:	e7c5      	b.n	8002866 <HAL_RCC_OscConfig+0x21e>
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	42470000 	.word	0x42470000
 80028e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7fd ffde 	bl	80008a8 <HAL_GetTick>
 80028ec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	4b52      	ldr	r3, [pc, #328]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	f013 0f02 	tst.w	r3, #2
 80028f6:	d008      	beq.n	800290a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fd ffd6 	bl	80008a8 <HAL_GetTick>
 80028fc:	1b80      	subs	r0, r0, r6
 80028fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002902:	4298      	cmp	r0, r3
 8002904:	d9f3      	bls.n	80028ee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002906:	2003      	movs	r0, #3
 8002908:	e088      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290a:	b9ed      	cbnz	r5, 8002948 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800290c:	69a3      	ldr	r3, [r4, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8083 	beq.w	8002a1a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002914:	4a48      	ldr	r2, [pc, #288]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	f002 020c 	and.w	r2, r2, #12
 800291c:	2a08      	cmp	r2, #8
 800291e:	d051      	beq.n	80029c4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002920:	2b02      	cmp	r3, #2
 8002922:	d017      	beq.n	8002954 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002924:	4b45      	ldr	r3, [pc, #276]	@ (8002a3c <HAL_RCC_OscConfig+0x3f4>)
 8002926:	2200      	movs	r2, #0
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fd ffbd 	bl	80008a8 <HAL_GetTick>
 800292e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002930:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002938:	d042      	beq.n	80029c0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fd ffb5 	bl	80008a8 <HAL_GetTick>
 800293e:	1b00      	subs	r0, r0, r4
 8002940:	2802      	cmp	r0, #2
 8002942:	d9f5      	bls.n	8002930 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002944:	2003      	movs	r0, #3
 8002946:	e069      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002948:	4a3b      	ldr	r2, [pc, #236]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 800294a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	e7db      	b.n	800290c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_OscConfig+0x3f4>)
 8002956:	2200      	movs	r2, #0
 8002958:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800295a:	f7fd ffa5 	bl	80008a8 <HAL_GetTick>
 800295e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002968:	d006      	beq.n	8002978 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fd ff9d 	bl	80008a8 <HAL_GetTick>
 800296e:	1b40      	subs	r0, r0, r5
 8002970:	2802      	cmp	r0, #2
 8002972:	d9f5      	bls.n	8002960 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
 8002976:	e051      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002978:	69e3      	ldr	r3, [r4, #28]
 800297a:	6a22      	ldr	r2, [r4, #32]
 800297c:	4313      	orrs	r3, r2
 800297e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002980:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002984:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002986:	0852      	lsrs	r2, r2, #1
 8002988:	3a01      	subs	r2, #1
 800298a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800298e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002990:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002994:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 8002996:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002998:	4b28      	ldr	r3, [pc, #160]	@ (8002a3c <HAL_RCC_OscConfig+0x3f4>)
 800299a:	2201      	movs	r2, #1
 800299c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800299e:	f7fd ff83 	bl	80008a8 <HAL_GetTick>
 80029a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a4:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fd ff7b 	bl	80008a8 <HAL_GetTick>
 80029b2:	1b00      	subs	r0, r0, r4
 80029b4:	2802      	cmp	r0, #2
 80029b6:	d9f5      	bls.n	80029a4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80029b8:	2003      	movs	r0, #3
 80029ba:	e02f      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2000      	movs	r0, #0
 80029be:	e02d      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 80029c0:	2000      	movs	r0, #0
 80029c2:	e02b      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d02b      	beq.n	8002a20 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x3f0>)
 80029ca:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029cc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80029d0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	4291      	cmp	r1, r2
 80029d4:	d126      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029da:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029dc:	428a      	cmp	r2, r1
 80029de:	d123      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80029e6:	401a      	ands	r2, r3
 80029e8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80029ec:	d11e      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029ee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80029f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80029fc:	d118      	bne.n	8002a30 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029fe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002a02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002a08:	d114      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	e006      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002a0e:	2001      	movs	r0, #1
}
 8002a10:	4770      	bx	lr
        return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e002      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002a16:	2001      	movs	r0, #1
 8002a18:	e000      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002a1a:	2000      	movs	r0, #0
}
 8002a1c:	b002      	add	sp, #8
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a20:	2001      	movs	r0, #1
 8002a22:	e7fb      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002a24:	2001      	movs	r0, #1
 8002a26:	e7f9      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 8002a28:	2001      	movs	r0, #1
 8002a2a:	e7f7      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7f5      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 8002a30:	2001      	movs	r0, #1
 8002a32:	e7f3      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 8002a34:	2001      	movs	r0, #1
 8002a36:	e7f1      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d4>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a42:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d05b      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0xc6>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d15b      	bne.n	8002b0a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a52:	4b2f      	ldr	r3, [pc, #188]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002a60:	d02c      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a62:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a64:	6858      	ldr	r0, [r3, #4]
 8002a66:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002a6a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002a6e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002a72:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002a76:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002a7a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002a7e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002a82:	ebb1 010c 	subs.w	r1, r1, ip
 8002a86:	eb63 030e 	sbc.w	r3, r3, lr
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a90:	00c9      	lsls	r1, r1, #3
 8002a92:	eb11 0c00 	adds.w	ip, r1, r0
 8002a96:	f143 0300 	adc.w	r3, r3, #0
 8002a9a:	0259      	lsls	r1, r3, #9
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002aa2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002aa6:	f7fd fb8f 	bl	80001c8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002ab6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002aba:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002abe:	6858      	ldr	r0, [r3, #4]
 8002ac0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002ac4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002ac8:	ebbc 0c00 	subs.w	ip, ip, r0
 8002acc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002ad0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002ad4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ad8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002adc:	ebb1 010c 	subs.w	r1, r1, ip
 8002ae0:	eb63 030e 	sbc.w	r3, r3, lr
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aea:	00c9      	lsls	r1, r1, #3
 8002aec:	eb11 0c00 	adds.w	ip, r1, r0
 8002af0:	f143 0300 	adc.w	r3, r3, #0
 8002af4:	0299      	lsls	r1, r3, #10
 8002af6:	2300      	movs	r3, #0
 8002af8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002afc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002b00:	f7fd fb62 	bl	80001c8 <__aeabi_uldivmod>
 8002b04:	e7d1      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002b06:	4803      	ldr	r0, [pc, #12]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b08:	e7d7      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0a:	4803      	ldr	r0, [pc, #12]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8002b0c:	e7d5      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x7a>
 8002b0e:	bf00      	nop
 8002b10:	40023800 	.word	0x40023800
 8002b14:	007a1200 	.word	0x007a1200
 8002b18:	00f42400 	.word	0x00f42400

08002b1c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f000 809b 	beq.w	8002c58 <HAL_RCC_ClockConfig+0x13c>
{
 8002b22:	b570      	push	{r4, r5, r6, lr}
 8002b24:	460d      	mov	r5, r1
 8002b26:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b4f      	ldr	r3, [pc, #316]	@ (8002c68 <HAL_RCC_ClockConfig+0x14c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	428b      	cmp	r3, r1
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b34:	b2cb      	uxtb	r3, r1
 8002b36:	4a4c      	ldr	r2, [pc, #304]	@ (8002c68 <HAL_RCC_ClockConfig+0x14c>)
 8002b38:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	6813      	ldr	r3, [r2, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	428b      	cmp	r3, r1
 8002b42:	f040 808b 	bne.w	8002c5c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	f013 0f02 	tst.w	r3, #2
 8002b4c:	d017      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	f013 0f04 	tst.w	r3, #4
 8002b52:	d004      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4a45      	ldr	r2, [pc, #276]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002b56:	6893      	ldr	r3, [r2, #8]
 8002b58:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b5c:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f013 0f08 	tst.w	r3, #8
 8002b64:	d004      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b66:	4a41      	ldr	r2, [pc, #260]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002b68:	6893      	ldr	r3, [r2, #8]
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4a3e      	ldr	r2, [pc, #248]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002b72:	6893      	ldr	r3, [r2, #8]
 8002b74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b78:	68a1      	ldr	r1, [r4, #8]
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f013 0f01 	tst.w	r3, #1
 8002b84:	d032      	beq.n	8002bec <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	6863      	ldr	r3, [r4, #4]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d021      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8c:	1e9a      	subs	r2, r3, #2
 8002b8e:	2a01      	cmp	r2, #1
 8002b90:	d925      	bls.n	8002bde <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4a36      	ldr	r2, [pc, #216]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	f012 0f02 	tst.w	r2, #2
 8002b9a:	d061      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9c:	4933      	ldr	r1, [pc, #204]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002b9e:	688a      	ldr	r2, [r1, #8]
 8002ba0:	f022 0203 	bic.w	r2, r2, #3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002ba8:	f7fd fe7e 	bl	80008a8 <HAL_GetTick>
 8002bac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	6862      	ldr	r2, [r4, #4]
 8002bb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fd fe73 	bl	80008a8 <HAL_GetTick>
 8002bc2:	1b80      	subs	r0, r0, r6
 8002bc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002bc8:	4298      	cmp	r0, r3
 8002bca:	d9f0      	bls.n	8002bae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e042      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002bd8:	d1e0      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e03b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002be6:	d1d9      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002be8:	2001      	movs	r0, #1
 8002bea:	e034      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_ClockConfig+0x14c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	42ab      	cmp	r3, r5
 8002bf6:	d907      	bls.n	8002c08 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	b2ea      	uxtb	r2, r5
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_ClockConfig+0x14c>)
 8002bfc:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	42ab      	cmp	r3, r5
 8002c06:	d12d      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f013 0f04 	tst.w	r3, #4
 8002c0e:	d006      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4a16      	ldr	r2, [pc, #88]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002c12:	6893      	ldr	r3, [r2, #8]
 8002c14:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002c18:	68e1      	ldr	r1, [r4, #12]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f013 0f08 	tst.w	r3, #8
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c26:	4a11      	ldr	r2, [pc, #68]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002c28:	6893      	ldr	r3, [r2, #8]
 8002c2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002c2e:	6921      	ldr	r1, [r4, #16]
 8002c30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c34:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c36:	f7ff ff03 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCC_ClockConfig+0x150>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c42:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <HAL_RCC_ClockConfig+0x154>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	40d8      	lsrs	r0, r3
 8002c48:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x158>)
 8002c4a:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_RCC_ClockConfig+0x15c>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f7fd fdde 	bl	8000810 <HAL_InitTick>
  return HAL_OK;
 8002c54:	2000      	movs	r0, #0
}
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002c58:	2001      	movs	r0, #1
}
 8002c5a:	4770      	bx	lr
      return HAL_ERROR;
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e7fa      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
 8002c62:	e7f8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	e7f6      	b.n	8002c56 <HAL_RCC_ClockConfig+0x13a>
 8002c68:	40023c00 	.word	0x40023c00
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	08005340 	.word	0x08005340
 8002c74:	20000008 	.word	0x20000008
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c7c:	4b01      	ldr	r3, [pc, #4]	@ (8002c84 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000008 	.word	0x20000008

08002c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c88:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c8a:	f7ff fff7 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c96:	4a03      	ldr	r2, [pc, #12]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c9a:	40d8      	lsrs	r0, r3
 8002c9c:	bd08      	pop	{r3, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08005338 	.word	0x08005338

08002ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ca8:	b530      	push	{r4, r5, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cae:	6803      	ldr	r3, [r0, #0]
 8002cb0:	f013 0f05 	tst.w	r3, #5
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	f013 0f02 	tst.w	r3, #2
 8002cbc:	d12e      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002cbe:	2000      	movs	r0, #0
}
 8002cc0:	b003      	add	sp, #12
 8002cc2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002cca:	f7fd fded 	bl	80008a8 <HAL_GetTick>
 8002cce:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cd0:	4b48      	ldr	r3, [pc, #288]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002cd8:	d006      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cda:	f7fd fde5 	bl	80008a8 <HAL_GetTick>
 8002cde:	1b43      	subs	r3, r0, r5
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d9f5      	bls.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	e7eb      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ce8:	6862      	ldr	r2, [r4, #4]
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002cf2:	4a40      	ldr	r2, [pc, #256]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cf4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002cfe:	f7fd fdd3 	bl	80008a8 <HAL_GetTick>
 8002d02:	4605      	mov	r5, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d04:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002d0c:	d1d3      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d0e:	f7fd fdcb 	bl	80008a8 <HAL_GetTick>
 8002d12:	1b43      	subs	r3, r0, r5
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d9f5      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002d18:	2003      	movs	r0, #3
 8002d1a:	e7d1      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d24:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d3e:	f7fd fdb3 	bl	80008a8 <HAL_GetTick>
 8002d42:	4605      	mov	r5, r0
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002d44:	4b2c      	ldr	r3, [pc, #176]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fd fdab 	bl	80008a8 <HAL_GetTick>
 8002d52:	1b43      	subs	r3, r0, r5
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d9f5      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002d58:	2003      	movs	r0, #3
 8002d5a:	e7b1      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5c:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d60:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002d64:	d014      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d66:	68e2      	ldr	r2, [r4, #12]
 8002d68:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d00f      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d70:	4b20      	ldr	r3, [pc, #128]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d74:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d78:	491d      	ldr	r1, [pc, #116]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d80:	2000      	movs	r0, #0
 8002d82:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002d86:	671a      	str	r2, [r3, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	f013 0f01 	tst.w	r3, #1
 8002d8e:	d113      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d90:	68e3      	ldr	r3, [r4, #12]
 8002d92:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002d96:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002d9a:	d01e      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002d9c:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d9e:	6893      	ldr	r3, [r2, #8]
 8002da0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002da4:	6093      	str	r3, [r2, #8]
 8002da6:	4913      	ldr	r1, [pc, #76]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002da8:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002daa:	68e2      	ldr	r2, [r4, #12]
 8002dac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002db0:	4313      	orrs	r3, r2
 8002db2:	670b      	str	r3, [r1, #112]	@ 0x70
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e783      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002db8:	f7fd fd76 	bl	80008a8 <HAL_GetTick>
 8002dbc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc2:	f013 0f02 	tst.w	r3, #2
 8002dc6:	d1e3      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fd fd6e 	bl	80008a8 <HAL_GetTick>
 8002dcc:	1b40      	subs	r0, r0, r5
 8002dce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	d9f3      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	e772      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dda:	4906      	ldr	r1, [pc, #24]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ddc:	688a      	ldr	r2, [r1, #8]
 8002dde:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002de2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
 8002dee:	e7da      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002df0:	42470000 	.word	0x42470000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40007000 	.word	0x40007000

08002dfc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002dfc:	2801      	cmp	r0, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8002e00:	2000      	movs	r0, #0
 8002e02:	4770      	bx	lr
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e04:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002e06:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8002e08:	f413 0300 	ands.w	r3, r3, #8388608	@ 0x800000
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002e0e:	b31b      	cbz	r3, 8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8002e10:	4813      	ldr	r0, [pc, #76]	@ (8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002e12:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002e1c:	d014      	beq.n	8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e26:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002e28:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002e2e:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 8002e32:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002e36:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e3a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
 8002e3e:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002e42:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002e46:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002e48:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>)
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 8002e52:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e56:	e7e9      	b.n	8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002e58:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return frequency;
}
 8002e5a:	4770      	bx	lr
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	00bb8000 	.word	0x00bb8000
 8002e64:	007a1200 	.word	0x007a1200
 8002e68:	00f42400 	.word	0x00f42400

08002e6c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d05a      	beq.n	8002f26 <HAL_SPI_Init+0xba>
{
 8002e70:	b510      	push	{r4, lr}
 8002e72:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e74:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e76:	b933      	cbnz	r3, 8002e86 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e78:	6843      	ldr	r3, [r0, #4]
 8002e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e7e:	d005      	beq.n	8002e8c <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61c3      	str	r3, [r0, #28]
 8002e84:	e002      	b.n	8002e8c <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e8a:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e90:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d040      	beq.n	8002f1a <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea6:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea8:	6863      	ldr	r3, [r4, #4]
 8002eaa:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002eae:	68a2      	ldr	r2, [r4, #8]
 8002eb0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	68e2      	ldr	r2, [r4, #12]
 8002eb8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	6922      	ldr	r2, [r4, #16]
 8002ec0:	f002 0202 	and.w	r2, r2, #2
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	6962      	ldr	r2, [r4, #20]
 8002ec8:	f002 0201 	and.w	r2, r2, #1
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	69a2      	ldr	r2, [r4, #24]
 8002ed0:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	69e2      	ldr	r2, [r4, #28]
 8002ed8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002edc:	4313      	orrs	r3, r2
 8002ede:	6a22      	ldr	r2, [r4, #32]
 8002ee0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ee8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002eec:	6821      	ldr	r1, [r4, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ef2:	8b63      	ldrh	r3, [r4, #26]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002efa:	f002 0210 	and.w	r2, r2, #16
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	69d3      	ldr	r3, [r2, #28]
 8002f08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f0c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f0e:	2000      	movs	r0, #0
 8002f10:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8002f18:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002f1a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fb5c 	bl	80025dc <HAL_SPI_MspInit>
 8002f24:	e7b8      	b.n	8002e98 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002f26:	2001      	movs	r0, #1
}
 8002f28:	4770      	bx	lr

08002f2a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f2a:	e7fe      	b.n	8002f2a <NMI_Handler>

08002f2c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <HardFault_Handler>

08002f2e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <MemManage_Handler>

08002f30 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <BusFault_Handler>

08002f32 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <UsageFault_Handler>

08002f34 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f34:	4770      	bx	lr

08002f36 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f36:	4770      	bx	lr

08002f38 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f38:	4770      	bx	lr

08002f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3c:	f7fd fca8 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f40:	bd08      	pop	{r3, pc}
	...

08002f44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002f46:	4802      	ldr	r0, [pc, #8]	@ (8002f50 <OTG_FS_IRQHandler+0xc>)
 8002f48:	f7fe fd52 	bl	80019f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f4c:	bd08      	pop	{r3, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000570 	.word	0x20000570

08002f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f54:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f5a:	9b01      	ldr	r3, [sp, #4]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002f60:	9b01      	ldr	r3, [sp, #4]
 8002f62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f66:	d81c      	bhi.n	8002fa2 <USB_CoreReset+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f68:	6903      	ldr	r3, [r0, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	daf5      	bge.n	8002f5a <USB_CoreReset+0x6>

  count = 10U;
 8002f6e:	230a      	movs	r3, #10
 8002f70:	9301      	str	r3, [sp, #4]

  /* few cycles before setting core reset */
  while (count > 0U)
 8002f72:	e002      	b.n	8002f7a <USB_CoreReset+0x26>
  {
    count--;
 8002f74:	9b01      	ldr	r3, [sp, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 8002f7a:	9b01      	ldr	r3, [sp, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <USB_CoreReset+0x20>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002f80:	6903      	ldr	r3, [r0, #16]
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f94:	d808      	bhi.n	8002fa8 <USB_CoreReset+0x54>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002f96:	6903      	ldr	r3, [r0, #16]
 8002f98:	f013 0f01 	tst.w	r3, #1
 8002f9c:	d1f4      	bne.n	8002f88 <USB_CoreReset+0x34>

  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e000      	b.n	8002fa4 <USB_CoreReset+0x50>
      return HAL_TIMEOUT;
 8002fa2:	2003      	movs	r0, #3
}
 8002fa4:	b002      	add	sp, #8
 8002fa6:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002fa8:	2003      	movs	r0, #3
 8002faa:	e7fb      	b.n	8002fa4 <USB_CoreReset+0x50>

08002fac <USB_CoreInit>:
{
 8002fac:	b084      	sub	sp, #16
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	a803      	add	r0, sp, #12
 8002fb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fb8:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d121      	bne.n	8003004 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fc0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc6:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fc8:	68e3      	ldr	r3, [r4, #12]
 8002fca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fd2:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fd4:	68e3      	ldr	r3, [r4, #12]
 8002fd6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002fda:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002fdc:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d00a      	beq.n	8002ffa <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ffb5 	bl	8002f54 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002fea:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d01c      	beq.n	800302c <USB_CoreInit+0x80>
}
 8002ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff6:	b004      	add	sp, #16
 8002ff8:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ffa:	68e3      	ldr	r3, [r4, #12]
 8002ffc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003000:	60e3      	str	r3, [r4, #12]
 8003002:	e7ef      	b.n	8002fe4 <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003004:	68e3      	ldr	r3, [r4, #12]
 8003006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800300a:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff ffa1 	bl	8002f54 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003012:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003016:	b923      	cbnz	r3, 8003022 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003018:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800301a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003020:	e7e3      	b.n	8002fea <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003022:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003028:	63a3      	str	r3, [r4, #56]	@ 0x38
 800302a:	e7de      	b.n	8002fea <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800302c:	68a3      	ldr	r3, [r4, #8]
 800302e:	f043 0306 	orr.w	r3, r3, #6
 8003032:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	f043 0320 	orr.w	r3, r3, #32
 800303a:	60a3      	str	r3, [r4, #8]
 800303c:	e7d9      	b.n	8002ff2 <USB_CoreInit+0x46>

0800303e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800303e:	6883      	ldr	r3, [r0, #8]
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6083      	str	r3, [r0, #8]
}
 8003046:	2000      	movs	r0, #0
 8003048:	4770      	bx	lr

0800304a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800304a:	6883      	ldr	r3, [r0, #8]
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6083      	str	r3, [r0, #8]
}
 8003052:	2000      	movs	r0, #0
 8003054:	4770      	bx	lr

08003056 <USB_FlushTxFifo>:
{
 8003056:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	9301      	str	r3, [sp, #4]
    count++;
 800305c:	9b01      	ldr	r3, [sp, #4]
 800305e:	3301      	adds	r3, #1
 8003060:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003062:	9b01      	ldr	r3, [sp, #4]
 8003064:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003068:	d815      	bhi.n	8003096 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800306a:	6903      	ldr	r3, [r0, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	daf5      	bge.n	800305c <USB_FlushTxFifo+0x6>
  count = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003074:	0189      	lsls	r1, r1, #6
 8003076:	f041 0120 	orr.w	r1, r1, #32
 800307a:	6101      	str	r1, [r0, #16]
    count++;
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	3301      	adds	r3, #1
 8003080:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003082:	9b01      	ldr	r3, [sp, #4]
 8003084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003088:	d808      	bhi.n	800309c <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800308a:	6903      	ldr	r3, [r0, #16]
 800308c:	f013 0f20 	tst.w	r3, #32
 8003090:	d1f4      	bne.n	800307c <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003092:	2000      	movs	r0, #0
 8003094:	e000      	b.n	8003098 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003096:	2003      	movs	r0, #3
}
 8003098:	b002      	add	sp, #8
 800309a:	4770      	bx	lr
      return HAL_TIMEOUT;
 800309c:	2003      	movs	r0, #3
 800309e:	e7fb      	b.n	8003098 <USB_FlushTxFifo+0x42>

080030a0 <USB_FlushRxFifo>:
{
 80030a0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	9301      	str	r3, [sp, #4]
    count++;
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	3301      	adds	r3, #1
 80030aa:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80030ac:	9b01      	ldr	r3, [sp, #4]
 80030ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030b2:	d813      	bhi.n	80030dc <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030b4:	6903      	ldr	r3, [r0, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	daf5      	bge.n	80030a6 <USB_FlushRxFifo+0x6>
  count = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030be:	2310      	movs	r3, #16
 80030c0:	6103      	str	r3, [r0, #16]
    count++;
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	3301      	adds	r3, #1
 80030c6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 80030c8:	9b01      	ldr	r3, [sp, #4]
 80030ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030ce:	d808      	bhi.n	80030e2 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030d0:	6903      	ldr	r3, [r0, #16]
 80030d2:	f013 0f10 	tst.w	r3, #16
 80030d6:	d1f4      	bne.n	80030c2 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
 80030da:	e000      	b.n	80030de <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80030dc:	2003      	movs	r0, #3
}
 80030de:	b002      	add	sp, #8
 80030e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80030e2:	2003      	movs	r0, #3
 80030e4:	e7fb      	b.n	80030de <USB_FlushRxFifo+0x3e>

080030e6 <USB_WritePacket>:
{
 80030e6:	b510      	push	{r4, lr}
 80030e8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80030ec:	b984      	cbnz	r4, 8003110 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80030ee:	3303      	adds	r3, #3
 80030f0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80030f4:	f04f 0c00 	mov.w	ip, #0
 80030f8:	e008      	b.n	800310c <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80030fa:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80030fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003102:	f851 4b04 	ldr.w	r4, [r1], #4
 8003106:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8003108:	f10c 0c01 	add.w	ip, ip, #1
 800310c:	45f4      	cmp	ip, lr
 800310e:	d3f4      	bcc.n	80030fa <USB_WritePacket+0x14>
}
 8003110:	2000      	movs	r0, #0
 8003112:	bd10      	pop	{r4, pc}

08003114 <USB_ReadPacket>:
{
 8003114:	b510      	push	{r4, lr}
 8003116:	4684      	mov	ip, r0
 8003118:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 800311a:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 800311e:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003122:	2300      	movs	r3, #0
 8003124:	e005      	b.n	8003132 <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003126:	f50c 5180 	add.w	r1, ip, #4096	@ 0x1000
 800312a:	6809      	ldr	r1, [r1, #0]
 800312c:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003130:	3301      	adds	r3, #1
 8003132:	4573      	cmp	r3, lr
 8003134:	d3f7      	bcc.n	8003126 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003136:	b17a      	cbz	r2, 8003158 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003138:	f50c 5c80 	add.w	ip, ip, #4096	@ 0x1000
 800313c:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 8003140:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003142:	b2cb      	uxtb	r3, r1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	fa24 f303 	lsr.w	r3, r4, r3
 800314a:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800314e:	3101      	adds	r1, #1
      remaining_bytes--;
 8003150:	3a01      	subs	r2, #1
 8003152:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003154:	2a00      	cmp	r2, #0
 8003156:	d1f4      	bne.n	8003142 <USB_ReadPacket+0x2e>
}
 8003158:	bd10      	pop	{r4, pc}

0800315a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800315a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800315c:	6980      	ldr	r0, [r0, #24]
}
 800315e:	4010      	ands	r0, r2
 8003160:	4770      	bx	lr

08003162 <USB_ReadChInterrupts>:
  tmpreg = USBx_HC(chnum)->HCINT;
 8003162:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003166:	f500 63a0 	add.w	r3, r0, #1280	@ 0x500
 800316a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	@ 0x508
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800316e:	68db      	ldr	r3, [r3, #12]
}
 8003170:	4018      	ands	r0, r3
 8003172:	4770      	bx	lr

08003174 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003174:	6940      	ldr	r0, [r0, #20]
}
 8003176:	f000 0001 	and.w	r0, r0, #1
 800317a:	4770      	bx	lr

0800317c <USB_SetCurrentMode>:
{
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003180:	68c3      	ldr	r3, [r0, #12]
 8003182:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003186:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003188:	2901      	cmp	r1, #1
 800318a:	d013      	beq.n	80031b4 <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 800318c:	bb19      	cbnz	r1, 80031d6 <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800318e:	68c3      	ldr	r3, [r0, #12]
 8003190:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003194:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003196:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003198:	200a      	movs	r0, #10
 800319a:	f7fd fb8b 	bl	80008b4 <HAL_Delay>
      ms += 10U;
 800319e:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ffe7 	bl	8003174 <USB_GetMode>
 80031a6:	b108      	cbz	r0, 80031ac <USB_SetCurrentMode+0x30>
 80031a8:	2cc7      	cmp	r4, #199	@ 0xc7
 80031aa:	d9f5      	bls.n	8003198 <USB_SetCurrentMode+0x1c>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80031ac:	2cc8      	cmp	r4, #200	@ 0xc8
 80031ae:	d014      	beq.n	80031da <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 80031b0:	2000      	movs	r0, #0
}
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031b4:	68c3      	ldr	r3, [r0, #12]
 80031b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80031ba:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80031bc:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80031be:	200a      	movs	r0, #10
 80031c0:	f7fd fb78 	bl	80008b4 <HAL_Delay>
      ms += 10U;
 80031c4:	340a      	adds	r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031c6:	4628      	mov	r0, r5
 80031c8:	f7ff ffd4 	bl	8003174 <USB_GetMode>
 80031cc:	2801      	cmp	r0, #1
 80031ce:	d0ed      	beq.n	80031ac <USB_SetCurrentMode+0x30>
 80031d0:	2cc7      	cmp	r4, #199	@ 0xc7
 80031d2:	d9f4      	bls.n	80031be <USB_SetCurrentMode+0x42>
 80031d4:	e7ea      	b.n	80031ac <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80031d6:	2001      	movs	r0, #1
 80031d8:	e7eb      	b.n	80031b2 <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80031da:	2001      	movs	r0, #1
 80031dc:	e7e9      	b.n	80031b2 <USB_SetCurrentMode+0x36>
	...

080031e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031e0:	b084      	sub	sp, #16
 80031e2:	b538      	push	{r3, r4, r5, lr}
 80031e4:	4604      	mov	r4, r0
 80031e6:	a805      	add	r0, sp, #20
 80031e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031f8:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80031fc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003200:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003202:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003204:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003208:	63a3      	str	r3, [r4, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800320a:	68e3      	ldr	r3, [r4, #12]
 800320c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003210:	d111      	bne.n	8003236 <USB_HostInit+0x56>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003212:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d006      	beq.n	8003228 <USB_HostInit+0x48>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800321a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 800321e:	f023 0304 	bic.w	r3, r3, #4
 8003222:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8003226:	e00c      	b.n	8003242 <USB_HostInit+0x62>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003228:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8003234:	e005      	b.n	8003242 <USB_HostInit+0x62>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003236:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 800323a:	f023 0304 	bic.w	r3, r3, #4
 800323e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003242:	2110      	movs	r1, #16
 8003244:	4620      	mov	r0, r4
 8003246:	f7ff ff06 	bl	8003056 <USB_FlushTxFifo>
 800324a:	4605      	mov	r5, r0
 800324c:	b100      	cbz	r0, 8003250 <USB_HostInit+0x70>
  {
    ret = HAL_ERROR;
 800324e:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff ff25 	bl	80030a0 <USB_FlushRxFifo>
 8003256:	b100      	cbz	r0, 800325a <USB_HostInit+0x7a>
  {
    ret = HAL_ERROR;
 8003258:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800325a:	2200      	movs	r2, #0
 800325c:	e009      	b.n	8003272 <USB_HostInit+0x92>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800325e:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8003262:	f04f 31ff 	mov.w	r1, #4294967295
 8003266:	f8c3 1508 	str.w	r1, [r3, #1288]	@ 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 800326a:	2100      	movs	r1, #0
 800326c:	f8c3 150c 	str.w	r1, [r3, #1292]	@ 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8003270:	3201      	adds	r2, #1
 8003272:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003276:	4293      	cmp	r3, r2
 8003278:	d8f1      	bhi.n	800325e <USB_HostInit+0x7e>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	6163      	str	r3, [r4, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <USB_HostInit+0xf0>)
 8003286:	429c      	cmp	r4, r3
 8003288:	d017      	beq.n	80032ba <USB_HostInit+0xda>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800328e:	f503 03c0 	add.w	r3, r3, #6291456	@ 0x600000
 8003292:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <USB_HostInit+0xf4>)
 8003296:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800329a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800329e:	b91b      	cbnz	r3, 80032a8 <USB_HostInit+0xc8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032a0:	69a3      	ldr	r3, [r4, #24]
 80032a2:	f043 0310 	orr.w	r3, r3, #16
 80032a6:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80032a8:	69a2      	ldr	r2, [r4, #24]
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <USB_HostInit+0xf8>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 80032b0:	4628      	mov	r0, r5
 80032b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032b6:	b004      	add	sp, #16
 80032b8:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x200U;
 80032ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032be:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80032c0:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 80032c4:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <USB_HostInit+0xfc>)
 80032c8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 80032cc:	e7e5      	b.n	800329a <USB_HostInit+0xba>
 80032ce:	bf00      	nop
 80032d0:	40040000 	.word	0x40040000
 80032d4:	004000e0 	.word	0x004000e0
 80032d8:	a3200008 	.word	0xa3200008
 80032dc:	00e00300 	.word	0x00e00300

080032e0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80032e0:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 80032e4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80032f0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	@ 0x400
 80032f4:	f001 0203 	and.w	r2, r1, #3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c0 3400 	str.w	r3, [r0, #1024]	@ 0x400

  if (freq == HCFG_48_MHZ)
 80032fe:	2901      	cmp	r1, #1
 8003300:	d007      	beq.n	8003312 <USB_InitFSLSPClkSel+0x32>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
  }
  else if (freq == HCFG_6_MHZ)
 8003302:	2902      	cmp	r1, #2
 8003304:	d10b      	bne.n	800331e <USB_InitFSLSPClkSel+0x3e>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003306:	f241 7370 	movw	r3, #6000	@ 0x1770
 800330a:	f8cc 3004 	str.w	r3, [ip, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800330e:	2000      	movs	r0, #0
 8003310:	4770      	bx	lr
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003312:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003316:	f8cc 3004 	str.w	r3, [ip, #4]
  return HAL_OK;
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr
    return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
}
 8003320:	4770      	bx	lr

08003322 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8003322:	b530      	push	{r4, r5, lr}
 8003324:	b083      	sub	sp, #12
 8003326:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003328:	2500      	movs	r5, #0
 800332a:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800332c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 8003330:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003332:	9b01      	ldr	r3, [sp, #4]
 8003334:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003338:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800333a:	9b01      	ldr	r3, [sp, #4]
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003344:	2064      	movs	r0, #100	@ 0x64
 8003346:	f7fd fab5 	bl	80008b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800334a:	9b01      	ldr	r3, [sp, #4]
 800334c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003350:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  HAL_Delay(10U);
 8003354:	200a      	movs	r0, #10
 8003356:	f7fd faad 	bl	80008b4 <HAL_Delay>

  return HAL_OK;
}
 800335a:	4628      	mov	r0, r5
 800335c:	b003      	add	sp, #12
 800335e:	bd30      	pop	{r4, r5, pc}

08003360 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003360:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003366:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 800336a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003372:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003374:	9b01      	ldr	r3, [sp, #4]
 8003376:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800337a:	d101      	bne.n	8003380 <USB_DriveVbus+0x20>
 800337c:	2901      	cmp	r1, #1
 800337e:	d00c      	beq.n	800339a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003380:	9b01      	ldr	r3, [sp, #4]
 8003382:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003386:	d005      	beq.n	8003394 <USB_DriveVbus+0x34>
 8003388:	b921      	cbnz	r1, 8003394 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800338a:	9b01      	ldr	r3, [sp, #4]
 800338c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003390:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
  }
  return HAL_OK;
}
 8003394:	2000      	movs	r0, #0
 8003396:	b002      	add	sp, #8
 8003398:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800339a:	9b01      	ldr	r3, [sp, #4]
 800339c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033a0:	f8c0 3440 	str.w	r3, [r0, #1088]	@ 0x440
 80033a4:	e7ec      	b.n	8003380 <USB_DriveVbus+0x20>

080033a6 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80033a6:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80033ac:	f8d0 3440 	ldr.w	r3, [r0, #1088]	@ 0x440
 80033b0:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80033b2:	9801      	ldr	r0, [sp, #4]
}
 80033b4:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80033b8:	b002      	add	sp, #8
 80033ba:	4770      	bx	lr

080033bc <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80033bc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033c0:	6880      	ldr	r0, [r0, #8]
}
 80033c2:	b280      	uxth	r0, r0
 80033c4:	4770      	bx	lr
	...

080033c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	4691      	mov	r9, r2
 80033ce:	461c      	mov	r4, r3
 80033d0:	f89d 5024 	ldrb.w	r5, [sp, #36]	@ 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80033d4:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80033d8:	f506 63a0 	add.w	r3, r6, #1280	@ 0x500
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80033e2:	2d03      	cmp	r5, #3
 80033e4:	d87a      	bhi.n	80034dc <USB_HC_Init+0x114>
 80033e6:	e8df f005 	tbb	[pc, r5]
 80033ea:	6b02      	.short	0x6b02
 80033ec:	1902      	.short	0x1902
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80033ee:	f240 429d 	movw	r2, #1181	@ 0x49d
 80033f2:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80033f4:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80033f8:	d104      	bne.n	8003404 <USB_HC_Init+0x3c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
#if defined (USB_OTG_HS)
        if (USBx == USB_OTG_HS)
 80033fa:	4a3e      	ldr	r2, [pc, #248]	@ (80034f4 <USB_HC_Init+0x12c>)
 80033fc:	4290      	cmp	r0, r2
 80033fe:	d007      	beq.n	8003410 <USB_HC_Init+0x48>
  HAL_StatusTypeDef ret = HAL_OK;
 8003400:	2700      	movs	r7, #0
 8003402:	e012      	b.n	800342a <USB_HC_Init+0x62>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800340a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800340c:	2700      	movs	r7, #0
 800340e:	e00c      	b.n	800342a <USB_HC_Init+0x62>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003416:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003418:	2700      	movs	r7, #0
 800341a:	e006      	b.n	800342a <USB_HC_Init+0x62>
#endif /* defined (USB_OTG_HS) */
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800341c:	f240 629d 	movw	r2, #1693	@ 0x69d
 8003420:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003422:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8003426:	d145      	bne.n	80034b4 <USB_HC_Init+0xec>
  HAL_StatusTypeDef ret = HAL_OK;
 8003428:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800342a:	2200      	movs	r2, #0
 800342c:	605a      	str	r2, [r3, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	f042 0202 	orr.w	r2, r2, #2
 8003434:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003436:	f8d0 3418 	ldr.w	r3, [r0, #1048]	@ 0x418
 800343a:	f001 010f 	and.w	r1, r1, #15
 800343e:	2201      	movs	r2, #1
 8003440:	408a      	lsls	r2, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c0 3418 	str.w	r3, [r0, #1048]	@ 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003448:	6983      	ldr	r3, [r0, #24]
 800344a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800344e:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003450:	f019 0f80 	tst.w	r9, #128	@ 0x80
 8003454:	d144      	bne.n	80034e0 <USB_HC_Init+0x118>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003456:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800345a:	f7ff ffa4 	bl	80033a6 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800345e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d03f      	beq.n	80034e6 <USB_HC_Init+0x11e>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003466:	2200      	movs	r2, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003468:	05a3      	lsls	r3, r4, #22
 800346a:	f003 53fe 	and.w	r3, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800346e:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8003472:	f409 49f0 	and.w	r9, r9, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003476:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800347a:	04a9      	lsls	r1, r5, #18
 800347c:	f401 2140 	and.w	r1, r1, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003480:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8003482:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8003486:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800348a:	430b      	orrs	r3, r1
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800348c:	ea43 0308 	orr.w	r3, r3, r8
 8003490:	4313      	orrs	r3, r2
 8003492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003496:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800349a:	2d03      	cmp	r5, #3
 800349c:	d001      	beq.n	80034a2 <USB_HC_Init+0xda>
 800349e:	2d01      	cmp	r5, #1
 80034a0:	d105      	bne.n	80034ae <USB_HC_Init+0xe6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034a2:	f8d6 3500 	ldr.w	r3, [r6, #1280]	@ 0x500
 80034a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034aa:	f8c6 3500 	str.w	r3, [r6, #1280]	@ 0x500
  }

  return ret;
}
 80034ae:	4638      	mov	r0, r7
 80034b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ba:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80034bc:	2700      	movs	r7, #0
 80034be:	e7b4      	b.n	800342a <USB_HC_Init+0x62>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80034c0:	f240 2225 	movw	r2, #549	@ 0x225
 80034c4:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 80034c6:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80034ca:	d101      	bne.n	80034d0 <USB_HC_Init+0x108>
  HAL_StatusTypeDef ret = HAL_OK;
 80034cc:	2700      	movs	r7, #0
 80034ce:	e7ac      	b.n	800342a <USB_HC_Init+0x62>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80034d6:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80034d8:	2700      	movs	r7, #0
 80034da:	e7a6      	b.n	800342a <USB_HC_Init+0x62>
  switch (ep_type)
 80034dc:	2701      	movs	r7, #1
 80034de:	e7a4      	b.n	800342a <USB_HC_Init+0x62>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80034e0:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
 80034e4:	e7b9      	b.n	800345a <USB_HC_Init+0x92>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80034e6:	2802      	cmp	r0, #2
 80034e8:	d002      	beq.n	80034f0 <USB_HC_Init+0x128>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80034ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034ee:	e7bb      	b.n	8003468 <USB_HC_Init+0xa0>
    HCcharLowSpeed = 0U;
 80034f0:	2200      	movs	r2, #0
 80034f2:	e7b9      	b.n	8003468 <USB_HC_Init+0xa0>
 80034f4:	40040000 	.word	0x40040000

080034f8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80034f8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80034fc:	6940      	ldr	r0, [r0, #20]
}
 80034fe:	b280      	uxth	r0, r0
 8003500:	4770      	bx	lr

08003502 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003502:	b470      	push	{r4, r5, r6}
 8003504:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800350a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800350e:	f501 62a0 	add.w	r2, r1, #1280	@ 0x500
 8003512:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8003516:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800351a:	f8d1 5500 	ldr.w	r5, [r1, #1280]	@ 0x500
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800351e:	6854      	ldr	r4, [r2, #4]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8003520:	6886      	ldr	r6, [r0, #8]
 8003522:	f016 0f20 	tst.w	r6, #32
 8003526:	d008      	beq.n	800353a <USB_HC_Halt+0x38>
 8003528:	0fed      	lsrs	r5, r5, #31
 800352a:	0fe4      	lsrs	r4, r4, #31
 800352c:	b92c      	cbnz	r4, 800353a <USB_HC_Halt+0x38>
 800352e:	2d00      	cmp	r5, #0
 8003530:	d05a      	beq.n	80035e8 <USB_HC_Halt+0xe6>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8003532:	2b01      	cmp	r3, #1
 8003534:	d058      	beq.n	80035e8 <USB_HC_Halt+0xe6>
 8003536:	2b03      	cmp	r3, #3
 8003538:	d056      	beq.n	80035e8 <USB_HC_Halt+0xe6>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800353a:	b31b      	cbz	r3, 8003584 <USB_HC_Halt+0x82>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d021      	beq.n	8003584 <USB_HC_Halt+0x82>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003540:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8003544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003548:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800354c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	@ 0x410
 8003550:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
 8003554:	d14c      	bne.n	80035f0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003556:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 800355a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800355e:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003562:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8003566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800356a:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      do
      {
        count++;
 800356e:	9b01      	ldr	r3, [sp, #4]
 8003570:	3301      	adds	r3, #1
 8003572:	9301      	str	r3, [sp, #4]

        if (count > 1000U)
 8003574:	9b01      	ldr	r3, [sp, #4]
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800357a:	d835      	bhi.n	80035e8 <USB_HC_Halt+0xe6>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800357c:	6813      	ldr	r3, [r2, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	dbf5      	blt.n	800356e <USB_HC_Halt+0x6c>
 8003582:	e031      	b.n	80035e8 <USB_HC_Halt+0xe6>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003584:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 8003588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800358c:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003590:	6883      	ldr	r3, [r0, #8]
 8003592:	f013 0f20 	tst.w	r3, #32
 8003596:	d121      	bne.n	80035dc <USB_HC_Halt+0xda>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003598:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800359a:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
 800359e:	d116      	bne.n	80035ce <USB_HC_Halt+0xcc>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80035a0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80035a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035a8:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80035ac:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80035b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035b4:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
          count++;
 80035b8:	9b01      	ldr	r3, [sp, #4]
 80035ba:	3301      	adds	r3, #1
 80035bc:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 80035be:	9b01      	ldr	r3, [sp, #4]
 80035c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035c4:	d810      	bhi.n	80035e8 <USB_HC_Halt+0xe6>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80035c6:	6813      	ldr	r3, [r2, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	dbf5      	blt.n	80035b8 <USB_HC_Halt+0xb6>
 80035cc:	e00c      	b.n	80035e8 <USB_HC_Halt+0xe6>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80035ce:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80035d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d6:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 80035da:	e005      	b.n	80035e8 <USB_HC_Halt+0xe6>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80035dc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80035e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035e4:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	b003      	add	sp, #12
 80035ec:	bc70      	pop	{r4, r5, r6}
 80035ee:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80035f0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
 80035f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035f8:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
 80035fc:	e7f4      	b.n	80035e8 <USB_HC_Halt+0xe6>
	...

08003600 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003600:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8003604:	4a06      	ldr	r2, [pc, #24]	@ (8003620 <USB_DoPing+0x20>)
 8003606:	f8c0 2510 	str.w	r2, [r0, #1296]	@ 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800360a:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800360e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003612:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003616:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

  return HAL_OK;
}
 800361a:	2000      	movs	r0, #0
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	80080000 	.word	0x80080000

08003624 <USB_HC_StartXfer>:
{
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	b084      	sub	sp, #16
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003628:	784b      	ldrb	r3, [r1, #1]
  if (USBx == USB_OTG_HS)
 800362a:	4ca3      	ldr	r4, [pc, #652]	@ (80038b8 <USB_HC_StartXfer+0x294>)
 800362c:	42a0      	cmp	r0, r4
 800362e:	d016      	beq.n	800365e <USB_HC_StartXfer+0x3a>
  if (hc->do_ssplit == 1U)
 8003630:	798c      	ldrb	r4, [r1, #6]
 8003632:	2c01      	cmp	r4, #1
 8003634:	d02d      	beq.n	8003692 <USB_HC_StartXfer+0x6e>
    if (hc->xfer_len > 0U)
 8003636:	6a0d      	ldr	r5, [r1, #32]
 8003638:	2d00      	cmp	r5, #0
 800363a:	d05e      	beq.n	80036fa <USB_HC_StartXfer+0xd6>
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800363c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
 8003640:	eb05 040c 	add.w	r4, r5, ip
 8003644:	3c01      	subs	r4, #1
 8003646:	fbb4 f4fc 	udiv	r4, r4, ip
 800364a:	b2a4      	uxth	r4, r4
      if (num_packets > max_hc_pkt_count)
 800364c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003650:	d954      	bls.n	80036fc <USB_HC_StartXfer+0xd8>
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003652:	ea4f 240c 	mov.w	r4, ip, lsl #8
 8003656:	61cc      	str	r4, [r1, #28]
        num_packets = max_hc_pkt_count;
 8003658:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800365c:	e04e      	b.n	80036fc <USB_HC_StartXfer+0xd8>
    if (dma == 1U)
 800365e:	2a01      	cmp	r2, #1
 8003660:	d007      	beq.n	8003672 <USB_HC_StartXfer+0x4e>
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8003662:	888c      	ldrh	r4, [r1, #4]
 8003664:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003668:	d1e2      	bne.n	8003630 <USB_HC_StartXfer+0xc>
        (void)USB_DoPing(USBx, hc->ch_num);
 800366a:	4619      	mov	r1, r3
 800366c:	f7ff ffc8 	bl	8003600 <USB_DoPing>
        return HAL_OK;
 8003670:	e11e      	b.n	80038b0 <USB_HC_StartXfer+0x28c>
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8003672:	7c8c      	ldrb	r4, [r1, #18]
 8003674:	b10c      	cbz	r4, 800367a <USB_HC_StartXfer+0x56>
 8003676:	2c02      	cmp	r4, #2
 8003678:	d1da      	bne.n	8003630 <USB_HC_StartXfer+0xc>
 800367a:	798c      	ldrb	r4, [r1, #6]
 800367c:	2c00      	cmp	r4, #0
 800367e:	d1d7      	bne.n	8003630 <USB_HC_StartXfer+0xc>
        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003680:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003684:	f8d4 550c 	ldr.w	r5, [r4, #1292]	@ 0x50c
 8003688:	f025 0570 	bic.w	r5, r5, #112	@ 0x70
 800368c:	f8c4 550c 	str.w	r5, [r4, #1292]	@ 0x50c
 8003690:	e7ce      	b.n	8003630 <USB_HC_StartXfer+0xc>
    if (hc->ep_is_in != 0U)
 8003692:	78cc      	ldrb	r4, [r1, #3]
 8003694:	b11c      	cbz	r4, 800369e <USB_HC_StartXfer+0x7a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003696:	8a8c      	ldrh	r4, [r1, #20]
 8003698:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 800369a:	2401      	movs	r4, #1
 800369c:	e035      	b.n	800370a <USB_HC_StartXfer+0xe6>
      if (hc->ep_type == EP_TYPE_ISOC)
 800369e:	7c8c      	ldrb	r4, [r1, #18]
 80036a0:	2c01      	cmp	r4, #1
 80036a2:	d005      	beq.n	80036b0 <USB_HC_StartXfer+0x8c>
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80036a4:	2a01      	cmp	r2, #1
 80036a6:	d021      	beq.n	80036ec <USB_HC_StartXfer+0xc8>
          hc->XferSize = hc->xfer_len;
 80036a8:	6a0c      	ldr	r4, [r1, #32]
 80036aa:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 80036ac:	2401      	movs	r4, #1
 80036ae:	e02c      	b.n	800370a <USB_HC_StartXfer+0xe6>
        if (hc->xfer_len > ISO_SPLT_MPS)
 80036b0:	6a0c      	ldr	r4, [r1, #32]
 80036b2:	2cbc      	cmp	r4, #188	@ 0xbc
 80036b4:	d90d      	bls.n	80036d2 <USB_HC_StartXfer+0xae>
          hc->XferSize = hc->max_packet;
 80036b6:	8a8c      	ldrh	r4, [r1, #20]
 80036b8:	61cc      	str	r4, [r1, #28]
          hc->xfer_len = hc->XferSize;
 80036ba:	620c      	str	r4, [r1, #32]
          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80036bc:	68cc      	ldr	r4, [r1, #12]
 80036be:	3c01      	subs	r4, #1
 80036c0:	2c01      	cmp	r4, #1
 80036c2:	d902      	bls.n	80036ca <USB_HC_StartXfer+0xa6>
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80036c4:	2401      	movs	r4, #1
 80036c6:	60cc      	str	r4, [r1, #12]
 80036c8:	e01f      	b.n	800370a <USB_HC_StartXfer+0xe6>
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80036ca:	2402      	movs	r4, #2
 80036cc:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 80036ce:	2401      	movs	r4, #1
 80036d0:	e01b      	b.n	800370a <USB_HC_StartXfer+0xe6>
          hc->XferSize = hc->xfer_len;
 80036d2:	61cc      	str	r4, [r1, #28]
          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80036d4:	68cc      	ldr	r4, [r1, #12]
 80036d6:	3c01      	subs	r4, #1
 80036d8:	2c01      	cmp	r4, #1
 80036da:	d903      	bls.n	80036e4 <USB_HC_StartXfer+0xc0>
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80036dc:	2404      	movs	r4, #4
 80036de:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 80036e0:	2401      	movs	r4, #1
 80036e2:	e012      	b.n	800370a <USB_HC_StartXfer+0xe6>
            hc->iso_splt_xactPos = HCSPLT_END;
 80036e4:	2403      	movs	r4, #3
 80036e6:	60cc      	str	r4, [r1, #12]
    num_packets = 1U;
 80036e8:	2401      	movs	r4, #1
 80036ea:	e00e      	b.n	800370a <USB_HC_StartXfer+0xe6>
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80036ec:	6a0d      	ldr	r5, [r1, #32]
 80036ee:	8a8c      	ldrh	r4, [r1, #20]
 80036f0:	42a5      	cmp	r5, r4
 80036f2:	d9d9      	bls.n	80036a8 <USB_HC_StartXfer+0x84>
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80036f4:	61cc      	str	r4, [r1, #28]
    num_packets = 1U;
 80036f6:	2401      	movs	r4, #1
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80036f8:	e007      	b.n	800370a <USB_HC_StartXfer+0xe6>
      num_packets = 1U;
 80036fa:	2401      	movs	r4, #1
    if (hc->ep_is_in != 0U)
 80036fc:	78ce      	ldrb	r6, [r1, #3]
 80036fe:	2e00      	cmp	r6, #0
 8003700:	d060      	beq.n	80037c4 <USB_HC_StartXfer+0x1a0>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003702:	8a8d      	ldrh	r5, [r1, #20]
 8003704:	fb04 f505 	mul.w	r5, r4, r5
 8003708:	61cd      	str	r5, [r1, #28]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800370a:	69cd      	ldr	r5, [r1, #28]
 800370c:	f3c5 0c12 	ubfx	ip, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003710:	4d6a      	ldr	r5, [pc, #424]	@ (80038bc <USB_HC_StartXfer+0x298>)
 8003712:	ea05 44c4 	and.w	r4, r5, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003716:	ea4c 0c04 	orr.w	ip, ip, r4
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800371a:	7d8c      	ldrb	r4, [r1, #22]
 800371c:	0764      	lsls	r4, r4, #29
 800371e:	f004 44c0 	and.w	r4, r4, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003722:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003726:	f503 6ea0 	add.w	lr, r3, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800372a:	ea4c 0404 	orr.w	r4, ip, r4
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800372e:	f8ce 4010 	str.w	r4, [lr, #16]
  if (dma != 0U)
 8003732:	b112      	cbz	r2, 800373a <USB_HC_StartXfer+0x116>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003734:	698c      	ldr	r4, [r1, #24]
 8003736:	f8ce 4014 	str.w	r4, [lr, #20]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800373a:	f500 6580 	add.w	r5, r0, #1024	@ 0x400
 800373e:	68ac      	ldr	r4, [r5, #8]
 8003740:	f014 0f01 	tst.w	r4, #1
 8003744:	bf0c      	ite	eq
 8003746:	f04f 0c01 	moveq.w	ip, #1
 800374a:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800374e:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8003752:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8003756:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800375a:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 800375e:	ea44 744c 	orr.w	r4, r4, ip, lsl #29
 8003762:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  if (hc->do_ssplit == 1U)
 8003766:	798c      	ldrb	r4, [r1, #6]
 8003768:	2c01      	cmp	r4, #1
 800376a:	d02d      	beq.n	80037c8 <USB_HC_StartXfer+0x1a4>
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800376c:	2400      	movs	r4, #0
 800376e:	f8ce 4004 	str.w	r4, [lr, #4]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003772:	f8d3 4500 	ldr.w	r4, [r3, #1280]	@ 0x500
 8003776:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003778:	9c03      	ldr	r4, [sp, #12]
 800377a:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 800377e:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 8003780:	78cc      	ldrb	r4, [r1, #3]
 8003782:	2c00      	cmp	r4, #0
 8003784:	d07d      	beq.n	8003882 <USB_HC_StartXfer+0x25e>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003786:	9c03      	ldr	r4, [sp, #12]
 8003788:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800378c:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800378e:	9c03      	ldr	r4, [sp, #12]
 8003790:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8003794:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003796:	9c03      	ldr	r4, [sp, #12]
 8003798:	f8c3 4500 	str.w	r4, [r3, #1280]	@ 0x500
  if (dma != 0U) /* dma mode */
 800379c:	2a00      	cmp	r2, #0
 800379e:	f040 8087 	bne.w	80038b0 <USB_HC_StartXfer+0x28c>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80037a2:	78cb      	ldrb	r3, [r1, #3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f040 8083 	bne.w	80038b0 <USB_HC_StartXfer+0x28c>
 80037aa:	6a0b      	ldr	r3, [r1, #32]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d07f      	beq.n	80038b0 <USB_HC_StartXfer+0x28c>
 80037b0:	79ca      	ldrb	r2, [r1, #7]
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	d17c      	bne.n	80038b0 <USB_HC_StartXfer+0x28c>
    switch (hc->ep_type)
 80037b6:	7c8a      	ldrb	r2, [r1, #18]
 80037b8:	2a03      	cmp	r2, #3
 80037ba:	d872      	bhi.n	80038a2 <USB_HC_StartXfer+0x27e>
 80037bc:	e8df f002 	tbb	[pc, r2]
 80037c0:	80668066 	.word	0x80668066
      hc->XferSize = hc->xfer_len;
 80037c4:	61cd      	str	r5, [r1, #28]
 80037c6:	e7a0      	b.n	800370a <USB_HC_StartXfer+0xe6>
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80037c8:	7c4e      	ldrb	r6, [r1, #17]
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80037ca:	7c0c      	ldrb	r4, [r1, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80037cc:	ea44 14c6 	orr.w	r4, r4, r6, lsl #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80037d0:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80037d4:	f8ce 4004 	str.w	r4, [lr, #4]
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80037d8:	f8de 400c 	ldr.w	r4, [lr, #12]
 80037dc:	f044 0460 	orr.w	r4, r4, #96	@ 0x60
 80037e0:	f8ce 400c 	str.w	r4, [lr, #12]
    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80037e4:	79cc      	ldrb	r4, [r1, #7]
 80037e6:	2c01      	cmp	r4, #1
 80037e8:	d012      	beq.n	8003810 <USB_HC_StartXfer+0x1ec>
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80037ea:	7c8c      	ldrb	r4, [r1, #18]
 80037ec:	2c01      	cmp	r4, #1
 80037ee:	d01f      	beq.n	8003830 <USB_HC_StartXfer+0x20c>
 80037f0:	2c03      	cmp	r4, #3
 80037f2:	d01d      	beq.n	8003830 <USB_HC_StartXfer+0x20c>
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80037f4:	7c8c      	ldrb	r4, [r1, #18]
 80037f6:	2c01      	cmp	r4, #1
 80037f8:	d1bb      	bne.n	8003772 <USB_HC_StartXfer+0x14e>
 80037fa:	78cc      	ldrb	r4, [r1, #3]
 80037fc:	2c00      	cmp	r4, #0
 80037fe:	d1b8      	bne.n	8003772 <USB_HC_StartXfer+0x14e>
      switch (hc->iso_splt_xactPos)
 8003800:	68cc      	ldr	r4, [r1, #12]
 8003802:	3c01      	subs	r4, #1
 8003804:	2c03      	cmp	r4, #3
 8003806:	d8b4      	bhi.n	8003772 <USB_HC_StartXfer+0x14e>
 8003808:	e8df f004 	tbb	[pc, r4]
 800380c:	342d261f 	.word	0x342d261f
    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8003810:	78cc      	ldrb	r4, [r1, #3]
 8003812:	2c00      	cmp	r4, #0
 8003814:	d1e9      	bne.n	80037ea <USB_HC_StartXfer+0x1c6>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003816:	f8de 4004 	ldr.w	r4, [lr, #4]
 800381a:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 800381e:	f8ce 4004 	str.w	r4, [lr, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003822:	f8de 400c 	ldr.w	r4, [lr, #12]
 8003826:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 800382a:	f8ce 400c 	str.w	r4, [lr, #12]
 800382e:	e7dc      	b.n	80037ea <USB_HC_StartXfer+0x1c6>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8003830:	79cc      	ldrb	r4, [r1, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8003832:	2c01      	cmp	r4, #1
 8003834:	d1de      	bne.n	80037f4 <USB_HC_StartXfer+0x1d0>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8003836:	78cc      	ldrb	r4, [r1, #3]
 8003838:	2c01      	cmp	r4, #1
 800383a:	d1db      	bne.n	80037f4 <USB_HC_StartXfer+0x1d0>
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800383c:	f8de 4004 	ldr.w	r4, [lr, #4]
 8003840:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8003844:	f8ce 4004 	str.w	r4, [lr, #4]
 8003848:	e7d4      	b.n	80037f4 <USB_HC_StartXfer+0x1d0>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800384a:	f8de 4004 	ldr.w	r4, [lr, #4]
 800384e:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 8003852:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 8003856:	e78c      	b.n	8003772 <USB_HC_StartXfer+0x14e>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8003858:	f8de 4004 	ldr.w	r4, [lr, #4]
 800385c:	f044 040e 	orr.w	r4, r4, #14
 8003860:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 8003864:	e785      	b.n	8003772 <USB_HC_StartXfer+0x14e>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8003866:	f8de 4004 	ldr.w	r4, [lr, #4]
 800386a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800386e:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 8003872:	e77e      	b.n	8003772 <USB_HC_StartXfer+0x14e>
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8003874:	f8de 4004 	ldr.w	r4, [lr, #4]
 8003878:	f444 4440 	orr.w	r4, r4, #49152	@ 0xc000
 800387c:	f8ce 4004 	str.w	r4, [lr, #4]
          break;
 8003880:	e777      	b.n	8003772 <USB_HC_StartXfer+0x14e>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003882:	9c03      	ldr	r4, [sp, #12]
 8003884:	f424 4400 	bic.w	r4, r4, #32768	@ 0x8000
 8003888:	9403      	str	r4, [sp, #12]
 800388a:	e780      	b.n	800378e <USB_HC_StartXfer+0x16a>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800388c:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800388e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003890:	b292      	uxth	r2, r2
 8003892:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8003896:	4293      	cmp	r3, r2
 8003898:	d903      	bls.n	80038a2 <USB_HC_StartXfer+0x27e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800389a:	6983      	ldr	r3, [r0, #24]
 800389c:	f043 0320 	orr.w	r3, r3, #32
 80038a0:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	8c0b      	ldrh	r3, [r1, #32]
 80038a8:	784a      	ldrb	r2, [r1, #1]
 80038aa:	6989      	ldr	r1, [r1, #24]
 80038ac:	f7ff fc1b 	bl	80030e6 <USB_WritePacket>
}
 80038b0:	2000      	movs	r0, #0
 80038b2:	b004      	add	sp, #16
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	bf00      	nop
 80038b8:	40040000 	.word	0x40040000
 80038bc:	1ff80000 	.word	0x1ff80000
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80038c0:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80038c2:	692a      	ldr	r2, [r5, #16]
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d2e9      	bcs.n	80038a2 <USB_HC_StartXfer+0x27e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80038ce:	6983      	ldr	r3, [r0, #24]
 80038d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038d4:	6183      	str	r3, [r0, #24]
 80038d6:	e7e4      	b.n	80038a2 <USB_HC_StartXfer+0x27e>

080038d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80038d8:	b530      	push	{r4, r5, lr}
 80038da:	b083      	sub	sp, #12
 80038dc:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80038e2:	f7ff fbb2 	bl	800304a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038e6:	2110      	movs	r1, #16
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7ff fbb4 	bl	8003056 <USB_FlushTxFifo>
 80038ee:	4605      	mov	r5, r0
 80038f0:	b100      	cbz	r0, 80038f4 <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 80038f2:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038f4:	4620      	mov	r0, r4
 80038f6:	f7ff fbd3 	bl	80030a0 <USB_FlushRxFifo>
 80038fa:	b100      	cbz	r0, 80038fe <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 80038fc:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80038fe:	2200      	movs	r2, #0
 8003900:	e00a      	b.n	8003918 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 8003902:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8003906:	f8d1 3500 	ldr.w	r3, [r1, #1280]	@ 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800390a:	f023 2380 	bic.w	r3, r3, #2147516416	@ 0x80008000
 800390e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8003912:	f8c1 3500 	str.w	r3, [r1, #1280]	@ 0x500
  for (i = 0U; i <= 15U; i++)
 8003916:	3201      	adds	r2, #1
 8003918:	2a0f      	cmp	r2, #15
 800391a:	d9f2      	bls.n	8003902 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800391c:	2100      	movs	r1, #0
 800391e:	e000      	b.n	8003922 <USB_StopHost+0x4a>
 8003920:	3101      	adds	r1, #1
 8003922:	290f      	cmp	r1, #15
 8003924:	d816      	bhi.n	8003954 <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 8003926:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 800392a:	f500 62a0 	add.w	r2, r0, #1280	@ 0x500
 800392e:	f8d0 3500 	ldr.w	r3, [r0, #1280]	@ 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003932:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003936:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 800393a:	f8c0 3500 	str.w	r3, [r0, #1280]	@ 0x500

    do
    {
      count++;
 800393e:	9b01      	ldr	r3, [sp, #4]
 8003940:	3301      	adds	r3, #1
 8003942:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 8003944:	9b01      	ldr	r3, [sp, #4]
 8003946:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800394a:	d8e9      	bhi.n	8003920 <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	dbf5      	blt.n	800393e <USB_StopHost+0x66>
 8003952:	e7e5      	b.n	8003920 <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8003954:	f04f 33ff 	mov.w	r3, #4294967295
 8003958:	f8c4 3414 	str.w	r3, [r4, #1044]	@ 0x414
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800395c:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fb6d 	bl	800303e <USB_EnableGlobalInt>

  return ret;
}
 8003964:	4628      	mov	r0, r5
 8003966:	b003      	add	sp, #12
 8003968:	bd30      	pop	{r4, r5, pc}
	...

0800396c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800396c:	b510      	push	{r4, lr}
 800396e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003970:	4a0c      	ldr	r2, [pc, #48]	@ (80039a4 <_sbrk+0x38>)
 8003972:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003974:	480d      	ldr	r0, [pc, #52]	@ (80039ac <_sbrk+0x40>)
 8003976:	6800      	ldr	r0, [r0, #0]
 8003978:	b140      	cbz	r0, 800398c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800397a:	480c      	ldr	r0, [pc, #48]	@ (80039ac <_sbrk+0x40>)
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	4403      	add	r3, r0
 8003980:	1a52      	subs	r2, r2, r1
 8003982:	4293      	cmp	r3, r2
 8003984:	d806      	bhi.n	8003994 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003986:	4a09      	ldr	r2, [pc, #36]	@ (80039ac <_sbrk+0x40>)
 8003988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800398a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800398c:	4807      	ldr	r0, [pc, #28]	@ (80039ac <_sbrk+0x40>)
 800398e:	4c08      	ldr	r4, [pc, #32]	@ (80039b0 <_sbrk+0x44>)
 8003990:	6004      	str	r4, [r0, #0]
 8003992:	e7f2      	b.n	800397a <_sbrk+0xe>
    errno = ENOMEM;
 8003994:	f001 fc4e 	bl	8005234 <__errno>
 8003998:	230c      	movs	r3, #12
 800399a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800399c:	f04f 30ff 	mov.w	r0, #4294967295
 80039a0:	e7f3      	b.n	800398a <_sbrk+0x1e>
 80039a2:	bf00      	nop
 80039a4:	20020000 	.word	0x20020000
 80039a8:	00000400 	.word	0x00000400
 80039ac:	20000190 	.word	0x20000190
 80039b0:	20000a98 	.word	0x20000a98

080039b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039b4:	4a03      	ldr	r2, [pc, #12]	@ (80039c4 <SystemInit+0x10>)
 80039b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80039ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80039c8:	2904      	cmp	r1, #4
 80039ca:	d00c      	beq.n	80039e6 <USBH_UserProcess+0x1e>
 80039cc:	2905      	cmp	r1, #5
 80039ce:	d002      	beq.n	80039d6 <USBH_UserProcess+0xe>
 80039d0:	2902      	cmp	r1, #2
 80039d2:	d004      	beq.n	80039de <USBH_UserProcess+0x16>
 80039d4:	4770      	bx	lr
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80039d6:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <USBH_UserProcess+0x28>)
 80039d8:	2203      	movs	r2, #3
 80039da:	701a      	strb	r2, [r3, #0]
  break;
 80039dc:	4770      	bx	lr

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80039de:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <USBH_UserProcess+0x28>)
 80039e0:	2202      	movs	r2, #2
 80039e2:	701a      	strb	r2, [r3, #0]
  break;
 80039e4:	4770      	bx	lr

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80039e6:	4b02      	ldr	r3, [pc, #8]	@ (80039f0 <USBH_UserProcess+0x28>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20000194 	.word	0x20000194

080039f4 <MX_USB_HOST_Init>:
{
 80039f4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80039f6:	2201      	movs	r2, #1
 80039f8:	490b      	ldr	r1, [pc, #44]	@ (8003a28 <MX_USB_HOST_Init+0x34>)
 80039fa:	480c      	ldr	r0, [pc, #48]	@ (8003a2c <MX_USB_HOST_Init+0x38>)
 80039fc:	f000 fcd5 	bl	80043aa <USBH_Init>
 8003a00:	b948      	cbnz	r0, 8003a16 <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8003a02:	490b      	ldr	r1, [pc, #44]	@ (8003a30 <MX_USB_HOST_Init+0x3c>)
 8003a04:	4809      	ldr	r0, [pc, #36]	@ (8003a2c <MX_USB_HOST_Init+0x38>)
 8003a06:	f000 fcef 	bl	80043e8 <USBH_RegisterClass>
 8003a0a:	b938      	cbnz	r0, 8003a1c <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003a0c:	4807      	ldr	r0, [pc, #28]	@ (8003a2c <MX_USB_HOST_Init+0x38>)
 8003a0e:	f000 fd30 	bl	8004472 <USBH_Start>
 8003a12:	b930      	cbnz	r0, 8003a22 <MX_USB_HOST_Init+0x2e>
}
 8003a14:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a16:	f7fc fe31 	bl	800067c <Error_Handler>
 8003a1a:	e7f2      	b.n	8003a02 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8003a1c:	f7fc fe2e 	bl	800067c <Error_Handler>
 8003a20:	e7f4      	b.n	8003a0c <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8003a22:	f7fc fe2b 	bl	800067c <Error_Handler>
}
 8003a26:	e7f5      	b.n	8003a14 <MX_USB_HOST_Init+0x20>
 8003a28:	080039c9 	.word	0x080039c9
 8003a2c:	20000198 	.word	0x20000198
 8003a30:	2000000c 	.word	0x2000000c

08003a34 <MX_USB_HOST_Process>:
{
 8003a34:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 8003a36:	4802      	ldr	r0, [pc, #8]	@ (8003a40 <MX_USB_HOST_Process+0xc>)
 8003a38:	f000 fd25 	bl	8004486 <USBH_Process>
}
 8003a3c:	bd08      	pop	{r3, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000198 	.word	0x20000198

08003a44 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8003a44:	2000      	movs	r0, #0
 8003a46:	4770      	bx	lr

08003a48 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8003a48:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8003a4a:	2221      	movs	r2, #33	@ 0x21
 8003a4c:	7402      	strb	r2, [r0, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8003a4e:	2220      	movs	r2, #32
 8003a50:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8003a52:	2200      	movs	r2, #0
 8003a54:	8242      	strh	r2, [r0, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8003a56:	8282      	strh	r2, [r0, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003a58:	2207      	movs	r2, #7
 8003a5a:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003a5c:	f001 f95f 	bl	8004d1e <USBH_CtlReq>
}
 8003a60:	bd08      	pop	{r3, pc}

08003a62 <GetLineCoding>:
{
 8003a62:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003a64:	22a1      	movs	r2, #161	@ 0xa1
 8003a66:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003a68:	2221      	movs	r2, #33	@ 0x21
 8003a6a:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003a70:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003a72:	2207      	movs	r2, #7
 8003a74:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003a76:	f001 f952 	bl	8004d1e <USBH_CtlReq>
}
 8003a7a:	bd08      	pop	{r3, pc}

08003a7c <USBH_CDC_ClassRequest>:
{
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a80:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003a84:	69d9      	ldr	r1, [r3, #28]
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8003a86:	3140      	adds	r1, #64	@ 0x40
 8003a88:	f7ff ffeb 	bl	8003a62 <GetLineCoding>
  if (status == USBH_OK)
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	b920      	cbnz	r0, 8003a9a <USBH_CDC_ClassRequest+0x1e>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003a90:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 8003a94:	2102      	movs	r1, #2
 8003a96:	4620      	mov	r0, r4
 8003a98:	4798      	blx	r3
}
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}

08003a9e <USBH_CDC_InterfaceDeInit>:
{
 8003a9e:	b538      	push	{r3, r4, r5, lr}
 8003aa0:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003aa2:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003aa6:	69dd      	ldr	r5, [r3, #28]
  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8003aa8:	7829      	ldrb	r1, [r5, #0]
 8003aaa:	b979      	cbnz	r1, 8003acc <USBH_CDC_InterfaceDeInit+0x2e>
  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8003aac:	7b29      	ldrb	r1, [r5, #12]
 8003aae:	b9b1      	cbnz	r1, 8003ade <USBH_CDC_InterfaceDeInit+0x40>
  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8003ab0:	7b69      	ldrb	r1, [r5, #13]
 8003ab2:	b9f1      	cbnz	r1, 8003af2 <USBH_CDC_InterfaceDeInit+0x54>
  if ((phost->pActiveClass->pData) != NULL)
 8003ab4:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8003ab8:	69d8      	ldr	r0, [r3, #28]
 8003aba:	b128      	cbz	r0, 8003ac8 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free(phost->pActiveClass->pData);
 8003abc:	f001 faec 	bl	8005098 <free>
    phost->pActiveClass->pData = 0U;
 8003ac0:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	61da      	str	r2, [r3, #28]
}
 8003ac8:	2000      	movs	r0, #0
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003acc:	f001 fa83 	bl	8004fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003ad0:	7829      	ldrb	r1, [r5, #0]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f001 fa97 	bl	8005006 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003ad8:	2300      	movs	r3, #0
 8003ada:	702b      	strb	r3, [r5, #0]
 8003adc:	e7e6      	b.n	8003aac <USBH_CDC_InterfaceDeInit+0xe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f001 fa79 	bl	8004fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8003ae4:	7b29      	ldrb	r1, [r5, #12]
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f001 fa8d 	bl	8005006 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003aec:	2300      	movs	r3, #0
 8003aee:	732b      	strb	r3, [r5, #12]
 8003af0:	e7de      	b.n	8003ab0 <USBH_CDC_InterfaceDeInit+0x12>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f001 fa6f 	bl	8004fd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003af8:	7b69      	ldrb	r1, [r5, #13]
 8003afa:	4620      	mov	r0, r4
 8003afc:	f001 fa83 	bl	8005006 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003b00:	2300      	movs	r3, #0
 8003b02:	736b      	strb	r3, [r5, #13]
 8003b04:	e7d6      	b.n	8003ab4 <USBH_CDC_InterfaceDeInit+0x16>

08003b06 <USBH_CDC_InterfaceInit>:
{
 8003b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4611      	mov	r1, r2
 8003b12:	f000 fc84 	bl	800441e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8003b16:	2801      	cmp	r0, #1
 8003b18:	f200 80ae 	bhi.w	8003c78 <USBH_CDC_InterfaceInit+0x172>
 8003b1c:	4606      	mov	r6, r0
  status = USBH_SelectInterface(phost, interface);
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4620      	mov	r0, r4
 8003b22:	f000 fc72 	bl	800440a <USBH_SelectInterface>
  if (status != USBH_OK)
 8003b26:	4607      	mov	r7, r0
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	f040 80a9 	bne.w	8003c80 <USBH_CDC_InterfaceInit+0x17a>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8003b2e:	f8d4 537c 	ldr.w	r5, [r4, #892]	@ 0x37c
 8003b32:	2050      	movs	r0, #80	@ 0x50
 8003b34:	f001 faa8 	bl	8005088 <malloc>
 8003b38:	61e8      	str	r0, [r5, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003b3a:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8003b3e:	69dd      	ldr	r5, [r3, #28]
  if (CDC_Handle == NULL)
 8003b40:	2d00      	cmp	r5, #0
 8003b42:	f000 809f 	beq.w	8003c84 <USBH_CDC_InterfaceInit+0x17e>
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8003b46:	2250      	movs	r2, #80	@ 0x50
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f001 fb5a 	bl	8005204 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003b50:	231a      	movs	r3, #26
 8003b52:	fb03 4306 	mla	r3, r3, r6, r4
 8003b56:	f893 234e 	ldrb.w	r2, [r3, #846]	@ 0x34e
 8003b5a:	f993 334e 	ldrsb.w	r3, [r3, #846]	@ 0x34e
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	db72      	blt.n	8003c48 <USBH_CDC_InterfaceInit+0x142>
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003b62:	7869      	ldrb	r1, [r5, #1]
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fa3b 	bl	8004fe0 <USBH_AllocPipe>
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	7028      	strb	r0, [r5, #0]
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8003b6e:	786a      	ldrb	r2, [r5, #1]
 8003b70:	896b      	ldrh	r3, [r5, #10]
 8003b72:	9302      	str	r3, [sp, #8]
 8003b74:	2303      	movs	r3, #3
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003b82:	4620      	mov	r0, r4
 8003b84:	f001 fa17 	bl	8004fb6 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8003b88:	2200      	movs	r2, #0
 8003b8a:	7829      	ldrb	r1, [r5, #0]
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 fa11 	bl	8003fb4 <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8003b92:	2300      	movs	r3, #0
 8003b94:	461a      	mov	r2, r3
 8003b96:	210a      	movs	r1, #10
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f000 fc40 	bl	800441e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8003b9e:	2801      	cmp	r0, #1
 8003ba0:	d872      	bhi.n	8003c88 <USBH_CDC_InterfaceInit+0x182>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003ba2:	231a      	movs	r3, #26
 8003ba4:	fb03 4300 	mla	r3, r3, r0, r4
 8003ba8:	f893 234e 	ldrb.w	r2, [r3, #846]	@ 0x34e
 8003bac:	f993 334e 	ldrsb.w	r3, [r3, #846]	@ 0x34e
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db51      	blt.n	8003c58 <USBH_CDC_InterfaceInit+0x152>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003bb4:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003bb6:	231a      	movs	r3, #26
 8003bb8:	fb03 4300 	mla	r3, r3, r0, r4
 8003bbc:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 8003bc0:	832b      	strh	r3, [r5, #24]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8003bc2:	231a      	movs	r3, #26
 8003bc4:	fb03 4300 	mla	r3, r3, r0, r4
 8003bc8:	f893 2356 	ldrb.w	r2, [r3, #854]	@ 0x356
 8003bcc:	f993 3356 	ldrsb.w	r3, [r3, #854]	@ 0x356
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db49      	blt.n	8003c68 <USBH_CDC_InterfaceInit+0x162>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003bd4:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003bd6:	231a      	movs	r3, #26
 8003bd8:	fb03 4000 	mla	r0, r3, r0, r4
 8003bdc:	f8b0 3358 	ldrh.w	r3, [r0, #856]	@ 0x358
 8003be0:	832b      	strh	r3, [r5, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003be2:	7ba9      	ldrb	r1, [r5, #14]
 8003be4:	4620      	mov	r0, r4
 8003be6:	f001 f9fb 	bl	8004fe0 <USBH_AllocPipe>
 8003bea:	7368      	strb	r0, [r5, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003bec:	7be9      	ldrb	r1, [r5, #15]
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f001 f9f6 	bl	8004fe0 <USBH_AllocPipe>
 8003bf4:	7328      	strb	r0, [r5, #12]
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8003bf6:	7baa      	ldrb	r2, [r5, #14]
 8003bf8:	7b69      	ldrb	r1, [r5, #13]
 8003bfa:	8b2b      	ldrh	r3, [r5, #24]
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	2602      	movs	r6, #2
 8003c00:	9601      	str	r6, [sp, #4]
 8003c02:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f001 f9d2 	bl	8004fb6 <USBH_OpenPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8003c12:	7bea      	ldrb	r2, [r5, #15]
 8003c14:	7b29      	ldrb	r1, [r5, #12]
 8003c16:	8b6b      	ldrh	r3, [r5, #26]
 8003c18:	9302      	str	r3, [sp, #8]
 8003c1a:	9601      	str	r6, [sp, #4]
 8003c1c:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8003c26:	4620      	mov	r0, r4
 8003c28:	f001 f9c5 	bl	8004fb6 <USBH_OpenPipe>
  CDC_Handle->state = CDC_IDLE_STATE;
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	f885 604c 	strb.w	r6, [r5, #76]	@ 0x4c
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003c32:	4632      	mov	r2, r6
 8003c34:	7b69      	ldrb	r1, [r5, #13]
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f9bc 	bl	8003fb4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	7b29      	ldrb	r1, [r5, #12]
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 f9b7 	bl	8003fb4 <USBH_LL_SetToggle>
  return USBH_OK;
 8003c46:	e018      	b.n	8003c7a <USBH_CDC_InterfaceInit+0x174>
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c48:	706a      	strb	r2, [r5, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c4a:	231a      	movs	r3, #26
 8003c4c:	fb03 4606 	mla	r6, r3, r6, r4
 8003c50:	f8b6 3350 	ldrh.w	r3, [r6, #848]	@ 0x350
 8003c54:	816b      	strh	r3, [r5, #10]
 8003c56:	e784      	b.n	8003b62 <USBH_CDC_InterfaceInit+0x5c>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c58:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c5a:	231a      	movs	r3, #26
 8003c5c:	fb03 4300 	mla	r3, r3, r0, r4
 8003c60:	f8b3 3350 	ldrh.w	r3, [r3, #848]	@ 0x350
 8003c64:	836b      	strh	r3, [r5, #26]
 8003c66:	e7ac      	b.n	8003bc2 <USBH_CDC_InterfaceInit+0xbc>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003c68:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003c6a:	231a      	movs	r3, #26
 8003c6c:	fb03 4300 	mla	r3, r3, r0, r4
 8003c70:	f8b3 3358 	ldrh.w	r3, [r3, #856]	@ 0x358
 8003c74:	836b      	strh	r3, [r5, #26]
 8003c76:	e7b4      	b.n	8003be2 <USBH_CDC_InterfaceInit+0xdc>
    return USBH_FAIL;
 8003c78:	2702      	movs	r7, #2
}
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	b005      	add	sp, #20
 8003c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8003c80:	2702      	movs	r7, #2
 8003c82:	e7fa      	b.n	8003c7a <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8003c84:	2702      	movs	r7, #2
 8003c86:	e7f8      	b.n	8003c7a <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8003c88:	2702      	movs	r7, #2
 8003c8a:	e7f6      	b.n	8003c7a <USBH_CDC_InterfaceInit+0x174>

08003c8c <USBH_CDC_TransmitCallback>:
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003c8c:	4770      	bx	lr

08003c8e <CDC_ProcessTransmission>:
{
 8003c8e:	b530      	push	{r4, r5, lr}
 8003c90:	b083      	sub	sp, #12
 8003c92:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003c94:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003c98:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->data_tx_state)
 8003c9a:	f894 304d 	ldrb.w	r3, [r4, #77]	@ 0x4d
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d00c      	beq.n	8003cbc <CDC_ProcessTransmission+0x2e>
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d118      	bne.n	8003cd8 <CDC_ProcessTransmission+0x4a>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8003ca6:	7b61      	ldrb	r1, [r4, #13]
 8003ca8:	f000 f970 	bl	8003f8c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003cac:	2801      	cmp	r0, #1
 8003cae:	d01e      	beq.n	8003cee <CDC_ProcessTransmission+0x60>
        if (URB_Status == USBH_URB_NOTREADY)
 8003cb0:	2802      	cmp	r0, #2
 8003cb2:	d111      	bne.n	8003cd8 <CDC_ProcessTransmission+0x4a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
}
 8003cba:	e00d      	b.n	8003cd8 <CDC_ProcessTransmission+0x4a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003cbc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003cbe:	8b22      	ldrh	r2, [r4, #24]
 8003cc0:	4290      	cmp	r0, r2
 8003cc2:	d90b      	bls.n	8003cdc <CDC_ProcessTransmission+0x4e>
        (void)USBH_BulkSendData(phost,
 8003cc4:	7b63      	ldrb	r3, [r4, #13]
 8003cc6:	69e1      	ldr	r1, [r4, #28]
 8003cc8:	2001      	movs	r0, #1
 8003cca:	9000      	str	r0, [sp, #0]
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f001 f939 	bl	8004f44 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
}
 8003cd8:	b003      	add	sp, #12
 8003cda:	bd30      	pop	{r4, r5, pc}
        (void)USBH_BulkSendData(phost,
 8003cdc:	7b63      	ldrb	r3, [r4, #13]
 8003cde:	69e1      	ldr	r1, [r4, #28]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	9200      	str	r2, [sp, #0]
 8003ce4:	b282      	uxth	r2, r0
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f001 f92c 	bl	8004f44 <USBH_BulkSendData>
 8003cec:	e7f1      	b.n	8003cd2 <CDC_ProcessTransmission+0x44>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003cee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003cf0:	8b22      	ldrh	r2, [r4, #24]
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d90a      	bls.n	8003d0c <CDC_ProcessTransmission+0x7e>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	6263      	str	r3, [r4, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003cfa:	69e3      	ldr	r3, [r4, #28]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	61e3      	str	r3, [r4, #28]
        if (CDC_Handle->TxDataLength > 0U)
 8003d00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003d02:	b133      	cbz	r3, 8003d12 <CDC_ProcessTransmission+0x84>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
 8003d0a:	e7e5      	b.n	8003cd8 <CDC_ProcessTransmission+0x4a>
          CDC_Handle->TxDataLength = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d10:	e7f6      	b.n	8003d00 <CDC_ProcessTransmission+0x72>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff ffb7 	bl	8003c8c <USBH_CDC_TransmitCallback>
 8003d1e:	e7db      	b.n	8003cd8 <CDC_ProcessTransmission+0x4a>

08003d20 <USBH_CDC_ReceiveCallback>:
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003d20:	4770      	bx	lr

08003d22 <CDC_ProcessReception>:
{
 8003d22:	b538      	push	{r3, r4, r5, lr}
 8003d24:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003d26:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003d2a:	69dd      	ldr	r5, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 8003d2c:	f895 304e 	ldrb.w	r3, [r5, #78]	@ 0x4e
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d017      	beq.n	8003d64 <CDC_ProcessReception+0x42>
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11d      	bne.n	8003d74 <CDC_ProcessReception+0x52>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8003d38:	7b29      	ldrb	r1, [r5, #12]
 8003d3a:	f000 f927 	bl	8003f8c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003d3e:	2801      	cmp	r0, #1
 8003d40:	d118      	bne.n	8003d74 <CDC_ProcessReception+0x52>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003d42:	7b29      	ldrb	r1, [r5, #12]
 8003d44:	4620      	mov	r0, r4
 8003d46:	f000 f91b 	bl	8003f80 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8003d4a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8003d4c:	4283      	cmp	r3, r0
 8003d4e:	d002      	beq.n	8003d56 <CDC_ProcessReception+0x34>
 8003d50:	8b6a      	ldrh	r2, [r5, #26]
 8003d52:	4282      	cmp	r2, r0
 8003d54:	d00f      	beq.n	8003d76 <CDC_ProcessReception+0x54>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f885 304e 	strb.w	r3, [r5, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7ff ffdf 	bl	8003d20 <USBH_CDC_ReceiveCallback>
}
 8003d62:	e007      	b.n	8003d74 <CDC_ProcessReception+0x52>
      (void)USBH_BulkReceiveData(phost,
 8003d64:	7b2b      	ldrb	r3, [r5, #12]
 8003d66:	8b6a      	ldrh	r2, [r5, #26]
 8003d68:	6a29      	ldr	r1, [r5, #32]
 8003d6a:	f001 f901 	bl	8004f70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	f885 304e 	strb.w	r3, [r5, #78]	@ 0x4e
}
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
          CDC_Handle->RxDataLength -= length;
 8003d76:	1a1b      	subs	r3, r3, r0
 8003d78:	62ab      	str	r3, [r5, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8003d7a:	6a2b      	ldr	r3, [r5, #32]
 8003d7c:	4403      	add	r3, r0
 8003d7e:	622b      	str	r3, [r5, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003d80:	2303      	movs	r3, #3
 8003d82:	f885 304e 	strb.w	r3, [r5, #78]	@ 0x4e
 8003d86:	e7f5      	b.n	8003d74 <CDC_ProcessReception+0x52>

08003d88 <USBH_CDC_LineCodingChanged>:
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003d88:	4770      	bx	lr

08003d8a <USBH_CDC_Process>:
{
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003d8e:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 8003d92:	69de      	ldr	r6, [r3, #28]
  switch (CDC_Handle->state)
 8003d94:	f896 504c 	ldrb.w	r5, [r6, #76]	@ 0x4c
 8003d98:	2d04      	cmp	r5, #4
 8003d9a:	d804      	bhi.n	8003da6 <USBH_CDC_Process+0x1c>
 8003d9c:	e8df f005 	tbb	[pc, r5]
 8003da0:	3513053b 	.word	0x3513053b
 8003da4:	3d          	.byte	0x3d
 8003da5:	00          	.byte	0x00
 8003da6:	2501      	movs	r5, #1
 8003da8:	e035      	b.n	8003e16 <USBH_CDC_Process+0x8c>
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8003daa:	6cb1      	ldr	r1, [r6, #72]	@ 0x48
 8003dac:	f7ff fe4c 	bl	8003a48 <SetLineCoding>
      if (req_status == USBH_OK)
 8003db0:	b918      	cbnz	r0, 8003dba <USBH_CDC_Process+0x30>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8003db2:	2302      	movs	r3, #2
 8003db4:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
 8003db8:	e02d      	b.n	8003e16 <USBH_CDC_Process+0x8c>
        if (req_status != USBH_BUSY)
 8003dba:	2801      	cmp	r0, #1
 8003dbc:	d036      	beq.n	8003e2c <USBH_CDC_Process+0xa2>
          CDC_Handle->state = CDC_ERROR_STATE;
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
 8003dc4:	e027      	b.n	8003e16 <USBH_CDC_Process+0x8c>
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8003dc6:	f106 0140 	add.w	r1, r6, #64	@ 0x40
 8003dca:	f7ff fe4a 	bl	8003a62 <GetLineCoding>
      if (req_status == USBH_OK)
 8003dce:	4605      	mov	r5, r0
 8003dd0:	b9a0      	cbnz	r0, 8003dfc <USBH_CDC_Process+0x72>
        CDC_Handle->state = CDC_IDLE_STATE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003dd8:	6c73      	ldr	r3, [r6, #68]	@ 0x44
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003dda:	6cb2      	ldr	r2, [r6, #72]	@ 0x48
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003ddc:	6851      	ldr	r1, [r2, #4]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003dde:	404b      	eors	r3, r1
 8003de0:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 8003de4:	d124      	bne.n	8003e30 <USBH_CDC_Process+0xa6>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8003de6:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8003de8:	6813      	ldr	r3, [r2, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003dea:	4299      	cmp	r1, r3
 8003dec:	d001      	beq.n	8003df2 <USBH_CDC_Process+0x68>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003dee:	2501      	movs	r5, #1
 8003df0:	e011      	b.n	8003e16 <USBH_CDC_Process+0x8c>
          USBH_CDC_LineCodingChanged(phost);
 8003df2:	4620      	mov	r0, r4
 8003df4:	f7ff ffc8 	bl	8003d88 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003df8:	2501      	movs	r5, #1
 8003dfa:	e00c      	b.n	8003e16 <USBH_CDC_Process+0x8c>
        if (req_status != USBH_BUSY)
 8003dfc:	2801      	cmp	r0, #1
 8003dfe:	d00a      	beq.n	8003e16 <USBH_CDC_Process+0x8c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8003e00:	2304      	movs	r3, #4
 8003e02:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003e06:	2501      	movs	r5, #1
 8003e08:	e005      	b.n	8003e16 <USBH_CDC_Process+0x8c>
      CDC_ProcessTransmission(phost);
 8003e0a:	f7ff ff40 	bl	8003c8e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff ff87 	bl	8003d22 <CDC_ProcessReception>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003e14:	2501      	movs	r5, #1
}
 8003e16:	4628      	mov	r0, r5
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
      req_status = USBH_ClrFeature(phost, 0x00U);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f001 f849 	bl	8004eb2 <USBH_ClrFeature>
      if (req_status == USBH_OK)
 8003e20:	b940      	cbnz	r0, 8003e34 <USBH_CDC_Process+0xaa>
        CDC_Handle->state = CDC_IDLE_STATE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f886 304c 	strb.w	r3, [r6, #76]	@ 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003e28:	2501      	movs	r5, #1
 8003e2a:	e7f4      	b.n	8003e16 <USBH_CDC_Process+0x8c>
 8003e2c:	4605      	mov	r5, r0
 8003e2e:	e7f2      	b.n	8003e16 <USBH_CDC_Process+0x8c>
 8003e30:	2501      	movs	r5, #1
 8003e32:	e7f0      	b.n	8003e16 <USBH_CDC_Process+0x8c>
 8003e34:	2501      	movs	r5, #1
 8003e36:	e7ee      	b.n	8003e16 <USBH_CDC_Process+0x8c>

08003e38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	9304      	str	r3, [sp, #16]
 8003e42:	9305      	str	r3, [sp, #20]
 8003e44:	9306      	str	r3, [sp, #24]
 8003e46:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8003e48:	6803      	ldr	r3, [r0, #0]
 8003e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e4e:	d001      	beq.n	8003e54 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003e50:	b008      	add	sp, #32
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e54:	2500      	movs	r5, #0
 8003e56:	9501      	str	r5, [sp, #4]
 8003e58:	4c1a      	ldr	r4, [pc, #104]	@ (8003ec4 <HAL_HCD_MspInit+0x8c>)
 8003e5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e70:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003e72:	4e15      	ldr	r6, [pc, #84]	@ (8003ec8 <HAL_HCD_MspInit+0x90>)
 8003e74:	a903      	add	r1, sp, #12
 8003e76:	4630      	mov	r0, r6
 8003e78:	f7fc fdac 	bl	80009d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003e7c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003e80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e8a:	230a      	movs	r3, #10
 8003e8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	a903      	add	r1, sp, #12
 8003e90:	4630      	mov	r0, r6
 8003e92:	f7fc fd9f 	bl	80009d4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e9e:	9502      	str	r5, [sp, #8]
 8003ea0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ea6:	6463      	str	r3, [r4, #68]	@ 0x44
 8003ea8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eae:	9302      	str	r3, [sp, #8]
 8003eb0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	2043      	movs	r0, #67	@ 0x43
 8003eb8:	f7fc fd64 	bl	8000984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003ebc:	2043      	movs	r0, #67	@ 0x43
 8003ebe:	f7fc fd71 	bl	80009a4 <HAL_NVIC_EnableIRQ>
}
 8003ec2:	e7c5      	b.n	8003e50 <HAL_HCD_MspInit+0x18>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000

08003ecc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ecc:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8003ece:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8003ed2:	f000 fc23 	bl	800471c <USBH_LL_IncTimer>
}
 8003ed6:	bd08      	pop	{r3, pc}

08003ed8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ed8:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8003eda:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8003ede:	f000 fc31 	bl	8004744 <USBH_LL_Connect>
}
 8003ee2:	bd08      	pop	{r3, pc}

08003ee4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ee4:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8003ee6:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8003eea:	f000 fc35 	bl	8004758 <USBH_LL_Disconnect>
}
 8003eee:	bd08      	pop	{r3, pc}

08003ef0 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ef2:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8003ef4:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8003ef8:	f000 fc19 	bl	800472e <USBH_LL_PortEnabled>
}
 8003efc:	bd08      	pop	{r3, pc}

08003efe <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003efe:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8003f00:	f8d0 03dc 	ldr.w	r0, [r0, #988]	@ 0x3dc
 8003f04:	f000 fc17 	bl	8004736 <USBH_LL_PortDisabled>
}
 8003f08:	bd08      	pop	{r3, pc}
	...

08003f0c <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8003f0c:	f890 33cc 	ldrb.w	r3, [r0, #972]	@ 0x3cc
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8003f14:	2000      	movs	r0, #0
 8003f16:	4770      	bx	lr
{
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8003f1c:	480f      	ldr	r0, [pc, #60]	@ (8003f5c <USBH_LL_Init+0x50>)
 8003f1e:	f8c0 43dc 	str.w	r4, [r0, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8003f22:	f8c4 03d0 	str.w	r0, [r4, #976]	@ 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003f26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f2a:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	7143      	strb	r3, [r0, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8003f30:	2301      	movs	r3, #1
 8003f32:	71c3      	strb	r3, [r0, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003f34:	2300      	movs	r3, #0
 8003f36:	7183      	strb	r3, [r0, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003f38:	2202      	movs	r2, #2
 8003f3a:	7242      	strb	r2, [r0, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003f3c:	7283      	strb	r3, [r0, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003f3e:	f7fc fead 	bl	8000c9c <HAL_HCD_Init>
 8003f42:	b940      	cbnz	r0, 8003f56 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8003f44:	4805      	ldr	r0, [pc, #20]	@ (8003f5c <USBH_LL_Init+0x50>)
 8003f46:	f7fd fe3a 	bl	8001bbe <HAL_HCD_GetCurrentFrame>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 fbe2 	bl	8004716 <USBH_LL_SetTimer>
}
 8003f52:	2000      	movs	r0, #0
 8003f54:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003f56:	f7fc fb91 	bl	800067c <Error_Handler>
 8003f5a:	e7f3      	b.n	8003f44 <USBH_LL_Init+0x38>
 8003f5c:	20000570 	.word	0x20000570

08003f60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8003f60:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8003f62:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8003f66:	f7fd fe2f 	bl	8001bc8 <HAL_HCD_GetCurrentSpeed>
 8003f6a:	2801      	cmp	r0, #1
 8003f6c:	d004      	beq.n	8003f78 <USBH_LL_GetSpeed+0x18>
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d004      	beq.n	8003f7c <USBH_LL_GetSpeed+0x1c>
 8003f72:	b120      	cbz	r0, 8003f7e <USBH_LL_GetSpeed+0x1e>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8003f74:	2001      	movs	r0, #1
 8003f76:	e002      	b.n	8003f7e <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_FULL;
 8003f78:	2001      	movs	r0, #1
 8003f7a:	e000      	b.n	8003f7e <USBH_LL_GetSpeed+0x1e>
    speed = USBH_SPEED_LOW;
 8003f7c:	2002      	movs	r0, #2
    break;
  }
  return  speed;
}
 8003f7e:	bd08      	pop	{r3, pc}

08003f80 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003f80:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8003f82:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8003f86:	f7fd fe14 	bl	8001bb2 <HAL_HCD_HC_GetXferCount>
}
 8003f8a:	bd08      	pop	{r3, pc}

08003f8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003f8c:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003f8e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8003f92:	f7fd fe07 	bl	8001ba4 <HAL_HCD_HC_GetURBState>
}
 8003f96:	bd08      	pop	{r3, pc}

08003f98 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8003f98:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8003f9a:	f890 33cc 	ldrb.w	r3, [r0, #972]	@ 0x3cc
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d004      	beq.n	8003fac <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8003fa2:	20c8      	movs	r0, #200	@ 0xc8
 8003fa4:	f7fc fc86 	bl	80008b4 <HAL_Delay>
  return USBH_OK;
}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8003fac:	4608      	mov	r0, r1
 8003fae:	f001 f835 	bl	800501c <MX_DriverVbusFS>
 8003fb2:	e7f6      	b.n	8003fa2 <USBH_LL_DriverVBUS+0xa>

08003fb4 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8003fb4:	f8d0 33d0 	ldr.w	r3, [r0, #976]	@ 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8003fb8:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
 8003fbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003fc0:	7dc0      	ldrb	r0, [r0, #23]
 8003fc2:	b138      	cbz	r0, 8003fd4 <USBH_LL_SetToggle+0x20>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8003fc4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003fc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8003fd4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8003fd8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fe0:	e7f6      	b.n	8003fd0 <USBH_LL_SetToggle+0x1c>

08003fe2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8003fe2:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8003fe4:	f7fc fc66 	bl	80008b4 <HAL_Delay>
}
 8003fe8:	bd08      	pop	{r3, pc}

08003fea <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8003fea:	2802      	cmp	r0, #2
 8003fec:	d805      	bhi.n	8003ffa <USBH_Get_USB_Status+0x10>
 8003fee:	e8df f000 	tbb	[pc, r0]
 8003ff2:	0405      	.short	0x0405
 8003ff4:	02          	.byte	0x02
 8003ff5:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003ff6:	2001      	movs	r0, #1
    break;
 8003ff8:	4770      	bx	lr
      usb_status = USBH_FAIL;
 8003ffa:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8003ffc:	4770      	bx	lr

08003ffe <USBH_LL_Start>:
{
 8003ffe:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8004000:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8004004:	f7fd fda2 	bl	8001b4c <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004008:	f7ff ffef 	bl	8003fea <USBH_Get_USB_Status>
}
 800400c:	bd08      	pop	{r3, pc}

0800400e <USBH_LL_Stop>:
{
 800400e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8004010:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8004014:	f7fd fdaf 	bl	8001b76 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004018:	f7ff ffe7 	bl	8003fea <USBH_Get_USB_Status>
}
 800401c:	bd08      	pop	{r3, pc}

0800401e <USBH_LL_ResetPort>:
{
 800401e:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004020:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8004024:	f7fd fdb9 	bl	8001b9a <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004028:	f7ff ffdf 	bl	8003fea <USBH_Get_USB_Status>
}
 800402c:	bd08      	pop	{r3, pc}

0800402e <USBH_LL_OpenPipe>:
{
 800402e:	b510      	push	{r4, lr}
 8004030:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004032:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 8004036:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800403a:	9402      	str	r4, [sp, #8]
 800403c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004040:	9401      	str	r4, [sp, #4]
 8004042:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004046:	9400      	str	r4, [sp, #0]
 8004048:	f7fd fdcf 	bl	8001bea <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 800404c:	f7ff ffcd 	bl	8003fea <USBH_Get_USB_Status>
}
 8004050:	b004      	add	sp, #16
 8004052:	bd10      	pop	{r4, pc}

08004054 <USBH_LL_ClosePipe>:
{
 8004054:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004056:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 800405a:	f7fc fe0d 	bl	8000c78 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 800405e:	f7ff ffc4 	bl	8003fea <USBH_Get_USB_Status>
}
 8004062:	bd08      	pop	{r3, pc}

08004064 <USBH_LL_SubmitURB>:
{
 8004064:	b510      	push	{r4, lr}
 8004066:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004068:	f8d0 03d0 	ldr.w	r0, [r0, #976]	@ 0x3d0
 800406c:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 8004070:	9403      	str	r4, [sp, #12]
 8004072:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004076:	9402      	str	r4, [sp, #8]
 8004078:	9c07      	ldr	r4, [sp, #28]
 800407a:	9401      	str	r4, [sp, #4]
 800407c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004080:	9400      	str	r4, [sp, #0]
 8004082:	f7fc fe52 	bl	8000d2a <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004086:	f7ff ffb0 	bl	8003fea <USBH_Get_USB_Status>
}
 800408a:	b004      	add	sp, #16
 800408c:	bd10      	pop	{r4, pc}

0800408e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800408e:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004090:	7803      	ldrb	r3, [r0, #0]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b0b      	cmp	r3, #11
 8004096:	d000      	beq.n	800409a <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8004098:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800409a:	f8d0 337c 	ldr.w	r3, [r0, #892]	@ 0x37c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0fa      	beq.n	8004098 <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	4798      	blx	r3
}
 80040a6:	e7f7      	b.n	8004098 <USBH_HandleSof+0xa>

080040a8 <DeInitStateMachine>:
{
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4604      	mov	r4, r0
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80040ac:	2300      	movs	r3, #0
 80040ae:	e006      	b.n	80040be <DeInitStateMachine+0x16>
    phost->Pipes[i] = 0U;
 80040b0:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 80040b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80040b8:	2100      	movs	r1, #0
 80040ba:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80040bc:	3301      	adds	r3, #1
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d9f6      	bls.n	80040b0 <DeInitStateMachine+0x8>
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80040c2:	2300      	movs	r3, #0
 80040c4:	e004      	b.n	80040d0 <DeInitStateMachine+0x28>
    phost->device.Data[i] = 0U;
 80040c6:	18e2      	adds	r2, r4, r3
 80040c8:	2100      	movs	r1, #0
 80040ca:	f882 111c 	strb.w	r1, [r2, #284]	@ 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80040ce:	3301      	adds	r3, #1
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d4:	d3f7      	bcc.n	80040c6 <DeInitStateMachine+0x1e>
  phost->gState = HOST_IDLE;
 80040d6:	2500      	movs	r5, #0
 80040d8:	7025      	strb	r5, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 80040da:	7065      	strb	r5, [r4, #1]
  phost->RequestState = CMD_SEND;
 80040dc:	2301      	movs	r3, #1
 80040de:	70a3      	strb	r3, [r4, #2]
  phost->Timer = 0U;
 80040e0:	f8c4 53c4 	str.w	r5, [r4, #964]	@ 0x3c4
  phost->Control.state = CTRL_SETUP;
 80040e4:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80040e6:	2240      	movs	r2, #64	@ 0x40
 80040e8:	71a2      	strb	r2, [r4, #6]
  phost->Control.errorcount = 0U;
 80040ea:	7665      	strb	r5, [r4, #25]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80040ec:	f884 531c 	strb.w	r5, [r4, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80040f0:	f884 331d 	strb.w	r3, [r4, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80040f4:	f884 531f 	strb.w	r5, [r4, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80040f8:	f884 531e 	strb.w	r5, [r4, #798]	@ 0x31e
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80040fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004100:	4629      	mov	r1, r5
 8004102:	f104 001c 	add.w	r0, r4, #28
 8004106:	f001 f87d 	bl	8005204 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800410a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800410e:	4629      	mov	r1, r5
 8004110:	f504 708e 	add.w	r0, r4, #284	@ 0x11c
 8004114:	f001 f876 	bl	8005204 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8004118:	f8c4 5326 	str.w	r5, [r4, #806]	@ 0x326
 800411c:	f8c4 532a 	str.w	r5, [r4, #810]	@ 0x32a
 8004120:	f8c4 532e 	str.w	r5, [r4, #814]	@ 0x32e
 8004124:	f8c4 5332 	str.w	r5, [r4, #818]	@ 0x332
 8004128:	f8a4 5336 	strh.w	r5, [r4, #822]	@ 0x336
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800412c:	223e      	movs	r2, #62	@ 0x3e
 800412e:	4629      	mov	r1, r5
 8004130:	f504 704e 	add.w	r0, r4, #824	@ 0x338
 8004134:	f001 f866 	bl	8005204 <memset>
}
 8004138:	4628      	mov	r0, r5
 800413a:	bd38      	pop	{r3, r4, r5, pc}

0800413c <USBH_HandleEnum>:
{
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8004142:	7845      	ldrb	r5, [r0, #1]
 8004144:	2d07      	cmp	r5, #7
 8004146:	f200 812c 	bhi.w	80043a2 <USBH_HandleEnum+0x266>
 800414a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800414e:	0008      	.short	0x0008
 8004150:	00690048 	.word	0x00690048
 8004154:	00bf009a 	.word	0x00bf009a
 8004158:	00fe00e5 	.word	0x00fe00e5
 800415c:	0117      	.short	0x0117
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800415e:	2108      	movs	r1, #8
 8004160:	f000 fe1e 	bl	8004da0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8004164:	b118      	cbz	r0, 800416e <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8004166:	2803      	cmp	r0, #3
 8004168:	d021      	beq.n	80041ae <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800416a:	2501      	movs	r5, #1
 800416c:	e109      	b.n	8004382 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800416e:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8004172:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004174:	2501      	movs	r5, #1
 8004176:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8004178:	9302      	str	r3, [sp, #8]
 800417a:	2600      	movs	r6, #0
 800417c:	9601      	str	r6, [sp, #4]
 800417e:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8004188:	2280      	movs	r2, #128	@ 0x80
 800418a:	7921      	ldrb	r1, [r4, #4]
 800418c:	4620      	mov	r0, r4
 800418e:	f000 ff12 	bl	8004fb6 <USBH_OpenPipe>
                            (uint16_t)phost->Control.pipe_size);
 8004192:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	9601      	str	r6, [sp, #4]
 8004198:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 80041a2:	4632      	mov	r2, r6
 80041a4:	7961      	ldrb	r1, [r4, #5]
 80041a6:	4620      	mov	r0, r4
 80041a8:	f000 ff05 	bl	8004fb6 <USBH_OpenPipe>
 80041ac:	e0e9      	b.n	8004382 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80041ae:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 80041b2:	3301      	adds	r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d903      	bls.n	80041c6 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 80041be:	230d      	movs	r3, #13
 80041c0:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80041c2:	2501      	movs	r5, #1
 80041c4:	e0dd      	b.n	8004382 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80041c6:	7961      	ldrb	r1, [r4, #5]
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 ff1c 	bl	8005006 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80041ce:	7921      	ldrb	r1, [r4, #4]
 80041d0:	4620      	mov	r0, r4
 80041d2:	f000 ff18 	bl	8005006 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80041da:	2501      	movs	r5, #1
 80041dc:	e0d1      	b.n	8004382 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80041de:	2112      	movs	r1, #18
 80041e0:	f000 fdde 	bl	8004da0 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80041e4:	b910      	cbnz	r0, 80041ec <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 80041e6:	2302      	movs	r3, #2
 80041e8:	7063      	strb	r3, [r4, #1]
 80041ea:	e0ca      	b.n	8004382 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80041ec:	2803      	cmp	r0, #3
 80041ee:	f040 80c8 	bne.w	8004382 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80041f2:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d902      	bls.n	8004208 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8004202:	230d      	movs	r3, #13
 8004204:	7023      	strb	r3, [r4, #0]
 8004206:	e0bc      	b.n	8004382 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004208:	7961      	ldrb	r1, [r4, #5]
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fefb 	bl	8005006 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004210:	7921      	ldrb	r1, [r4, #4]
 8004212:	4620      	mov	r0, r4
 8004214:	f000 fef7 	bl	8005006 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8004218:	2300      	movs	r3, #0
 800421a:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 800421c:	7023      	strb	r3, [r4, #0]
 800421e:	e0b0      	b.n	8004382 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8004220:	2101      	movs	r1, #1
 8004222:	f000 fe13 	bl	8004e4c <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8004226:	b118      	cbz	r0, 8004230 <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8004228:	2803      	cmp	r0, #3
 800422a:	d024      	beq.n	8004276 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800422c:	2501      	movs	r5, #1
 800422e:	e0a8      	b.n	8004382 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 8004230:	2002      	movs	r0, #2
 8004232:	f7ff fed6 	bl	8003fe2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8004236:	2501      	movs	r5, #1
 8004238:	f884 531c 	strb.w	r5, [r4, #796]	@ 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 800423c:	2303      	movs	r3, #3
 800423e:	7063      	strb	r3, [r4, #1]
                            (uint16_t)phost->Control.pipe_size);
 8004240:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8004242:	9302      	str	r3, [sp, #8]
 8004244:	2600      	movs	r6, #0
 8004246:	9601      	str	r6, [sp, #4]
 8004248:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	462b      	mov	r3, r5
 8004250:	2280      	movs	r2, #128	@ 0x80
 8004252:	7921      	ldrb	r1, [r4, #4]
 8004254:	4620      	mov	r0, r4
 8004256:	f000 feae 	bl	8004fb6 <USBH_OpenPipe>
                            (uint16_t)phost->Control.pipe_size);
 800425a:	79a3      	ldrb	r3, [r4, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	9601      	str	r6, [sp, #4]
 8004260:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800426a:	4632      	mov	r2, r6
 800426c:	7961      	ldrb	r1, [r4, #5]
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fea1 	bl	8004fb6 <USBH_OpenPipe>
 8004274:	e085      	b.n	8004382 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 8004276:	230d      	movs	r3, #13
 8004278:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800427a:	2300      	movs	r3, #0
 800427c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800427e:	2501      	movs	r5, #1
 8004280:	e07f      	b.n	8004382 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8004282:	2109      	movs	r1, #9
 8004284:	f000 fda7 	bl	8004dd6 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8004288:	b918      	cbnz	r0, 8004292 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800428a:	2304      	movs	r3, #4
 800428c:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800428e:	2501      	movs	r5, #1
 8004290:	e077      	b.n	8004382 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8004292:	2803      	cmp	r0, #3
 8004294:	d001      	beq.n	800429a <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004296:	2501      	movs	r5, #1
 8004298:	e073      	b.n	8004382 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 800429a:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 800429e:	3301      	adds	r3, #1
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d903      	bls.n	80042b2 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 80042aa:	230d      	movs	r3, #13
 80042ac:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80042ae:	2501      	movs	r5, #1
 80042b0:	e067      	b.n	8004382 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80042b2:	7961      	ldrb	r1, [r4, #5]
 80042b4:	4620      	mov	r0, r4
 80042b6:	f000 fea6 	bl	8005006 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80042ba:	7921      	ldrb	r1, [r4, #4]
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 fea2 	bl	8005006 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 80042c6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80042c8:	2501      	movs	r5, #1
 80042ca:	e05a      	b.n	8004382 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80042cc:	f8b0 133a 	ldrh.w	r1, [r0, #826]	@ 0x33a
 80042d0:	f000 fd81 	bl	8004dd6 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80042d4:	b918      	cbnz	r0, 80042de <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80042d6:	2305      	movs	r3, #5
 80042d8:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80042da:	2501      	movs	r5, #1
 80042dc:	e051      	b.n	8004382 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80042de:	2803      	cmp	r0, #3
 80042e0:	d001      	beq.n	80042e6 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 80042e2:	2501      	movs	r5, #1
 80042e4:	e04d      	b.n	8004382 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 80042e6:	f894 331e 	ldrb.w	r3, [r4, #798]	@ 0x31e
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	f884 331e 	strb.w	r3, [r4, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d903      	bls.n	80042fe <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 80042f6:	230d      	movs	r3, #13
 80042f8:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80042fa:	2501      	movs	r5, #1
 80042fc:	e041      	b.n	8004382 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80042fe:	7961      	ldrb	r1, [r4, #5]
 8004300:	4620      	mov	r0, r4
 8004302:	f000 fe80 	bl	8005006 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004306:	7921      	ldrb	r1, [r4, #4]
 8004308:	4620      	mov	r0, r4
 800430a:	f000 fe7c 	bl	8005006 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800430e:	2300      	movs	r3, #0
 8004310:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8004312:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004314:	2501      	movs	r5, #1
 8004316:	e034      	b.n	8004382 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8004318:	f890 1334 	ldrb.w	r1, [r0, #820]	@ 0x334
 800431c:	b919      	cbnz	r1, 8004326 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800431e:	2306      	movs	r3, #6
 8004320:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004322:	2501      	movs	r5, #1
 8004324:	e02d      	b.n	8004382 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8004326:	23ff      	movs	r3, #255	@ 0xff
 8004328:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 800432c:	f000 fd6e 	bl	8004e0c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004330:	b918      	cbnz	r0, 800433a <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004332:	2306      	movs	r3, #6
 8004334:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004336:	2501      	movs	r5, #1
 8004338:	e023      	b.n	8004382 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800433a:	2803      	cmp	r0, #3
 800433c:	d001      	beq.n	8004342 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800433e:	2501      	movs	r5, #1
 8004340:	e01f      	b.n	8004382 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004342:	2306      	movs	r3, #6
 8004344:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004346:	2501      	movs	r5, #1
 8004348:	e01b      	b.n	8004382 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 800434a:	f890 1335 	ldrb.w	r1, [r0, #821]	@ 0x335
 800434e:	b919      	cbnz	r1, 8004358 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004350:	2307      	movs	r3, #7
 8004352:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004354:	2501      	movs	r5, #1
 8004356:	e014      	b.n	8004382 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8004358:	23ff      	movs	r3, #255	@ 0xff
 800435a:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 800435e:	f000 fd55 	bl	8004e0c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004362:	b918      	cbnz	r0, 800436c <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004364:	2307      	movs	r3, #7
 8004366:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004368:	2501      	movs	r5, #1
 800436a:	e00a      	b.n	8004382 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800436c:	2803      	cmp	r0, #3
 800436e:	d001      	beq.n	8004374 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004370:	2501      	movs	r5, #1
 8004372:	e006      	b.n	8004382 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004374:	2307      	movs	r3, #7
 8004376:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004378:	2501      	movs	r5, #1
 800437a:	e002      	b.n	8004382 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800437c:	f890 5336 	ldrb.w	r5, [r0, #822]	@ 0x336
 8004380:	b915      	cbnz	r5, 8004388 <USBH_HandleEnum+0x24c>
}
 8004382:	4628      	mov	r0, r5
 8004384:	b004      	add	sp, #16
 8004386:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8004388:	23ff      	movs	r3, #255	@ 0xff
 800438a:	f500 728e 	add.w	r2, r0, #284	@ 0x11c
 800438e:	4629      	mov	r1, r5
 8004390:	f000 fd3c 	bl	8004e0c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004394:	4605      	mov	r5, r0
 8004396:	2800      	cmp	r0, #0
 8004398:	d0f3      	beq.n	8004382 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800439a:	2803      	cmp	r0, #3
 800439c:	d003      	beq.n	80043a6 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800439e:	2501      	movs	r5, #1
 80043a0:	e7ef      	b.n	8004382 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 80043a2:	2501      	movs	r5, #1
 80043a4:	e7ed      	b.n	8004382 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 80043a6:	2500      	movs	r5, #0
 80043a8:	e7eb      	b.n	8004382 <USBH_HandleEnum+0x246>

080043aa <USBH_Init>:
  if (phost == NULL)
 80043aa:	b1d8      	cbz	r0, 80043e4 <USBH_Init+0x3a>
{
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	460e      	mov	r6, r1
 80043b0:	4604      	mov	r4, r0
  phost->id = id;
 80043b2:	f880 23cc 	strb.w	r2, [r0, #972]	@ 0x3cc
  phost->pActiveClass = NULL;
 80043b6:	2500      	movs	r5, #0
 80043b8:	f8c0 537c 	str.w	r5, [r0, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80043bc:	f8c0 5380 	str.w	r5, [r0, #896]	@ 0x380
  (void)DeInitStateMachine(phost);
 80043c0:	f7ff fe72 	bl	80040a8 <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80043c4:	f884 5323 	strb.w	r5, [r4, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80043c8:	f884 5320 	strb.w	r5, [r4, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80043cc:	f884 5321 	strb.w	r5, [r4, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80043d0:	f884 5322 	strb.w	r5, [r4, #802]	@ 0x322
  if (pUsrFunc != NULL)
 80043d4:	b10e      	cbz	r6, 80043da <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80043d6:	f8c4 63d4 	str.w	r6, [r4, #980]	@ 0x3d4
  (void)USBH_LL_Init(phost);
 80043da:	4620      	mov	r0, r4
 80043dc:	f7ff fd96 	bl	8003f0c <USBH_LL_Init>
  return USBH_OK;
 80043e0:	2000      	movs	r0, #0
}
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80043e4:	2002      	movs	r0, #2
}
 80043e6:	4770      	bx	lr

080043e8 <USBH_RegisterClass>:
  if (pclass != NULL)
 80043e8:	460a      	mov	r2, r1
 80043ea:	b151      	cbz	r1, 8004402 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80043ec:	f8d0 3380 	ldr.w	r3, [r0, #896]	@ 0x380
 80043f0:	b94b      	cbnz	r3, 8004406 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 80043f2:	1c59      	adds	r1, r3, #1
 80043f4:	f8c0 1380 	str.w	r1, [r0, #896]	@ 0x380
 80043f8:	33de      	adds	r3, #222	@ 0xde
 80043fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 80043fe:	2000      	movs	r0, #0
 8004400:	4770      	bx	lr
    status = USBH_FAIL;
 8004402:	2002      	movs	r0, #2
 8004404:	4770      	bx	lr
      status = USBH_FAIL;
 8004406:	2002      	movs	r0, #2
}
 8004408:	4770      	bx	lr

0800440a <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800440a:	f890 333c 	ldrb.w	r3, [r0, #828]	@ 0x33c
 800440e:	428b      	cmp	r3, r1
 8004410:	d903      	bls.n	800441a <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8004412:	f880 1324 	strb.w	r1, [r0, #804]	@ 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8004416:	2000      	movs	r0, #0
 8004418:	4770      	bx	lr
    status = USBH_FAIL;
 800441a:	2002      	movs	r0, #2
}
 800441c:	4770      	bx	lr

0800441e <USBH_FindInterface>:
{
 800441e:	b510      	push	{r4, lr}
 8004420:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8004422:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004424:	e00b      	b.n	800443e <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004426:	f04f 0c1a 	mov.w	ip, #26
 800442a:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800442e:	f89e c349 	ldrb.w	ip, [lr, #841]	@ 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004432:	459c      	cmp	ip, r3
 8004434:	d01c      	beq.n	8004470 <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004436:	2bff      	cmp	r3, #255	@ 0xff
 8004438:	d01a      	beq.n	8004470 <USBH_FindInterface+0x52>
    if_ix++;
 800443a:	3001      	adds	r0, #1
 800443c:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800443e:	2801      	cmp	r0, #1
 8004440:	d815      	bhi.n	800446e <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8004442:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004444:	f04f 0c1a 	mov.w	ip, #26
 8004448:	fb0c 4c00 	mla	ip, ip, r0, r4
 800444c:	f89c c347 	ldrb.w	ip, [ip, #839]	@ 0x347
 8004450:	458c      	cmp	ip, r1
 8004452:	d001      	beq.n	8004458 <USBH_FindInterface+0x3a>
 8004454:	29ff      	cmp	r1, #255	@ 0xff
 8004456:	d1f0      	bne.n	800443a <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004458:	f04f 0c1a 	mov.w	ip, #26
 800445c:	fb0c 4c0e 	mla	ip, ip, lr, r4
 8004460:	f89c c348 	ldrb.w	ip, [ip, #840]	@ 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004464:	4594      	cmp	ip, r2
 8004466:	d0de      	beq.n	8004426 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004468:	2aff      	cmp	r2, #255	@ 0xff
 800446a:	d1e6      	bne.n	800443a <USBH_FindInterface+0x1c>
 800446c:	e7db      	b.n	8004426 <USBH_FindInterface+0x8>
  return 0xFFU;
 800446e:	20ff      	movs	r0, #255	@ 0xff
}
 8004470:	bd10      	pop	{r4, pc}

08004472 <USBH_Start>:
{
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
  (void)USBH_LL_Start(phost);
 8004476:	f7ff fdc2 	bl	8003ffe <USBH_LL_Start>
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800447a:	2101      	movs	r1, #1
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fd8b 	bl	8003f98 <USBH_LL_DriverVBUS>
}
 8004482:	2000      	movs	r0, #0
 8004484:	bd10      	pop	{r4, pc}

08004486 <USBH_Process>:
{
 8004486:	b530      	push	{r4, r5, lr}
 8004488:	b087      	sub	sp, #28
 800448a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800448c:	2302      	movs	r3, #2
 800448e:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8004492:	f890 3321 	ldrb.w	r3, [r0, #801]	@ 0x321
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d011      	beq.n	80044c0 <USBH_Process+0x3a>
  switch (phost->gState)
 800449c:	7823      	ldrb	r3, [r4, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b0b      	cmp	r3, #11
 80044a2:	d87c      	bhi.n	800459e <USBH_Process+0x118>
 80044a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044a8:	0021000f 	.word	0x0021000f
 80044ac:	01120046 	.word	0x01120046
 80044b0:	007e007b 	.word	0x007e007b
 80044b4:	009300ef 	.word	0x009300ef
 80044b8:	00a7009d 	.word	0x00a7009d
 80044bc:	010900c3 	.word	0x010900c3
    phost->gState = HOST_DEV_DISCONNECTED;
 80044c0:	2303      	movs	r3, #3
 80044c2:	7003      	strb	r3, [r0, #0]
 80044c4:	e7ea      	b.n	800449c <USBH_Process+0x16>
      if ((phost->device.is_connected) != 0U)
 80044c6:	f894 3320 	ldrb.w	r3, [r4, #800]	@ 0x320
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d067      	beq.n	800459e <USBH_Process+0x118>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80044ce:	2301      	movs	r3, #1
 80044d0:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 80044d2:	20c8      	movs	r0, #200	@ 0xc8
 80044d4:	f7ff fd85 	bl	8003fe2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff fda0 	bl	800401e <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80044de:	2300      	movs	r3, #0
 80044e0:	f884 331c 	strb.w	r3, [r4, #796]	@ 0x31c
        phost->Timeout = 0U;
 80044e4:	f8c4 33c8 	str.w	r3, [r4, #968]	@ 0x3c8
 80044e8:	e059      	b.n	800459e <USBH_Process+0x118>
      if (phost->device.PortEnabled == 1U)
 80044ea:	f894 3323 	ldrb.w	r3, [r4, #803]	@ 0x323
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d00f      	beq.n	8004514 <USBH_Process+0x8e>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80044f4:	f8d4 33c8 	ldr.w	r3, [r4, #968]	@ 0x3c8
 80044f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fc:	d913      	bls.n	8004526 <USBH_Process+0xa0>
          phost->device.RstCnt++;
 80044fe:	f894 331f 	ldrb.w	r3, [r4, #799]	@ 0x31f
 8004502:	3301      	adds	r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800450a:	2b03      	cmp	r3, #3
 800450c:	d908      	bls.n	8004520 <USBH_Process+0x9a>
            phost->gState = HOST_ABORT_STATE;
 800450e:	230d      	movs	r3, #13
 8004510:	7023      	strb	r3, [r4, #0]
 8004512:	e044      	b.n	800459e <USBH_Process+0x118>
        phost->device.RstCnt = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	f884 331f 	strb.w	r3, [r4, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800451a:	2302      	movs	r3, #2
 800451c:	7023      	strb	r3, [r4, #0]
 800451e:	e03e      	b.n	800459e <USBH_Process+0x118>
            phost->gState = HOST_IDLE;
 8004520:	2300      	movs	r3, #0
 8004522:	7023      	strb	r3, [r4, #0]
 8004524:	e03b      	b.n	800459e <USBH_Process+0x118>
          phost->Timeout += 10U;
 8004526:	330a      	adds	r3, #10
 8004528:	f8c4 33c8 	str.w	r3, [r4, #968]	@ 0x3c8
          USBH_Delay(10U);
 800452c:	200a      	movs	r0, #10
 800452e:	f7ff fd58 	bl	8003fe2 <USBH_Delay>
 8004532:	e034      	b.n	800459e <USBH_Process+0x118>
      if (phost->pUser != NULL)
 8004534:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 8004538:	b113      	cbz	r3, 8004540 <USBH_Process+0xba>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800453a:	2104      	movs	r1, #4
 800453c:	4620      	mov	r0, r4
 800453e:	4798      	blx	r3
      USBH_Delay(100U);
 8004540:	2064      	movs	r0, #100	@ 0x64
 8004542:	f7ff fd4e 	bl	8003fe2 <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004546:	4620      	mov	r0, r4
 8004548:	f7ff fd0a 	bl	8003f60 <USBH_LL_GetSpeed>
 800454c:	f884 031d 	strb.w	r0, [r4, #797]	@ 0x31d
      phost->gState = HOST_ENUMERATION;
 8004550:	2305      	movs	r3, #5
 8004552:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004554:	2100      	movs	r1, #0
 8004556:	4620      	mov	r0, r4
 8004558:	f000 fd42 	bl	8004fe0 <USBH_AllocPipe>
 800455c:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800455e:	2180      	movs	r1, #128	@ 0x80
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fd3d 	bl	8004fe0 <USBH_AllocPipe>
 8004566:	4601      	mov	r1, r0
 8004568:	7120      	strb	r0, [r4, #4]
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800456a:	79a3      	ldrb	r3, [r4, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800456c:	9302      	str	r3, [sp, #8]
 800456e:	2500      	movs	r5, #0
 8004570:	9501      	str	r5, [sp, #4]
 8004572:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 800457c:	2280      	movs	r2, #128	@ 0x80
 800457e:	4620      	mov	r0, r4
 8004580:	f000 fd19 	bl	8004fb6 <USBH_OpenPipe>
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004584:	79a3      	ldrb	r3, [r4, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	9501      	str	r5, [sp, #4]
 800458a:	f894 331d 	ldrb.w	r3, [r4, #797]	@ 0x31d
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f894 331c 	ldrb.w	r3, [r4, #796]	@ 0x31c
 8004594:	462a      	mov	r2, r5
 8004596:	7961      	ldrb	r1, [r4, #5]
 8004598:	4620      	mov	r0, r4
 800459a:	f000 fd0c 	bl	8004fb6 <USBH_OpenPipe>
}
 800459e:	2000      	movs	r0, #0
 80045a0:	b007      	add	sp, #28
 80045a2:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff fdc9 	bl	800413c <USBH_HandleEnum>
 80045aa:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 80045ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f3      	bne.n	800459e <USBH_Process+0x118>
        phost->device.current_interface = 0U;
 80045b6:	f884 3324 	strb.w	r3, [r4, #804]	@ 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80045ba:	f894 3337 	ldrb.w	r3, [r4, #823]	@ 0x337
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <USBH_Process+0x142>
          phost->gState = HOST_INPUT;
 80045c2:	2307      	movs	r3, #7
 80045c4:	7023      	strb	r3, [r4, #0]
 80045c6:	e7ea      	b.n	800459e <USBH_Process+0x118>
          phost->gState = HOST_SET_CONFIGURATION;
 80045c8:	2308      	movs	r3, #8
 80045ca:	7023      	strb	r3, [r4, #0]
 80045cc:	e7e7      	b.n	800459e <USBH_Process+0x118>
      if (phost->pUser != NULL)
 80045ce:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0e3      	beq.n	800459e <USBH_Process+0x118>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80045d6:	2101      	movs	r1, #1
 80045d8:	4620      	mov	r0, r4
 80045da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80045dc:	2308      	movs	r3, #8
 80045de:	7023      	strb	r3, [r4, #0]
 80045e0:	e7dd      	b.n	800459e <USBH_Process+0x118>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80045e2:	f894 133d 	ldrb.w	r1, [r4, #829]	@ 0x33d
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 fc41 	bl	8004e6e <USBH_SetCfg>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1d6      	bne.n	800459e <USBH_Process+0x118>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80045f0:	2309      	movs	r3, #9
 80045f2:	7023      	strb	r3, [r4, #0]
 80045f4:	e7d3      	b.n	800459e <USBH_Process+0x118>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80045f6:	f894 333f 	ldrb.w	r3, [r4, #831]	@ 0x33f
 80045fa:	f013 0f20 	tst.w	r3, #32
 80045fe:	d102      	bne.n	8004606 <USBH_Process+0x180>
        phost->gState = HOST_CHECK_CLASS;
 8004600:	230a      	movs	r3, #10
 8004602:	7023      	strb	r3, [r4, #0]
 8004604:	e7cb      	b.n	800459e <USBH_Process+0x118>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8004606:	2101      	movs	r1, #1
 8004608:	4620      	mov	r0, r4
 800460a:	f000 fc41 	bl	8004e90 <USBH_SetFeature>
 800460e:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8004612:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004616:	b913      	cbnz	r3, 800461e <USBH_Process+0x198>
          phost->gState = HOST_CHECK_CLASS;
 8004618:	230a      	movs	r3, #10
 800461a:	7023      	strb	r3, [r4, #0]
 800461c:	e7bf      	b.n	800459e <USBH_Process+0x118>
        else if (status == USBH_NOT_SUPPORTED)
 800461e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b03      	cmp	r3, #3
 8004626:	d1ba      	bne.n	800459e <USBH_Process+0x118>
          phost->gState = HOST_CHECK_CLASS;
 8004628:	230a      	movs	r3, #10
 800462a:	7023      	strb	r3, [r4, #0]
 800462c:	e7b7      	b.n	800459e <USBH_Process+0x118>
      if (phost->ClassNumber == 0U)
 800462e:	f8d4 3380 	ldr.w	r3, [r4, #896]	@ 0x380
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0b3      	beq.n	800459e <USBH_Process+0x118>
        phost->pActiveClass = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800463c:	b173      	cbz	r3, 800465c <USBH_Process+0x1d6>
        if (phost->pActiveClass != NULL)
 800463e:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8004642:	b1eb      	cbz	r3, 8004680 <USBH_Process+0x1fa>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	4620      	mov	r0, r4
 8004648:	4798      	blx	r3
 800464a:	b9b0      	cbnz	r0, 800467a <USBH_Process+0x1f4>
            phost->gState = HOST_CLASS_REQUEST;
 800464c:	2306      	movs	r3, #6
 800464e:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004650:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 8004654:	2103      	movs	r1, #3
 8004656:	4620      	mov	r0, r4
 8004658:	4798      	blx	r3
 800465a:	e7a0      	b.n	800459e <USBH_Process+0x118>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800465c:	f103 02de 	add.w	r2, r3, #222	@ 0xde
 8004660:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004664:	7910      	ldrb	r0, [r2, #4]
 8004666:	f894 1347 	ldrb.w	r1, [r4, #839]	@ 0x347
 800466a:	4288      	cmp	r0, r1
 800466c:	d002      	beq.n	8004674 <USBH_Process+0x1ee>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800466e:	3301      	adds	r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e7e3      	b.n	800463c <USBH_Process+0x1b6>
            phost->pActiveClass = phost->pClass[idx];
 8004674:	f8c4 237c 	str.w	r2, [r4, #892]	@ 0x37c
            break;
 8004678:	e7e1      	b.n	800463e <USBH_Process+0x1b8>
            phost->gState = HOST_ABORT_STATE;
 800467a:	230d      	movs	r3, #13
 800467c:	7023      	strb	r3, [r4, #0]
 800467e:	e78e      	b.n	800459e <USBH_Process+0x118>
          phost->gState = HOST_ABORT_STATE;
 8004680:	230d      	movs	r3, #13
 8004682:	7023      	strb	r3, [r4, #0]
 8004684:	e78b      	b.n	800459e <USBH_Process+0x118>
      if (phost->pActiveClass != NULL)
 8004686:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 800468a:	b19b      	cbz	r3, 80046b4 <USBH_Process+0x22e>
        status = phost->pActiveClass->Requests(phost);
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	4620      	mov	r0, r4
 8004690:	4798      	blx	r3
 8004692:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8004696:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800469a:	b913      	cbnz	r3, 80046a2 <USBH_Process+0x21c>
          phost->gState = HOST_CLASS;
 800469c:	230b      	movs	r3, #11
 800469e:	7023      	strb	r3, [r4, #0]
 80046a0:	e77d      	b.n	800459e <USBH_Process+0x118>
        else if (status == USBH_FAIL)
 80046a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	f47f af78 	bne.w	800459e <USBH_Process+0x118>
          phost->gState = HOST_ABORT_STATE;
 80046ae:	230d      	movs	r3, #13
 80046b0:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80046b2:	e774      	b.n	800459e <USBH_Process+0x118>
        phost->gState = HOST_ABORT_STATE;
 80046b4:	230d      	movs	r3, #13
 80046b6:	7023      	strb	r3, [r4, #0]
 80046b8:	e771      	b.n	800459e <USBH_Process+0x118>
      if (phost->pActiveClass != NULL)
 80046ba:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f43f af6d 	beq.w	800459e <USBH_Process+0x118>
        phost->pActiveClass->BgndProcess(phost);
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	4620      	mov	r0, r4
 80046c8:	4798      	blx	r3
 80046ca:	e768      	b.n	800459e <USBH_Process+0x118>
      phost->device.is_disconnected = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f884 3321 	strb.w	r3, [r4, #801]	@ 0x321
      (void)DeInitStateMachine(phost);
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff fce8 	bl	80040a8 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80046d8:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 80046dc:	b12b      	cbz	r3, 80046ea <USBH_Process+0x264>
        phost->pActiveClass->DeInit(phost);
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4620      	mov	r0, r4
 80046e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
      if (phost->pUser != NULL)
 80046ea:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 80046ee:	b113      	cbz	r3, 80046f6 <USBH_Process+0x270>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80046f0:	2105      	movs	r1, #5
 80046f2:	4620      	mov	r0, r4
 80046f4:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80046f6:	f894 3322 	ldrb.w	r3, [r4, #802]	@ 0x322
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d003      	beq.n	8004708 <USBH_Process+0x282>
        (void)USBH_LL_Start(phost);
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff fc7c 	bl	8003ffe <USBH_LL_Start>
 8004706:	e74a      	b.n	800459e <USBH_Process+0x118>
        phost->device.is_ReEnumerated = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	f884 3322 	strb.w	r3, [r4, #802]	@ 0x322
        (void)USBH_Start(phost);
 800470e:	4620      	mov	r0, r4
 8004710:	f7ff feaf 	bl	8004472 <USBH_Start>
 8004714:	e743      	b.n	800459e <USBH_Process+0x118>

08004716 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004716:	f8c0 13c4 	str.w	r1, [r0, #964]	@ 0x3c4
}
 800471a:	4770      	bx	lr

0800471c <USBH_LL_IncTimer>:
{
 800471c:	b508      	push	{r3, lr}
  phost->Timer++;
 800471e:	f8d0 23c4 	ldr.w	r2, [r0, #964]	@ 0x3c4
 8004722:	3201      	adds	r2, #1
 8004724:	f8c0 23c4 	str.w	r2, [r0, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8004728:	f7ff fcb1 	bl	800408e <USBH_HandleSof>
}
 800472c:	bd08      	pop	{r3, pc}

0800472e <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800472e:	2301      	movs	r3, #1
 8004730:	f880 3323 	strb.w	r3, [r0, #803]	@ 0x323
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
}
 8004734:	4770      	bx	lr

08004736 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	f880 3323 	strb.w	r3, [r0, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800473c:	2301      	movs	r3, #1
 800473e:	f880 3321 	strb.w	r3, [r0, #801]	@ 0x321

  return;
}
 8004742:	4770      	bx	lr

08004744 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004744:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 8004746:	2201      	movs	r2, #1
 8004748:	f880 2320 	strb.w	r2, [r0, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800474c:	2000      	movs	r0, #0
 800474e:	f883 0321 	strb.w	r0, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004752:	f883 0322 	strb.w	r0, [r3, #802]	@ 0x322
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
}
 8004756:	4770      	bx	lr

08004758 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800475c:	2301      	movs	r3, #1
 800475e:	f880 3321 	strb.w	r3, [r0, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8004762:	2500      	movs	r5, #0
 8004764:	f880 5320 	strb.w	r5, [r0, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8004768:	f880 5323 	strb.w	r5, [r0, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800476c:	f7ff fc4f 	bl	800400e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004770:	7921      	ldrb	r1, [r4, #4]
 8004772:	4620      	mov	r0, r4
 8004774:	f000 fc47 	bl	8005006 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004778:	7961      	ldrb	r1, [r4, #5]
 800477a:	4620      	mov	r0, r4
 800477c:	f000 fc43 	bl	8005006 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
}
 8004780:	4628      	mov	r0, r5
 8004782:	bd38      	pop	{r3, r4, r5, pc}

08004784 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8004784:	4603      	mov	r3, r0
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
  USBH_StatusTypeDef status = USBH_OK;

  if (buf == NULL)
 8004786:	468c      	mov	ip, r1
 8004788:	2900      	cmp	r1, #0
 800478a:	d070      	beq.n	800486e <USBH_ParseDevDesc+0xea>
  {
    return USBH_FAIL;
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800478c:	7809      	ldrb	r1, [r1, #0]
 800478e:	f880 1326 	strb.w	r1, [r0, #806]	@ 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8004792:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8004796:	f880 1327 	strb.w	r1, [r0, #807]	@ 0x327
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800479a:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800479e:	f89c 0003 	ldrb.w	r0, [ip, #3]
 80047a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80047a6:	f8a3 1328 	strh.w	r1, [r3, #808]	@ 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80047aa:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80047ae:	f883 132a 	strb.w	r1, [r3, #810]	@ 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80047b2:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80047b6:	f883 132b 	strb.w	r1, [r3, #811]	@ 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80047ba:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80047be:	f883 132c 	strb.w	r1, [r3, #812]	@ 0x32c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80047c2:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80047c6:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80047ca:	f893 031d 	ldrb.w	r0, [r3, #797]	@ 0x31d
 80047ce:	2801      	cmp	r0, #1
 80047d0:	d92d      	bls.n	800482e <USBH_ParseDevDesc+0xaa>
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
        break;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80047d2:	2802      	cmp	r0, #2
 80047d4:	d040      	beq.n	8004858 <USBH_ParseDevDesc+0xd4>
      dev_desc->bMaxPacketSize = 8U;
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80047d6:	2003      	movs	r0, #3
  }

  if (length > 8U)
 80047d8:	2a08      	cmp	r2, #8
 80047da:	d949      	bls.n	8004870 <USBH_ParseDevDesc+0xec>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80047dc:	f89c 2008 	ldrb.w	r2, [ip, #8]
 80047e0:	f89c 1009 	ldrb.w	r1, [ip, #9]
 80047e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047e8:	f8a3 232e 	strh.w	r2, [r3, #814]	@ 0x32e
    dev_desc->idProduct          = LE16(buf + 10U);
 80047ec:	f89c 200a 	ldrb.w	r2, [ip, #10]
 80047f0:	f89c 100b 	ldrb.w	r1, [ip, #11]
 80047f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047f8:	f8a3 2330 	strh.w	r2, [r3, #816]	@ 0x330
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80047fc:	f89c 200c 	ldrb.w	r2, [ip, #12]
 8004800:	f89c 100d 	ldrb.w	r1, [ip, #13]
 8004804:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004808:	f8a3 2332 	strh.w	r2, [r3, #818]	@ 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800480c:	f89c 200e 	ldrb.w	r2, [ip, #14]
 8004810:	f883 2334 	strb.w	r2, [r3, #820]	@ 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8004814:	f89c 200f 	ldrb.w	r2, [ip, #15]
 8004818:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800481c:	f89c 2010 	ldrb.w	r2, [ip, #16]
 8004820:	f883 2336 	strb.w	r2, [r3, #822]	@ 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8004824:	f89c 2011 	ldrb.w	r2, [ip, #17]
 8004828:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
 800482c:	4770      	bx	lr
    switch (dev_desc->bMaxPacketSize)
 800482e:	2920      	cmp	r1, #32
 8004830:	d80b      	bhi.n	800484a <USBH_ParseDevDesc+0xc6>
 8004832:	2908      	cmp	r1, #8
 8004834:	d30b      	bcc.n	800484e <USBH_ParseDevDesc+0xca>
 8004836:	3908      	subs	r1, #8
 8004838:	b2c9      	uxtb	r1, r1
 800483a:	480e      	ldr	r0, [pc, #56]	@ (8004874 <USBH_ParseDevDesc+0xf0>)
 800483c:	fa20 f101 	lsr.w	r1, r0, r1
 8004840:	f011 0f01 	tst.w	r1, #1
 8004844:	d003      	beq.n	800484e <USBH_ParseDevDesc+0xca>
 8004846:	2000      	movs	r0, #0
 8004848:	e7c6      	b.n	80047d8 <USBH_ParseDevDesc+0x54>
 800484a:	2940      	cmp	r1, #64	@ 0x40
 800484c:	d00b      	beq.n	8004866 <USBH_ParseDevDesc+0xe2>
        dev_desc->bMaxPacketSize = 8U;
 800484e:	2108      	movs	r1, #8
 8004850:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d
  USBH_StatusTypeDef status = USBH_OK;
 8004854:	2000      	movs	r0, #0
        break;
 8004856:	e7bf      	b.n	80047d8 <USBH_ParseDevDesc+0x54>
    if (dev_desc->bMaxPacketSize != 8U)
 8004858:	2908      	cmp	r1, #8
 800485a:	d006      	beq.n	800486a <USBH_ParseDevDesc+0xe6>
      dev_desc->bMaxPacketSize = 8U;
 800485c:	2108      	movs	r1, #8
 800485e:	f883 132d 	strb.w	r1, [r3, #813]	@ 0x32d
  USBH_StatusTypeDef status = USBH_OK;
 8004862:	2000      	movs	r0, #0
 8004864:	e7b8      	b.n	80047d8 <USBH_ParseDevDesc+0x54>
    switch (dev_desc->bMaxPacketSize)
 8004866:	2000      	movs	r0, #0
 8004868:	e7b6      	b.n	80047d8 <USBH_ParseDevDesc+0x54>
  USBH_StatusTypeDef status = USBH_OK;
 800486a:	2000      	movs	r0, #0
 800486c:	e7b4      	b.n	80047d8 <USBH_ParseDevDesc+0x54>
    return USBH_FAIL;
 800486e:	2002      	movs	r0, #2
  }

  return status;
}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	01000101 	.word	0x01000101

08004878 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8004878:	780b      	ldrb	r3, [r1, #0]
 800487a:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800487c:	784b      	ldrb	r3, [r1, #1]
 800487e:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8004880:	788b      	ldrb	r3, [r1, #2]
 8004882:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8004884:	78cb      	ldrb	r3, [r1, #3]
 8004886:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8004888:	790b      	ldrb	r3, [r1, #4]
 800488a:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800488c:	794b      	ldrb	r3, [r1, #5]
 800488e:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8004890:	798b      	ldrb	r3, [r1, #6]
 8004892:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8004894:	79cb      	ldrb	r3, [r1, #7]
 8004896:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8004898:	7a0b      	ldrb	r3, [r1, #8]
 800489a:	7203      	strb	r3, [r0, #8]
}
 800489c:	4770      	bx	lr

0800489e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800489e:	b510      	push	{r4, lr}
 80048a0:	4686      	mov	lr, r0
  USBH_StatusTypeDef status = USBH_OK;

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80048a2:	7813      	ldrb	r3, [r2, #0]
 80048a4:	700b      	strb	r3, [r1, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80048a6:	7853      	ldrb	r3, [r2, #1]
 80048a8:	704b      	strb	r3, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80048aa:	7893      	ldrb	r3, [r2, #2]
 80048ac:	708b      	strb	r3, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80048ae:	f892 c003 	ldrb.w	ip, [r2, #3]
 80048b2:	f881 c003 	strb.w	ip, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80048b6:	7913      	ldrb	r3, [r2, #4]
 80048b8:	7950      	ldrb	r0, [r2, #5]
 80048ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048be:	808b      	strh	r3, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80048c0:	7994      	ldrb	r4, [r2, #6]
 80048c2:	718c      	strb	r4, [r1, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	b292      	uxth	r2, r2
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80048c8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80048cc:	d20c      	bcs.n	80048e8 <USBH_ParseEPDesc+0x4a>
  USBH_StatusTypeDef status = USBH_OK;
 80048ce:	2000      	movs	r0, #0
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
  {
    status = USBH_NOT_SUPPORTED;
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80048d0:	f89e 231d 	ldrb.w	r2, [lr, #797]	@ 0x31d
 80048d4:	b9ca      	cbnz	r2, 800490a <USBH_ParseEPDesc+0x6c>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80048d6:	f00c 0c03 	and.w	ip, ip, #3
 80048da:	f1bc 0f03 	cmp.w	ip, #3
 80048de:	d846      	bhi.n	800496e <USBH_ParseEPDesc+0xd0>
 80048e0:	e8df f00c 	tbb	[pc, ip]
 80048e4:	0d040d09 	.word	0x0d040d09
    status = USBH_NOT_SUPPORTED;
 80048e8:	2003      	movs	r0, #3
 80048ea:	e7f1      	b.n	80048d0 <USBH_ParseEPDesc+0x32>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048f0:	d910      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 80048f2:	2003      	movs	r0, #3
 80048f4:	e00e      	b.n	8004914 <USBH_ParseEPDesc+0x76>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d90c      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 80048fa:	2003      	movs	r0, #3
 80048fc:	e00a      	b.n	8004914 <USBH_ParseEPDesc+0x76>
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80048fe:	3c01      	subs	r4, #1
 8004900:	b2e4      	uxtb	r4, r4
 8004902:	2c0f      	cmp	r4, #15
 8004904:	d906      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
      {
        status = USBH_NOT_SUPPORTED;
 8004906:	2003      	movs	r0, #3
 8004908:	e004      	b.n	8004914 <USBH_ParseEPDesc+0x76>
    else
    {
      status = USBH_NOT_SUPPORTED;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800490a:	2a01      	cmp	r2, #1
 800490c:	d003      	beq.n	8004916 <USBH_ParseEPDesc+0x78>
    else
    {
      status = USBH_NOT_SUPPORTED;
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800490e:	2a02      	cmp	r2, #2
 8004910:	d01c      	beq.n	800494c <USBH_ParseEPDesc+0xae>
      status = USBH_NOT_SUPPORTED;
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8004912:	2003      	movs	r0, #3
  }

  return status;
}
 8004914:	bd10      	pop	{r4, pc}
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8004916:	f00c 0c03 	and.w	ip, ip, #3
 800491a:	f1bc 0f03 	cmp.w	ip, #3
 800491e:	d828      	bhi.n	8004972 <USBH_ParseEPDesc+0xd4>
 8004920:	e8df f00c 	tbb	[pc, ip]
 8004924:	0e020602 	.word	0x0e020602
      if (ep_descriptor->wMaxPacketSize > 64U)
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d9f3      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800492c:	2003      	movs	r0, #3
 800492e:	e7f1      	b.n	8004914 <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) ||
 8004930:	3c01      	subs	r4, #1
 8004932:	b2e4      	uxtb	r4, r4
 8004934:	2c0f      	cmp	r4, #15
 8004936:	d81e      	bhi.n	8004976 <USBH_ParseEPDesc+0xd8>
          (ep_descriptor->bInterval > 0x10U) ||
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d9eb      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800493c:	2003      	movs	r0, #3
 800493e:	e7e9      	b.n	8004914 <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8004940:	b1dc      	cbz	r4, 800497a <USBH_ParseEPDesc+0xdc>
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004946:	d3e5      	bcc.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 8004948:	4660      	mov	r0, ip
 800494a:	e7e3      	b.n	8004914 <USBH_ParseEPDesc+0x76>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800494c:	f01c 0c03 	ands.w	ip, ip, #3
 8004950:	d103      	bne.n	800495a <USBH_ParseEPDesc+0xbc>
      if (ep_descriptor->wMaxPacketSize != 8U)
 8004952:	2b08      	cmp	r3, #8
 8004954:	d0de      	beq.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 8004956:	2003      	movs	r0, #3
 8004958:	e7dc      	b.n	8004914 <USBH_ParseEPDesc+0x76>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800495a:	f1bc 0f03 	cmp.w	ip, #3
 800495e:	d001      	beq.n	8004964 <USBH_ParseEPDesc+0xc6>
      status = USBH_NOT_SUPPORTED;
 8004960:	2003      	movs	r0, #3
 8004962:	e7d7      	b.n	8004914 <USBH_ParseEPDesc+0x76>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8004964:	b15c      	cbz	r4, 800497e <USBH_ParseEPDesc+0xe0>
 8004966:	2b08      	cmp	r3, #8
 8004968:	d9d4      	bls.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800496a:	4660      	mov	r0, ip
 800496c:	e7d2      	b.n	8004914 <USBH_ParseEPDesc+0x76>
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800496e:	2003      	movs	r0, #3
 8004970:	e7d0      	b.n	8004914 <USBH_ParseEPDesc+0x76>
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8004972:	2003      	movs	r0, #3
 8004974:	e7ce      	b.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 8004976:	2003      	movs	r0, #3
 8004978:	e7cc      	b.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800497a:	4660      	mov	r0, ip
 800497c:	e7ca      	b.n	8004914 <USBH_ParseEPDesc+0x76>
        status = USBH_NOT_SUPPORTED;
 800497e:	4660      	mov	r0, ip
 8004980:	e7c8      	b.n	8004914 <USBH_ParseEPDesc+0x76>

08004982 <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004982:	7843      	ldrb	r3, [r0, #1]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d000      	beq.n	800498a <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 8004988:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800498a:	7803      	ldrb	r3, [r0, #0]
 800498c:	3b02      	subs	r3, #2
 800498e:	429a      	cmp	r2, r3
 8004990:	bf28      	it	cs
 8004992:	461a      	movcs	r2, r3
 8004994:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004996:	2300      	movs	r3, #0
 8004998:	e007      	b.n	80049aa <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 800499a:	eb00 0c03 	add.w	ip, r0, r3
 800499e:	f89c c002 	ldrb.w	ip, [ip, #2]
 80049a2:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80049a6:	3302      	adds	r3, #2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d3f5      	bcc.n	800499a <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 80049ae:	2300      	movs	r3, #0
 80049b0:	700b      	strb	r3, [r1, #0]
}
 80049b2:	e7e9      	b.n	8004988 <USBH_ParseStringDesc+0x6>

080049b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80049b4:	b530      	push	{r4, r5, lr}
 80049b6:	b083      	sub	sp, #12
 80049b8:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80049ba:	7e05      	ldrb	r5, [r0, #24]
 80049bc:	1e6b      	subs	r3, r5, #1
 80049be:	2b0a      	cmp	r3, #10
 80049c0:	f200 80dd 	bhi.w	8004b7e <USBH_HandleControl+0x1ca>
 80049c4:	e8df f003 	tbb	[pc, r3]
 80049c8:	41351006 	.word	0x41351006
 80049cc:	897d6255 	.word	0x897d6255
 80049d0:	a99c      	.short	0xa99c
 80049d2:	c0          	.byte	0xc0
 80049d3:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80049d4:	7942      	ldrb	r2, [r0, #5]
 80049d6:	f100 0110 	add.w	r1, r0, #16
 80049da:	f000 fa7c 	bl	8004ed6 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80049de:	2302      	movs	r3, #2
 80049e0:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 80049e2:	4628      	mov	r0, r5
 80049e4:	b003      	add	sp, #12
 80049e6:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80049e8:	7941      	ldrb	r1, [r0, #5]
 80049ea:	f7ff facf 	bl	8003f8c <USBH_LL_GetURBState>
 80049ee:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80049f0:	2801      	cmp	r0, #1
 80049f2:	d005      	beq.n	8004a00 <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80049f4:	2804      	cmp	r0, #4
 80049f6:	d018      	beq.n	8004a2a <USBH_HandleControl+0x76>
 80049f8:	2802      	cmp	r0, #2
 80049fa:	d016      	beq.n	8004a2a <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 80049fc:	2501      	movs	r5, #1
 80049fe:	e7f0      	b.n	80049e2 <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8004a00:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 8004a02:	8ae2      	ldrh	r2, [r4, #22]
 8004a04:	b142      	cbz	r2, 8004a18 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 8004a06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a0a:	d102      	bne.n	8004a12 <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 8004a0c:	2305      	movs	r3, #5
 8004a0e:	7623      	strb	r3, [r4, #24]
 8004a10:	e7e7      	b.n	80049e2 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 8004a12:	2303      	movs	r3, #3
 8004a14:	7623      	strb	r3, [r4, #24]
 8004a16:	e7e4      	b.n	80049e2 <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 8004a18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a1c:	d102      	bne.n	8004a24 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 8004a1e:	2307      	movs	r3, #7
 8004a20:	7623      	strb	r3, [r4, #24]
 8004a22:	e7de      	b.n	80049e2 <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 8004a24:	2309      	movs	r3, #9
 8004a26:	7623      	strb	r3, [r4, #24]
 8004a28:	e7db      	b.n	80049e2 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8004a2a:	230b      	movs	r3, #11
 8004a2c:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a2e:	2501      	movs	r5, #1
 8004a30:	e7d7      	b.n	80049e2 <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004a32:	f8d0 33c4 	ldr.w	r3, [r0, #964]	@ 0x3c4
 8004a36:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8004a38:	7903      	ldrb	r3, [r0, #4]
 8004a3a:	8982      	ldrh	r2, [r0, #12]
 8004a3c:	6881      	ldr	r1, [r0, #8]
 8004a3e:	f000 fa71 	bl	8004f24 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8004a42:	2304      	movs	r3, #4
 8004a44:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a46:	2501      	movs	r5, #1
      break;
 8004a48:	e7cb      	b.n	80049e2 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004a4a:	7901      	ldrb	r1, [r0, #4]
 8004a4c:	f7ff fa9e 	bl	8003f8c <USBH_LL_GetURBState>
 8004a50:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8004a52:	2801      	cmp	r0, #1
 8004a54:	d006      	beq.n	8004a64 <USBH_HandleControl+0xb0>
      else if (URB_Status == USBH_URB_STALL)
 8004a56:	2805      	cmp	r0, #5
 8004a58:	f000 8093 	beq.w	8004b82 <USBH_HandleControl+0x1ce>
        if (URB_Status == USBH_URB_ERROR)
 8004a5c:	2804      	cmp	r0, #4
 8004a5e:	d004      	beq.n	8004a6a <USBH_HandleControl+0xb6>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a60:	2501      	movs	r5, #1
 8004a62:	e7be      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8004a64:	2309      	movs	r3, #9
 8004a66:	7623      	strb	r3, [r4, #24]
 8004a68:	e7bb      	b.n	80049e2 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8004a6a:	230b      	movs	r3, #11
 8004a6c:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004a6e:	2501      	movs	r5, #1
 8004a70:	e7b7      	b.n	80049e2 <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8004a72:	2501      	movs	r5, #1
 8004a74:	9500      	str	r5, [sp, #0]
 8004a76:	7943      	ldrb	r3, [r0, #5]
 8004a78:	8982      	ldrh	r2, [r0, #12]
 8004a7a:	6881      	ldr	r1, [r0, #8]
 8004a7c:	f000 fa3c 	bl	8004ef8 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004a80:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8004a84:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8004a86:	2306      	movs	r3, #6
 8004a88:	7623      	strb	r3, [r4, #24]
      break;
 8004a8a:	e7aa      	b.n	80049e2 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004a8c:	7941      	ldrb	r1, [r0, #5]
 8004a8e:	f7ff fa7d 	bl	8003f8c <USBH_LL_GetURBState>
 8004a92:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8004a94:	1e43      	subs	r3, r0, #1
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d875      	bhi.n	8004b86 <USBH_HandleControl+0x1d2>
 8004a9a:	e8df f003 	tbb	[pc, r3]
 8004a9e:	0a03      	.short	0x0a03
 8004aa0:	0e74      	.short	0x0e74
 8004aa2:	06          	.byte	0x06
 8004aa3:	00          	.byte	0x00
        phost->Control.state = CTRL_STATUS_IN;
 8004aa4:	2307      	movs	r3, #7
 8004aa6:	7623      	strb	r3, [r4, #24]
 8004aa8:	e79b      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 8004aaa:	230c      	movs	r3, #12
 8004aac:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 8004aae:	2503      	movs	r5, #3
 8004ab0:	e797      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004ab6:	2501      	movs	r5, #1
 8004ab8:	e793      	b.n	80049e2 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8004aba:	230b      	movs	r3, #11
 8004abc:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 8004abe:	2502      	movs	r5, #2
 8004ac0:	e78f      	b.n	80049e2 <USBH_HandleControl+0x2e>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8004ac2:	7903      	ldrb	r3, [r0, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	f000 fa2c 	bl	8004f24 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004acc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8004ad0:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004ad6:	2501      	movs	r5, #1
      break;
 8004ad8:	e783      	b.n	80049e2 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004ada:	7901      	ldrb	r1, [r0, #4]
 8004adc:	f7ff fa56 	bl	8003f8c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004ae0:	2801      	cmp	r0, #1
 8004ae2:	d005      	beq.n	8004af0 <USBH_HandleControl+0x13c>
      else if (URB_Status == USBH_URB_ERROR)
 8004ae4:	2804      	cmp	r0, #4
 8004ae6:	d007      	beq.n	8004af8 <USBH_HandleControl+0x144>
        if (URB_Status == USBH_URB_STALL)
 8004ae8:	2805      	cmp	r0, #5
 8004aea:	d04e      	beq.n	8004b8a <USBH_HandleControl+0x1d6>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004aec:	2501      	movs	r5, #1
 8004aee:	e778      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8004af0:	230d      	movs	r3, #13
 8004af2:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8004af4:	2500      	movs	r5, #0
 8004af6:	e774      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8004af8:	230b      	movs	r3, #11
 8004afa:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004afc:	2501      	movs	r5, #1
 8004afe:	e770      	b.n	80049e2 <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8004b00:	2501      	movs	r5, #1
 8004b02:	9500      	str	r5, [sp, #0]
 8004b04:	7943      	ldrb	r3, [r0, #5]
 8004b06:	2200      	movs	r2, #0
 8004b08:	4611      	mov	r1, r2
 8004b0a:	f000 f9f5 	bl	8004ef8 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8004b0e:	f8d4 33c4 	ldr.w	r3, [r4, #964]	@ 0x3c4
 8004b12:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004b14:	230a      	movs	r3, #10
 8004b16:	7623      	strb	r3, [r4, #24]
      break;
 8004b18:	e763      	b.n	80049e2 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004b1a:	7941      	ldrb	r1, [r0, #5]
 8004b1c:	f7ff fa36 	bl	8003f8c <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8004b20:	2801      	cmp	r0, #1
 8004b22:	d005      	beq.n	8004b30 <USBH_HandleControl+0x17c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004b24:	2802      	cmp	r0, #2
 8004b26:	d007      	beq.n	8004b38 <USBH_HandleControl+0x184>
        if (URB_Status == USBH_URB_ERROR)
 8004b28:	2804      	cmp	r0, #4
 8004b2a:	d009      	beq.n	8004b40 <USBH_HandleControl+0x18c>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004b2c:	2501      	movs	r5, #1
 8004b2e:	e758      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 8004b30:	230d      	movs	r3, #13
 8004b32:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8004b34:	2500      	movs	r5, #0
 8004b36:	e754      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8004b38:	2309      	movs	r3, #9
 8004b3a:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	e750      	b.n	80049e2 <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8004b40:	230b      	movs	r3, #11
 8004b42:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004b44:	2501      	movs	r5, #1
 8004b46:	e74c      	b.n	80049e2 <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004b48:	7e43      	ldrb	r3, [r0, #25]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	7643      	strb	r3, [r0, #25]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d803      	bhi.n	8004b5c <USBH_HandleControl+0x1a8>
        phost->Control.state = CTRL_SETUP;
 8004b54:	2501      	movs	r5, #1
 8004b56:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8004b58:	7085      	strb	r5, [r0, #2]
 8004b5a:	e742      	b.n	80049e2 <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004b5c:	f8d0 33d4 	ldr.w	r3, [r0, #980]	@ 0x3d4
 8004b60:	2106      	movs	r1, #6
 8004b62:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8004b64:	2500      	movs	r5, #0
 8004b66:	7665      	strb	r5, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004b68:	7961      	ldrb	r1, [r4, #5]
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 fa4b 	bl	8005006 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004b70:	7921      	ldrb	r1, [r4, #4]
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fa47 	bl	8005006 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8004b78:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 8004b7a:	2502      	movs	r5, #2
 8004b7c:	e731      	b.n	80049e2 <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 8004b7e:	2501      	movs	r5, #1
 8004b80:	e72f      	b.n	80049e2 <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 8004b82:	2503      	movs	r5, #3
 8004b84:	e72d      	b.n	80049e2 <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004b86:	2501      	movs	r5, #1
 8004b88:	e72b      	b.n	80049e2 <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 8004b8a:	2503      	movs	r5, #3
 8004b8c:	e729      	b.n	80049e2 <USBH_HandleControl+0x2e>

08004b8e <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004b8e:	880b      	ldrh	r3, [r1, #0]
 8004b90:	7802      	ldrb	r2, [r0, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8004b96:	7803      	ldrb	r3, [r0, #0]
}
 8004b98:	4418      	add	r0, r3
 8004b9a:	4770      	bx	lr

08004b9c <USBH_ParseCfgDesc>:
{
 8004b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ba0:	b083      	sub	sp, #12
  if (buf == NULL)
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	f000 80b2 	beq.w	8004d0c <USBH_ParseCfgDesc+0x170>
 8004ba8:	4605      	mov	r5, r0
 8004baa:	460c      	mov	r4, r1
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8004bac:	780b      	ldrb	r3, [r1, #0]
 8004bae:	2b09      	cmp	r3, #9
 8004bb0:	d001      	beq.n	8004bb6 <USBH_ParseCfgDesc+0x1a>
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8004bb2:	2309      	movs	r3, #9
 8004bb4:	700b      	strb	r3, [r1, #0]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8004bb6:	7823      	ldrb	r3, [r4, #0]
 8004bb8:	f885 3338 	strb.w	r3, [r5, #824]	@ 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8004bbc:	7863      	ldrb	r3, [r4, #1]
 8004bbe:	f885 3339 	strb.w	r3, [r5, #825]	@ 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8004bc2:	78a3      	ldrb	r3, [r4, #2]
 8004bc4:	78e1      	ldrb	r1, [r4, #3]
 8004bc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	bf28      	it	cs
 8004bd0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8004bd4:	f8a5 333a 	strh.w	r3, [r5, #826]	@ 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8004bd8:	7923      	ldrb	r3, [r4, #4]
 8004bda:	f885 333c 	strb.w	r3, [r5, #828]	@ 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8004bde:	7963      	ldrb	r3, [r4, #5]
 8004be0:	f885 333d 	strb.w	r3, [r5, #829]	@ 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8004be4:	79a3      	ldrb	r3, [r4, #6]
 8004be6:	f885 333e 	strb.w	r3, [r5, #830]	@ 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8004bea:	79e3      	ldrb	r3, [r4, #7]
 8004bec:	f885 333f 	strb.w	r3, [r5, #831]	@ 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8004bf0:	7a23      	ldrb	r3, [r4, #8]
 8004bf2:	f885 3340 	strb.w	r3, [r5, #832]	@ 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004bf6:	2a09      	cmp	r2, #9
 8004bf8:	f240 808a 	bls.w	8004d10 <USBH_ParseCfgDesc+0x174>
    ptr = USB_LEN_CFG_DESC;
 8004bfc:	2309      	movs	r3, #9
 8004bfe:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8004c02:	2600      	movs	r6, #0
  USBH_StatusTypeDef           status = USBH_OK;
 8004c04:	4637      	mov	r7, r6
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004c06:	2e01      	cmp	r6, #1
 8004c08:	d877      	bhi.n	8004cfa <USBH_ParseCfgDesc+0x15e>
 8004c0a:	f8b5 233a 	ldrh.w	r2, [r5, #826]	@ 0x33a
 8004c0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d971      	bls.n	8004cfa <USBH_ParseCfgDesc+0x15e>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004c16:	f10d 0106 	add.w	r1, sp, #6
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff ffb7 	bl	8004b8e <USBH_GetNextDesc>
 8004c20:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8004c22:	7843      	ldrb	r3, [r0, #1]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d1ee      	bne.n	8004c06 <USBH_ParseCfgDesc+0x6a>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8004c28:	7803      	ldrb	r3, [r0, #0]
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d001      	beq.n	8004c32 <USBH_ParseCfgDesc+0x96>
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8004c2e:	2309      	movs	r3, #9
 8004c30:	7003      	strb	r3, [r0, #0]
        pif = &cfg_desc->Itf_Desc[if_ix];
 8004c32:	46b1      	mov	r9, r6
 8004c34:	f505 704e 	add.w	r0, r5, #824	@ 0x338
 8004c38:	231a      	movs	r3, #26
 8004c3a:	fb06 f303 	mul.w	r3, r6, r3
 8004c3e:	3308      	adds	r3, #8
 8004c40:	4418      	add	r0, r3
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8004c42:	4621      	mov	r1, r4
 8004c44:	3002      	adds	r0, #2
 8004c46:	f7ff fe17 	bl	8004878 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 8004c4a:	f04f 0800 	mov.w	r8, #0
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004c4e:	e014      	b.n	8004c7a <USBH_ParseCfgDesc+0xde>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8004c50:	2307      	movs	r3, #7
 8004c52:	7023      	strb	r3, [r4, #0]
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8004c54:	f505 714e 	add.w	r1, r5, #824	@ 0x338
 8004c58:	f108 0801 	add.w	r8, r8, #1
 8004c5c:	231a      	movs	r3, #26
 8004c5e:	fb03 f309 	mul.w	r3, r3, r9
 8004c62:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004c66:	3308      	adds	r3, #8
 8004c68:	4419      	add	r1, r3
            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	3104      	adds	r1, #4
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f7ff fe15 	bl	800489e <USBH_ParseEPDesc>
 8004c74:	4607      	mov	r7, r0
            ep_ix++;
 8004c76:	fa5f f888 	uxtb.w	r8, r8
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004c7a:	f1b8 0f01 	cmp.w	r8, #1
 8004c7e:	d832      	bhi.n	8004ce6 <USBH_ParseCfgDesc+0x14a>
 8004c80:	231a      	movs	r3, #26
 8004c82:	fb03 5309 	mla	r3, r3, r9, r5
 8004c86:	f893 3346 	ldrb.w	r3, [r3, #838]	@ 0x346
 8004c8a:	4543      	cmp	r3, r8
 8004c8c:	d92b      	bls.n	8004ce6 <USBH_ParseCfgDesc+0x14a>
 8004c8e:	f8b5 233a 	ldrh.w	r2, [r5, #826]	@ 0x33a
 8004c92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d925      	bls.n	8004ce6 <USBH_ParseCfgDesc+0x14a>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004c9a:	f10d 0106 	add.w	r1, sp, #6
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff ff75 	bl	8004b8e <USBH_GetNextDesc>
 8004ca4:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004ca6:	7843      	ldrb	r3, [r0, #1]
 8004ca8:	2b05      	cmp	r3, #5
 8004caa:	d1e6      	bne.n	8004c7a <USBH_ParseCfgDesc+0xde>
            if ((pif->bInterfaceClass == 0x01U) &&
 8004cac:	231a      	movs	r3, #26
 8004cae:	fb03 5309 	mla	r3, r3, r9, r5
 8004cb2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d1ca      	bne.n	8004c50 <USBH_ParseCfgDesc+0xb4>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8004cba:	231a      	movs	r3, #26
 8004cbc:	fb03 5309 	mla	r3, r3, r9, r5
 8004cc0:	f893 3348 	ldrb.w	r3, [r3, #840]	@ 0x348
 8004cc4:	3b02      	subs	r3, #2
 8004cc6:	b2db      	uxtb	r3, r3
            if ((pif->bInterfaceClass == 0x01U) &&
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d8c1      	bhi.n	8004c50 <USBH_ParseCfgDesc+0xb4>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8004ccc:	231a      	movs	r3, #26
 8004cce:	fb03 5309 	mla	r3, r3, r9, r5
 8004cd2:	f893 3349 	ldrb.w	r3, [r3, #841]	@ 0x349
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1bc      	bne.n	8004c54 <USBH_ParseCfgDesc+0xb8>
 8004cda:	7803      	ldrb	r3, [r0, #0]
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	d0b9      	beq.n	8004c54 <USBH_ParseCfgDesc+0xb8>
                pdesc->bLength = 0x09U;
 8004ce0:	2309      	movs	r3, #9
 8004ce2:	7003      	strb	r3, [r0, #0]
 8004ce4:	e7b6      	b.n	8004c54 <USBH_ParseCfgDesc+0xb8>
        if (ep_ix < pif->bNumEndpoints)
 8004ce6:	231a      	movs	r3, #26
 8004ce8:	fb03 5909 	mla	r9, r3, r9, r5
 8004cec:	f899 3346 	ldrb.w	r3, [r9, #838]	@ 0x346
 8004cf0:	4543      	cmp	r3, r8
 8004cf2:	d812      	bhi.n	8004d1a <USBH_ParseCfgDesc+0x17e>
        if_ix++;
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	b2f6      	uxtb	r6, r6
 8004cf8:	e785      	b.n	8004c06 <USBH_ParseCfgDesc+0x6a>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8004cfa:	f895 333c 	ldrb.w	r3, [r5, #828]	@ 0x33c
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	bf28      	it	cs
 8004d02:	2302      	movcs	r3, #2
 8004d04:	42b3      	cmp	r3, r6
 8004d06:	d904      	bls.n	8004d12 <USBH_ParseCfgDesc+0x176>
      return USBH_NOT_SUPPORTED;
 8004d08:	2703      	movs	r7, #3
 8004d0a:	e002      	b.n	8004d12 <USBH_ParseCfgDesc+0x176>
    return USBH_FAIL;
 8004d0c:	2702      	movs	r7, #2
 8004d0e:	e000      	b.n	8004d12 <USBH_ParseCfgDesc+0x176>
  USBH_StatusTypeDef           status = USBH_OK;
 8004d10:	2700      	movs	r7, #0
}
 8004d12:	4638      	mov	r0, r7
 8004d14:	b003      	add	sp, #12
 8004d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return USBH_NOT_SUPPORTED;
 8004d1a:	2703      	movs	r7, #3
 8004d1c:	e7f9      	b.n	8004d12 <USBH_ParseCfgDesc+0x176>

08004d1e <USBH_CtlReq>:
{
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8004d22:	7880      	ldrb	r0, [r0, #2]
 8004d24:	2801      	cmp	r0, #1
 8004d26:	d003      	beq.n	8004d30 <USBH_CtlReq+0x12>
 8004d28:	2802      	cmp	r0, #2
 8004d2a:	d008      	beq.n	8004d3e <USBH_CtlReq+0x20>
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	e005      	b.n	8004d3c <USBH_CtlReq+0x1e>
      phost->Control.buff = buff;
 8004d30:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8004d32:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8004d34:	2301      	movs	r3, #1
 8004d36:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	70a3      	strb	r3, [r4, #2]
}
 8004d3c:	bd10      	pop	{r4, pc}
      status = USBH_HandleControl(phost);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7ff fe38 	bl	80049b4 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8004d44:	b130      	cbz	r0, 8004d54 <USBH_CtlReq+0x36>
 8004d46:	2803      	cmp	r0, #3
 8004d48:	d004      	beq.n	8004d54 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8004d4a:	2802      	cmp	r0, #2
 8004d4c:	d1f6      	bne.n	8004d3c <USBH_CtlReq+0x1e>
        phost->RequestState = CMD_SEND;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	70a3      	strb	r3, [r4, #2]
 8004d52:	e7f3      	b.n	8004d3c <USBH_CtlReq+0x1e>
        phost->RequestState = CMD_SEND;
 8004d54:	2301      	movs	r3, #1
 8004d56:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	7623      	strb	r3, [r4, #24]
 8004d5c:	e7ee      	b.n	8004d3c <USBH_CtlReq+0x1e>

08004d5e <USBH_GetDescriptor>:
{
 8004d5e:	b508      	push	{r3, lr}
 8004d60:	468e      	mov	lr, r1
 8004d62:	4694      	mov	ip, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8004d6a:	7883      	ldrb	r3, [r0, #2]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 8004d70:	f7ff ffd5 	bl	8004d1e <USBH_CtlReq>
}
 8004d74:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004d76:	f06e 0e7f 	orn	lr, lr, #127	@ 0x7f
 8004d7a:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004d7e:	2306      	movs	r3, #6
 8004d80:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8004d82:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004d86:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8004d8a:	f5bc 7f40 	cmp.w	ip, #768	@ 0x300
 8004d8e:	d003      	beq.n	8004d98 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8004d94:	82c2      	strh	r2, [r0, #22]
 8004d96:	e7eb      	b.n	8004d70 <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8004d98:	f240 4309 	movw	r3, #1033	@ 0x409
 8004d9c:	8283      	strh	r3, [r0, #20]
 8004d9e:	e7f9      	b.n	8004d94 <USBH_GetDescriptor+0x36>

08004da0 <USBH_Get_DevDesc>:
  if (length > sizeof(phost->device.Data))
 8004da0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004da4:	d815      	bhi.n	8004dd2 <USBH_Get_DevDesc+0x32>
{
 8004da6:	b570      	push	{r4, r5, r6, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	4605      	mov	r5, r0
 8004dac:	460c      	mov	r4, r1
                              USB_DESC_DEVICE, phost->device.Data, length);
 8004dae:	f500 768e 	add.w	r6, r0, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8004db2:	9100      	str	r1, [sp, #0]
 8004db4:	4633      	mov	r3, r6
 8004db6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dba:	2100      	movs	r1, #0
 8004dbc:	f7ff ffcf 	bl	8004d5e <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004dc0:	b108      	cbz	r0, 8004dc6 <USBH_Get_DevDesc+0x26>
}
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f7ff fcda 	bl	8004784 <USBH_ParseDevDesc>
 8004dd0:	e7f7      	b.n	8004dc2 <USBH_Get_DevDesc+0x22>
    return USBH_NOT_SUPPORTED;
 8004dd2:	2003      	movs	r0, #3
}
 8004dd4:	4770      	bx	lr

08004dd6 <USBH_Get_CfgDesc>:
  if (length > sizeof(phost->device.CfgDesc_Raw))
 8004dd6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004dda:	d815      	bhi.n	8004e08 <USBH_Get_CfgDesc+0x32>
{
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	4604      	mov	r4, r0
 8004de2:	460d      	mov	r5, r1
 8004de4:	f100 061c 	add.w	r6, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8004de8:	9100      	str	r1, [sp, #0]
 8004dea:	4633      	mov	r3, r6
 8004dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004df0:	2100      	movs	r1, #0
 8004df2:	f7ff ffb4 	bl	8004d5e <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004df6:	b108      	cbz	r0, 8004dfc <USBH_Get_CfgDesc+0x26>
}
 8004df8:	b002      	add	sp, #8
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_ParseCfgDesc(phost, pData, length);
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7ff fecb 	bl	8004b9c <USBH_ParseCfgDesc>
 8004e06:	e7f7      	b.n	8004df8 <USBH_Get_CfgDesc+0x22>
    return USBH_NOT_SUPPORTED;
 8004e08:	2003      	movs	r0, #3
}
 8004e0a:	4770      	bx	lr

08004e0c <USBH_Get_StringDesc>:
{
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b083      	sub	sp, #12
  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e14:	d816      	bhi.n	8004e44 <USBH_Get_StringDesc+0x38>
 8004e16:	4615      	mov	r5, r2
 8004e18:	461c      	mov	r4, r3
 8004e1a:	b1aa      	cbz	r2, 8004e48 <USBH_Get_StringDesc+0x3c>
                              phost->device.Data, length);
 8004e1c:	f500 778e 	add.w	r7, r0, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	463b      	mov	r3, r7
 8004e24:	f441 7240 	orr.w	r2, r1, #768	@ 0x300
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f7ff ff98 	bl	8004d5e <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004e2e:	4606      	mov	r6, r0
 8004e30:	b110      	cbz	r0, 8004e38 <USBH_Get_StringDesc+0x2c>
}
 8004e32:	4630      	mov	r0, r6
 8004e34:	b003      	add	sp, #12
 8004e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8004e38:	4622      	mov	r2, r4
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f7ff fda0 	bl	8004982 <USBH_ParseStringDesc>
 8004e42:	e7f6      	b.n	8004e32 <USBH_Get_StringDesc+0x26>
    return USBH_NOT_SUPPORTED;
 8004e44:	2603      	movs	r6, #3
 8004e46:	e7f4      	b.n	8004e32 <USBH_Get_StringDesc+0x26>
 8004e48:	2603      	movs	r6, #3
 8004e4a:	e7f2      	b.n	8004e32 <USBH_Get_StringDesc+0x26>

08004e4c <USBH_SetAddress>:
{
 8004e4c:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004e4e:	7883      	ldrb	r3, [r0, #2]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d004      	beq.n	8004e5e <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004e54:	2200      	movs	r2, #0
 8004e56:	4611      	mov	r1, r2
 8004e58:	f7ff ff61 	bl	8004d1e <USBH_CtlReq>
}
 8004e5c:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004e5e:	2300      	movs	r3, #0
 8004e60:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004e62:	2205      	movs	r2, #5
 8004e64:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004e66:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004e68:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004e6a:	82c3      	strh	r3, [r0, #22]
 8004e6c:	e7f2      	b.n	8004e54 <USBH_SetAddress+0x8>

08004e6e <USBH_SetCfg>:
{
 8004e6e:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004e70:	7883      	ldrb	r3, [r0, #2]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d004      	beq.n	8004e80 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004e76:	2200      	movs	r2, #0
 8004e78:	4611      	mov	r1, r2
 8004e7a:	f7ff ff50 	bl	8004d1e <USBH_CtlReq>
}
 8004e7e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004e80:	2300      	movs	r3, #0
 8004e82:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004e84:	2209      	movs	r2, #9
 8004e86:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004e88:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004e8a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004e8c:	82c3      	strh	r3, [r0, #22]
 8004e8e:	e7f2      	b.n	8004e76 <USBH_SetCfg+0x8>

08004e90 <USBH_SetFeature>:
{
 8004e90:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004e92:	7883      	ldrb	r3, [r0, #2]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d004      	beq.n	8004ea2 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	f7ff ff3f 	bl	8004d1e <USBH_CtlReq>
}
 8004ea0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004eaa:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004eac:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004eae:	82c3      	strh	r3, [r0, #22]
 8004eb0:	e7f2      	b.n	8004e98 <USBH_SetFeature+0x8>

08004eb2 <USBH_ClrFeature>:
{
 8004eb2:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004eb4:	7883      	ldrb	r3, [r0, #2]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d004      	beq.n	8004ec4 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	f7ff ff2e 	bl	8004d1e <USBH_CtlReq>
}
 8004ec2:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004ed0:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004ed2:	82c3      	strh	r3, [r0, #22]
 8004ed4:	e7f1      	b.n	8004eba <USBH_ClrFeature+0x8>

08004ed6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	460b      	mov	r3, r1
 8004edc:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004ede:	2400      	movs	r4, #0
 8004ee0:	9403      	str	r4, [sp, #12]
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	9202      	str	r2, [sp, #8]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	9400      	str	r4, [sp, #0]
 8004eea:	4623      	mov	r3, r4
 8004eec:	4622      	mov	r2, r4
 8004eee:	f7ff f8b9 	bl	8004064 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd10      	pop	{r4, pc}

08004ef8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004ef8:	b530      	push	{r4, r5, lr}
 8004efa:	b085      	sub	sp, #20
 8004efc:	460c      	mov	r4, r1
 8004efe:	4619      	mov	r1, r3
 8004f00:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004f04:	f890 531d 	ldrb.w	r5, [r0, #797]	@ 0x31d
 8004f08:	b105      	cbz	r5, 8004f0c <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8004f0a:	2300      	movs	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004f0c:	9303      	str	r3, [sp, #12]
 8004f0e:	9202      	str	r2, [sp, #8]
 8004f10:	9401      	str	r4, [sp, #4]
 8004f12:	2301      	movs	r3, #1
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2300      	movs	r3, #0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f7ff f8a3 	bl	8004064 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004f1e:	2000      	movs	r0, #0
 8004f20:	b005      	add	sp, #20
 8004f22:	bd30      	pop	{r4, r5, pc}

08004f24 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004f24:	b530      	push	{r4, r5, lr}
 8004f26:	b085      	sub	sp, #20
 8004f28:	460d      	mov	r5, r1
 8004f2a:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004f2c:	2400      	movs	r4, #0
 8004f2e:	9403      	str	r4, [sp, #12]
 8004f30:	9202      	str	r2, [sp, #8]
 8004f32:	9501      	str	r5, [sp, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	9200      	str	r2, [sp, #0]
 8004f38:	4623      	mov	r3, r4
 8004f3a:	f7ff f893 	bl	8004064 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004f3e:	4620      	mov	r0, r4
 8004f40:	b005      	add	sp, #20
 8004f42:	bd30      	pop	{r4, r5, pc}

08004f44 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004f44:	b530      	push	{r4, r5, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	460c      	mov	r4, r1
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004f50:	f890 531d 	ldrb.w	r5, [r0, #797]	@ 0x31d
 8004f54:	b105      	cbz	r5, 8004f58 <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8004f56:	2300      	movs	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004f58:	9303      	str	r3, [sp, #12]
 8004f5a:	9202      	str	r2, [sp, #8]
 8004f5c:	9401      	str	r4, [sp, #4]
 8004f5e:	2301      	movs	r3, #1
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2302      	movs	r3, #2
 8004f64:	2200      	movs	r2, #0
 8004f66:	f7ff f87d 	bl	8004064 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	b005      	add	sp, #20
 8004f6e:	bd30      	pop	{r4, r5, pc}

08004f70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004f70:	b530      	push	{r4, r5, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	460d      	mov	r5, r1
 8004f76:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004f78:	2400      	movs	r4, #0
 8004f7a:	9403      	str	r4, [sp, #12]
 8004f7c:	9202      	str	r2, [sp, #8]
 8004f7e:	9501      	str	r5, [sp, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	9200      	str	r2, [sp, #0]
 8004f84:	2302      	movs	r3, #2
 8004f86:	f7ff f86d 	bl	8004064 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	b005      	add	sp, #20
 8004f8e:	bd30      	pop	{r4, r5, pc}

08004f90 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d80c      	bhi.n	8004fb0 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004f96:	f103 02e0 	add.w	r2, r3, #224	@ 0xe0
 8004f9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004f9e:	6852      	ldr	r2, [r2, #4]
 8004fa0:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8004fa4:	d002      	beq.n	8004fac <USBH_GetFreePipe+0x1c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	e7f2      	b.n	8004f92 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8004fac:	4618      	mov	r0, r3
 8004fae:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8004fb0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8004fb4:	4770      	bx	lr

08004fb6 <USBH_OpenPipe>:
{
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004fba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004fbe:	9402      	str	r4, [sp, #8]
 8004fc0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004fc4:	9401      	str	r4, [sp, #4]
 8004fc6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004fca:	9400      	str	r4, [sp, #0]
 8004fcc:	f7ff f82f 	bl	800402e <USBH_LL_OpenPipe>
}
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	b004      	add	sp, #16
 8004fd4:	bd10      	pop	{r4, pc}

08004fd6 <USBH_ClosePipe>:
{
 8004fd6:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8004fd8:	f7ff f83c 	bl	8004054 <USBH_LL_ClosePipe>
}
 8004fdc:	2000      	movs	r0, #0
 8004fde:	bd08      	pop	{r3, pc}

08004fe0 <USBH_AllocPipe>:
{
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 8004fe6:	f7ff ffd3 	bl	8004f90 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004fea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	d007      	beq.n	8005002 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8004ff2:	f000 030f 	and.w	r3, r0, #15
 8004ff6:	f445 4500 	orr.w	r5, r5, #32768	@ 0x8000
 8004ffa:	33e0      	adds	r3, #224	@ 0xe0
 8004ffc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005000:	6065      	str	r5, [r4, #4]
}
 8005002:	b2c0      	uxtb	r0, r0
 8005004:	bd38      	pop	{r3, r4, r5, pc}

08005006 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8005006:	290f      	cmp	r1, #15
 8005008:	d806      	bhi.n	8005018 <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 800500a:	31e0      	adds	r1, #224	@ 0xe0
 800500c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005010:	6843      	ldr	r3, [r0, #4]
 8005012:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005016:	6043      	str	r3, [r0, #4]
}
 8005018:	2000      	movs	r0, #0
 800501a:	4770      	bx	lr

0800501c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800501c:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800501e:	4602      	mov	r2, r0
 8005020:	b100      	cbz	r0, 8005024 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8005022:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8005024:	2101      	movs	r1, #1
 8005026:	4802      	ldr	r0, [pc, #8]	@ (8005030 <MX_DriverVbusFS+0x14>)
 8005028:	f7fb fdca 	bl	8000bc0 <HAL_GPIO_WritePin>
}
 800502c:	bd08      	pop	{r3, pc}
 800502e:	bf00      	nop
 8005030:	40020800 	.word	0x40020800

08005034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800506c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005038:	f7fe fcbc 	bl	80039b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800503c:	480c      	ldr	r0, [pc, #48]	@ (8005070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800503e:	490d      	ldr	r1, [pc, #52]	@ (8005074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005040:	4a0d      	ldr	r2, [pc, #52]	@ (8005078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005044:	e002      	b.n	800504c <LoopCopyDataInit>

08005046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800504a:	3304      	adds	r3, #4

0800504c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800504c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800504e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005050:	d3f9      	bcc.n	8005046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005052:	4a0a      	ldr	r2, [pc, #40]	@ (800507c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005054:	4c0a      	ldr	r4, [pc, #40]	@ (8005080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005058:	e001      	b.n	800505e <LoopFillZerobss>

0800505a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800505a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800505c:	3204      	adds	r2, #4

0800505e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800505e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005060:	d3fb      	bcc.n	800505a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005062:	f000 f8ed 	bl	8005240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005066:	f7fb fbb9 	bl	80007dc <main>
  bx  lr    
 800506a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800506c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005074:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005078:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 800507c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8005080:	20000a98 	.word	0x20000a98

08005084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005084:	e7fe      	b.n	8005084 <ADC_IRQHandler>
	...

08005088 <malloc>:
 8005088:	4b02      	ldr	r3, [pc, #8]	@ (8005094 <malloc+0xc>)
 800508a:	4601      	mov	r1, r0
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f000 b82d 	b.w	80050ec <_malloc_r>
 8005092:	bf00      	nop
 8005094:	2000002c 	.word	0x2000002c

08005098 <free>:
 8005098:	4b02      	ldr	r3, [pc, #8]	@ (80050a4 <free+0xc>)
 800509a:	4601      	mov	r1, r0
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	f000 b8f5 	b.w	800528c <_free_r>
 80050a2:	bf00      	nop
 80050a4:	2000002c 	.word	0x2000002c

080050a8 <sbrk_aligned>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	4e0f      	ldr	r6, [pc, #60]	@ (80050e8 <sbrk_aligned+0x40>)
 80050ac:	460c      	mov	r4, r1
 80050ae:	6831      	ldr	r1, [r6, #0]
 80050b0:	4605      	mov	r5, r0
 80050b2:	b911      	cbnz	r1, 80050ba <sbrk_aligned+0x12>
 80050b4:	f000 f8ae 	bl	8005214 <_sbrk_r>
 80050b8:	6030      	str	r0, [r6, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 f8a9 	bl	8005214 <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d103      	bne.n	80050ce <sbrk_aligned+0x26>
 80050c6:	f04f 34ff 	mov.w	r4, #4294967295
 80050ca:	4620      	mov	r0, r4
 80050cc:	bd70      	pop	{r4, r5, r6, pc}
 80050ce:	1cc4      	adds	r4, r0, #3
 80050d0:	f024 0403 	bic.w	r4, r4, #3
 80050d4:	42a0      	cmp	r0, r4
 80050d6:	d0f8      	beq.n	80050ca <sbrk_aligned+0x22>
 80050d8:	1a21      	subs	r1, r4, r0
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 f89a 	bl	8005214 <_sbrk_r>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d1f2      	bne.n	80050ca <sbrk_aligned+0x22>
 80050e4:	e7ef      	b.n	80050c6 <sbrk_aligned+0x1e>
 80050e6:	bf00      	nop
 80050e8:	20000950 	.word	0x20000950

080050ec <_malloc_r>:
 80050ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f0:	1ccd      	adds	r5, r1, #3
 80050f2:	f025 0503 	bic.w	r5, r5, #3
 80050f6:	3508      	adds	r5, #8
 80050f8:	2d0c      	cmp	r5, #12
 80050fa:	bf38      	it	cc
 80050fc:	250c      	movcc	r5, #12
 80050fe:	2d00      	cmp	r5, #0
 8005100:	4606      	mov	r6, r0
 8005102:	db01      	blt.n	8005108 <_malloc_r+0x1c>
 8005104:	42a9      	cmp	r1, r5
 8005106:	d904      	bls.n	8005112 <_malloc_r+0x26>
 8005108:	230c      	movs	r3, #12
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	2000      	movs	r0, #0
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051e8 <_malloc_r+0xfc>
 8005116:	f000 f869 	bl	80051ec <__malloc_lock>
 800511a:	f8d8 3000 	ldr.w	r3, [r8]
 800511e:	461c      	mov	r4, r3
 8005120:	bb44      	cbnz	r4, 8005174 <_malloc_r+0x88>
 8005122:	4629      	mov	r1, r5
 8005124:	4630      	mov	r0, r6
 8005126:	f7ff ffbf 	bl	80050a8 <sbrk_aligned>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	4604      	mov	r4, r0
 800512e:	d158      	bne.n	80051e2 <_malloc_r+0xf6>
 8005130:	f8d8 4000 	ldr.w	r4, [r8]
 8005134:	4627      	mov	r7, r4
 8005136:	2f00      	cmp	r7, #0
 8005138:	d143      	bne.n	80051c2 <_malloc_r+0xd6>
 800513a:	2c00      	cmp	r4, #0
 800513c:	d04b      	beq.n	80051d6 <_malloc_r+0xea>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	4639      	mov	r1, r7
 8005142:	4630      	mov	r0, r6
 8005144:	eb04 0903 	add.w	r9, r4, r3
 8005148:	f000 f864 	bl	8005214 <_sbrk_r>
 800514c:	4581      	cmp	r9, r0
 800514e:	d142      	bne.n	80051d6 <_malloc_r+0xea>
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	1a6d      	subs	r5, r5, r1
 8005154:	4629      	mov	r1, r5
 8005156:	4630      	mov	r0, r6
 8005158:	f7ff ffa6 	bl	80050a8 <sbrk_aligned>
 800515c:	3001      	adds	r0, #1
 800515e:	d03a      	beq.n	80051d6 <_malloc_r+0xea>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	442b      	add	r3, r5
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	f8d8 3000 	ldr.w	r3, [r8]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	bb62      	cbnz	r2, 80051c8 <_malloc_r+0xdc>
 800516e:	f8c8 7000 	str.w	r7, [r8]
 8005172:	e00f      	b.n	8005194 <_malloc_r+0xa8>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	1b52      	subs	r2, r2, r5
 8005178:	d420      	bmi.n	80051bc <_malloc_r+0xd0>
 800517a:	2a0b      	cmp	r2, #11
 800517c:	d917      	bls.n	80051ae <_malloc_r+0xc2>
 800517e:	1961      	adds	r1, r4, r5
 8005180:	42a3      	cmp	r3, r4
 8005182:	6025      	str	r5, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	6059      	strne	r1, [r3, #4]
 8005188:	6863      	ldr	r3, [r4, #4]
 800518a:	bf08      	it	eq
 800518c:	f8c8 1000 	streq.w	r1, [r8]
 8005190:	5162      	str	r2, [r4, r5]
 8005192:	604b      	str	r3, [r1, #4]
 8005194:	4630      	mov	r0, r6
 8005196:	f000 f82f 	bl	80051f8 <__malloc_unlock>
 800519a:	f104 000b 	add.w	r0, r4, #11
 800519e:	1d23      	adds	r3, r4, #4
 80051a0:	f020 0007 	bic.w	r0, r0, #7
 80051a4:	1ac2      	subs	r2, r0, r3
 80051a6:	bf1c      	itt	ne
 80051a8:	1a1b      	subne	r3, r3, r0
 80051aa:	50a3      	strne	r3, [r4, r2]
 80051ac:	e7af      	b.n	800510e <_malloc_r+0x22>
 80051ae:	6862      	ldr	r2, [r4, #4]
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	bf0c      	ite	eq
 80051b4:	f8c8 2000 	streq.w	r2, [r8]
 80051b8:	605a      	strne	r2, [r3, #4]
 80051ba:	e7eb      	b.n	8005194 <_malloc_r+0xa8>
 80051bc:	4623      	mov	r3, r4
 80051be:	6864      	ldr	r4, [r4, #4]
 80051c0:	e7ae      	b.n	8005120 <_malloc_r+0x34>
 80051c2:	463c      	mov	r4, r7
 80051c4:	687f      	ldr	r7, [r7, #4]
 80051c6:	e7b6      	b.n	8005136 <_malloc_r+0x4a>
 80051c8:	461a      	mov	r2, r3
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d1fb      	bne.n	80051c8 <_malloc_r+0xdc>
 80051d0:	2300      	movs	r3, #0
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	e7de      	b.n	8005194 <_malloc_r+0xa8>
 80051d6:	230c      	movs	r3, #12
 80051d8:	6033      	str	r3, [r6, #0]
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 f80c 	bl	80051f8 <__malloc_unlock>
 80051e0:	e794      	b.n	800510c <_malloc_r+0x20>
 80051e2:	6005      	str	r5, [r0, #0]
 80051e4:	e7d6      	b.n	8005194 <_malloc_r+0xa8>
 80051e6:	bf00      	nop
 80051e8:	20000954 	.word	0x20000954

080051ec <__malloc_lock>:
 80051ec:	4801      	ldr	r0, [pc, #4]	@ (80051f4 <__malloc_lock+0x8>)
 80051ee:	f000 b84b 	b.w	8005288 <__retarget_lock_acquire_recursive>
 80051f2:	bf00      	nop
 80051f4:	20000a94 	.word	0x20000a94

080051f8 <__malloc_unlock>:
 80051f8:	4801      	ldr	r0, [pc, #4]	@ (8005200 <__malloc_unlock+0x8>)
 80051fa:	f000 b846 	b.w	800528a <__retarget_lock_release_recursive>
 80051fe:	bf00      	nop
 8005200:	20000a94 	.word	0x20000a94

08005204 <memset>:
 8005204:	4402      	add	r2, r0
 8005206:	4603      	mov	r3, r0
 8005208:	4293      	cmp	r3, r2
 800520a:	d100      	bne.n	800520e <memset+0xa>
 800520c:	4770      	bx	lr
 800520e:	f803 1b01 	strb.w	r1, [r3], #1
 8005212:	e7f9      	b.n	8005208 <memset+0x4>

08005214 <_sbrk_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d06      	ldr	r5, [pc, #24]	@ (8005230 <_sbrk_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4604      	mov	r4, r0
 800521c:	4608      	mov	r0, r1
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	f7fe fba4 	bl	800396c <_sbrk>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_sbrk_r+0x1a>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_sbrk_r+0x1a>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20000a90 	.word	0x20000a90

08005234 <__errno>:
 8005234:	4b01      	ldr	r3, [pc, #4]	@ (800523c <__errno+0x8>)
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000002c 	.word	0x2000002c

08005240 <__libc_init_array>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4d0d      	ldr	r5, [pc, #52]	@ (8005278 <__libc_init_array+0x38>)
 8005244:	4c0d      	ldr	r4, [pc, #52]	@ (800527c <__libc_init_array+0x3c>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	2600      	movs	r6, #0
 800524c:	42a6      	cmp	r6, r4
 800524e:	d109      	bne.n	8005264 <__libc_init_array+0x24>
 8005250:	4d0b      	ldr	r5, [pc, #44]	@ (8005280 <__libc_init_array+0x40>)
 8005252:	4c0c      	ldr	r4, [pc, #48]	@ (8005284 <__libc_init_array+0x44>)
 8005254:	f000 f864 	bl	8005320 <_init>
 8005258:	1b64      	subs	r4, r4, r5
 800525a:	10a4      	asrs	r4, r4, #2
 800525c:	2600      	movs	r6, #0
 800525e:	42a6      	cmp	r6, r4
 8005260:	d105      	bne.n	800526e <__libc_init_array+0x2e>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	f855 3b04 	ldr.w	r3, [r5], #4
 8005268:	4798      	blx	r3
 800526a:	3601      	adds	r6, #1
 800526c:	e7ee      	b.n	800524c <__libc_init_array+0xc>
 800526e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005272:	4798      	blx	r3
 8005274:	3601      	adds	r6, #1
 8005276:	e7f2      	b.n	800525e <__libc_init_array+0x1e>
 8005278:	0800535c 	.word	0x0800535c
 800527c:	0800535c 	.word	0x0800535c
 8005280:	0800535c 	.word	0x0800535c
 8005284:	08005360 	.word	0x08005360

08005288 <__retarget_lock_acquire_recursive>:
 8005288:	4770      	bx	lr

0800528a <__retarget_lock_release_recursive>:
 800528a:	4770      	bx	lr

0800528c <_free_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4605      	mov	r5, r0
 8005290:	2900      	cmp	r1, #0
 8005292:	d041      	beq.n	8005318 <_free_r+0x8c>
 8005294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005298:	1f0c      	subs	r4, r1, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfb8      	it	lt
 800529e:	18e4      	addlt	r4, r4, r3
 80052a0:	f7ff ffa4 	bl	80051ec <__malloc_lock>
 80052a4:	4a1d      	ldr	r2, [pc, #116]	@ (800531c <_free_r+0x90>)
 80052a6:	6813      	ldr	r3, [r2, #0]
 80052a8:	b933      	cbnz	r3, 80052b8 <_free_r+0x2c>
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	6014      	str	r4, [r2, #0]
 80052ae:	4628      	mov	r0, r5
 80052b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b4:	f7ff bfa0 	b.w	80051f8 <__malloc_unlock>
 80052b8:	42a3      	cmp	r3, r4
 80052ba:	d908      	bls.n	80052ce <_free_r+0x42>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	1821      	adds	r1, r4, r0
 80052c0:	428b      	cmp	r3, r1
 80052c2:	bf01      	itttt	eq
 80052c4:	6819      	ldreq	r1, [r3, #0]
 80052c6:	685b      	ldreq	r3, [r3, #4]
 80052c8:	1809      	addeq	r1, r1, r0
 80052ca:	6021      	streq	r1, [r4, #0]
 80052cc:	e7ed      	b.n	80052aa <_free_r+0x1e>
 80052ce:	461a      	mov	r2, r3
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b10b      	cbz	r3, 80052d8 <_free_r+0x4c>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d9fa      	bls.n	80052ce <_free_r+0x42>
 80052d8:	6811      	ldr	r1, [r2, #0]
 80052da:	1850      	adds	r0, r2, r1
 80052dc:	42a0      	cmp	r0, r4
 80052de:	d10b      	bne.n	80052f8 <_free_r+0x6c>
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	4401      	add	r1, r0
 80052e4:	1850      	adds	r0, r2, r1
 80052e6:	4283      	cmp	r3, r0
 80052e8:	6011      	str	r1, [r2, #0]
 80052ea:	d1e0      	bne.n	80052ae <_free_r+0x22>
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	6053      	str	r3, [r2, #4]
 80052f2:	4408      	add	r0, r1
 80052f4:	6010      	str	r0, [r2, #0]
 80052f6:	e7da      	b.n	80052ae <_free_r+0x22>
 80052f8:	d902      	bls.n	8005300 <_free_r+0x74>
 80052fa:	230c      	movs	r3, #12
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	e7d6      	b.n	80052ae <_free_r+0x22>
 8005300:	6820      	ldr	r0, [r4, #0]
 8005302:	1821      	adds	r1, r4, r0
 8005304:	428b      	cmp	r3, r1
 8005306:	bf04      	itt	eq
 8005308:	6819      	ldreq	r1, [r3, #0]
 800530a:	685b      	ldreq	r3, [r3, #4]
 800530c:	6063      	str	r3, [r4, #4]
 800530e:	bf04      	itt	eq
 8005310:	1809      	addeq	r1, r1, r0
 8005312:	6021      	streq	r1, [r4, #0]
 8005314:	6054      	str	r4, [r2, #4]
 8005316:	e7ca      	b.n	80052ae <_free_r+0x22>
 8005318:	bd38      	pop	{r3, r4, r5, pc}
 800531a:	bf00      	nop
 800531c:	20000954 	.word	0x20000954

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
